[{"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\features\\Login\\Login.tsx":"1","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\api\\API.ts":"2","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\features\\Todolists\\Todolist\\TodoList.tsx":"3","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\hooks\\useAppSelector.ts":"4","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\store\\store.ts":"5","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\store\\reducers\\appReducer.ts":"6","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\store\\reducers\\todolistReducer.ts":"7","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\store\\actionCreators\\index.ts":"8","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\features\\Todolists\\TotolistsList.tsx":"9","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\store\\reducers\\tasksReducer.ts":"10","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\app\\App.tsx":"11","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\features\\Todolists\\Todolist\\Task\\Task.tsx":"12","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\index.tsx":"13","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\hooks\\useActions.ts":"14","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\store\\reducers\\authReducer.ts":"15","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\Components\\EditableSpan\\EditableSpan.tsx":"16","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\Components\\AddItemForm\\AddItemForm.tsx":"17","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\stories\\todolist-api.stories.tsx":"18"},{"size":4061,"mtime":1627492691712,"results":"19","hashOfConfig":"20"},{"size":3168,"mtime":1627403327698,"results":"21","hashOfConfig":"20"},{"size":4278,"mtime":1627583722480,"results":"22","hashOfConfig":"20"},{"size":315,"mtime":1627407920877,"results":"23","hashOfConfig":"20"},{"size":1522,"mtime":1627408145441,"results":"24","hashOfConfig":"20"},{"size":1706,"mtime":1627491858534,"results":"25","hashOfConfig":"20"},{"size":5535,"mtime":1627409168301,"results":"26","hashOfConfig":"20"},{"size":430,"mtime":1627409156780,"results":"27","hashOfConfig":"20"},{"size":2106,"mtime":1627497816450,"results":"28","hashOfConfig":"20"},{"size":9057,"mtime":1627409550617,"results":"29","hashOfConfig":"20"},{"size":3100,"mtime":1627578179900,"results":"30","hashOfConfig":"20"},{"size":1980,"mtime":1627583794942,"results":"31","hashOfConfig":"20"},{"size":619,"mtime":1627408145476,"results":"32","hashOfConfig":"20"},{"size":560,"mtime":1627408509985,"results":"33","hashOfConfig":"20"},{"size":2870,"mtime":1627409156787,"results":"34","hashOfConfig":"20"},{"size":1330,"mtime":1627197546366,"results":"35","hashOfConfig":"20"},{"size":1637,"mtime":1627498185226,"results":"36","hashOfConfig":"20"},{"size":1733,"mtime":1623348358487,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"14moyvu",{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\features\\Login\\Login.tsx",[],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\api\\API.ts",[],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\features\\Todolists\\Todolist\\TodoList.tsx",["76","77","78","79","80","81","82"],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\hooks\\useAppSelector.ts",[],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\store\\store.ts",[],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\store\\reducers\\appReducer.ts",[],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\store\\reducers\\todolistReducer.ts",[],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\store\\actionCreators\\index.ts",["83"],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\features\\Todolists\\TotolistsList.tsx",["84","85"],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\store\\reducers\\tasksReducer.ts",["86","87","88"],"import {TaskPriorities, tasksAPI, TaskStatuses, TaskType, TodolistType, UpdateTaskModelType} from \"../../api/API\";\r\nimport {\r\n    addTodolists,\r\n    fetchTodolists,\r\n    removeTodolist,\r\n} from \"./todolistReducer\";\r\nimport {AppRootStateType} from \"../store\";\r\nimport { setAppStatusAC} from \"./appReducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\n\r\n\r\nexport const fetchTasks = createAsyncThunk('tasks/fetchTasks',\r\n    async (todolistId: string, {dispatch, rejectWithValue}) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        try {\r\n            const res = await tasksAPI.getTasks(todolistId)\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            const tasks = res.data.items\r\n            return {tasks, todolistId}\r\n        } catch (err) {\r\n            handleServerNetworkError(err, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    })\r\n\r\nexport const addTask = createAsyncThunk('tasks/addTask',\r\n    async (param: { title: string, todolistId: string }, {dispatch, rejectWithValue}) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        try {\r\n            const res = await tasksAPI.createTask(param.todolistId, param.title)\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                return {task: res.data.data.item}\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n                return rejectWithValue(null)\r\n            }\r\n        } catch (err) {\r\n            handleServerNetworkError(err, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n\r\n    })\r\n\r\nexport const removeTask = createAsyncThunk('tasks/removeTask',\r\n    async (param: { taskId: string, todolistId: string }, {dispatch, rejectWithValue}) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        // thunkAPI.dispatch(changeTaskEntityStatusAC({param.taskId, param.todolistId, entityStatus: 'loading'}))\r\n        try {\r\n            const res = await tasksAPI.deleteTask(param.taskId, param.todolistId)\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                return {taskId: param.taskId, todolistId: param.todolistId}\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n                return rejectWithValue(null)\r\n            }\r\n        } catch (err) {\r\n            handleServerNetworkError(err, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    })\r\n\r\n\r\n//универсальная санка, которая помимо taskId и todolistId принимает необходимое поле для изменения status|title\r\nexport const updateTask = createAsyncThunk('tasks/updateTasks',\r\n    async (param: { taskId: string, todolistId: string, domainModel: UpdateDomainTaskModelType },\r\n           {dispatch, rejectWithValue, getState}) => {\r\n // так как мы обязаны на сервер отправить все св-ва, которые сервер ожидает, а не только\r\n// те, которые мы хотим обновить, соответственно нам нужно в этом месте взять таску целиком\r\n// чтобы у неё отобрать остальные св-ва\r\n        const state = getState() as AppRootStateType\r\n        const tasksForCurrentTodolist = state.tasks[param.todolistId]\r\n        const task = tasksForCurrentTodolist.find(t => t.id === param.taskId)\r\n        if (!task) {\r\n            return rejectWithValue('task not found in the state')\r\n        }\r\n        const apiModel: UpdateTaskModelType = {\r\n            title: task.title,\r\n            description: task.description,\r\n            status: task.status,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            deadline: task.deadline,\r\n            ...param.domainModel// перезатираем только то свойство, которое было передано в domainModel\r\n        }\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        const res = await tasksAPI.updateTask(param.todolistId, param.taskId, apiModel)\r\n        try {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                return param\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n                return rejectWithValue(null)\r\n            }\r\n        } catch (err) {\r\n            handleServerNetworkError(err, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n})\r\n\r\nexport const asyncActions = {\r\n    fetchTasks,\r\n    addTask,\r\n    removeTask,\r\n    updateTask\r\n}\r\n\r\n\r\nconst initialState: TaskStateType = {\r\n    // \"1\": [\r\n    //     {\r\n    //         id: \"1\", title: \"CSS\",\r\n    //         status: TaskStatuses.New, todoListId: 'todolistId1', description: '', startDate: '',\r\n    //         deadline: '', addedDate: '', order: 0,\r\n    //         priority: TaskPriorities.Low,\r\n    //         entityStatus: 'succeeded' as RequestStatusType,\r\n    //     },\r\n    //     {\r\n    //         id: \"2\", title: \"JS\",\r\n    //         status: TaskStatuses.Completed, todoListId: 'todolistId1', description: '', startDate: '',\r\n    //         deadline: '', addedDate: '', order: 0,\r\n    //         priority: TaskPriorities.Low,\r\n    //         entityStatus: 'succeeded' as RequestStatusType,\r\n    //     },\r\n    //     {\r\n    //         id: \"3\", title: \"REACT\",\r\n    //         status: TaskStatuses.New, todoListId: 'todolistId1', description: '', startDate: '',\r\n    //         deadline: '', addedDate: '', order: 0,\r\n    //         priority: TaskPriorities.Low,\r\n    //         entityStatus: 'succeeded' as RequestStatusType,\r\n    //     },\r\n    // ],\r\n    // \"2\": [\r\n    //     {\r\n    //         id: \"1\", title: \"book\",\r\n    //         status: TaskStatuses.New, todoListId: 'todolistId1', description: '', startDate: '',\r\n    //         deadline: '', addedDate: '', order: 0,\r\n    //         priority: TaskPriorities.Low,\r\n    //         entityStatus: 'succeeded' as RequestStatusType,\r\n    //     },\r\n    //     {\r\n    //         id: \"2\", title: \"book2\",\r\n    //         status: TaskStatuses.New, todoListId: 'todolistId1', description: '', startDate: '',\r\n    //         deadline: '', addedDate: '', order: 0,\r\n    //         priority: TaskPriorities.Low,\r\n    //         entityStatus: 'succeeded' as RequestStatusType,\r\n    //     },\r\n    //     {\r\n    //         id: \"3\", title: \"book3\",\r\n    //         status: TaskStatuses.New, todoListId: 'todolistId1', description: '', startDate: '',\r\n    //         deadline: '', addedDate: '', order: 0,\r\n    //         priority: TaskPriorities.Low,\r\n    //         entityStatus: 'succeeded' as RequestStatusType,\r\n    //     },\r\n    //\r\n    // ]\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: initialState,\r\n    reducers: {\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolists.fulfilled, (state, action) => {\r\n            state[action.payload.todo.id] = []\r\n        });\r\n        builder.addCase(removeTodolist.fulfilled, (state, action) => {\r\n            delete state[action.payload.todolistId]\r\n        });\r\n        builder.addCase(fetchTodolists.fulfilled, (state, action) => {\r\n            action.payload.todos.forEach((tl) => {\r\n                state[tl.id] = []\r\n            })\r\n        });\r\n        builder.addCase(fetchTasks.fulfilled, (state, action) => {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        });\r\n        builder.addCase(addTask.fulfilled, (state, action) => {\r\n            state[action.payload.task.todoListId].unshift(action.payload.task)\r\n        });\r\n        builder.addCase(removeTask.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        });\r\n        builder.addCase(updateTask.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.domainModel}\r\n            }\r\n        })\r\n    }\r\n})\r\n\r\nexport const tasksReducer = slice.reducer\r\n\r\n// types\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n// создаем тип, для универсальной санки с необязательными полями, для подстановки нужного поля в санку\r\ntype UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n}","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\app\\App.tsx",["89","90","91","92"],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\features\\Todolists\\Todolist\\Task\\Task.tsx",["93","94","95"],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\index.tsx",[],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\hooks\\useActions.ts",[],["96","97"],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\store\\reducers\\authReducer.ts",[],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\Components\\EditableSpan\\EditableSpan.tsx",[],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\Components\\AddItemForm\\AddItemForm.tsx",[],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\stories\\todolist-api.stories.tsx",["98"],{"ruleId":"99","severity":1,"message":"100","line":34,"column":8,"nodeType":"101","endLine":34,"endColumn":10,"suggestions":"102"},{"ruleId":"99","severity":1,"message":"103","line":38,"column":8,"nodeType":"101","endLine":38,"endColumn":10,"suggestions":"104"},{"ruleId":"99","severity":1,"message":"105","line":42,"column":8,"nodeType":"101","endLine":42,"endColumn":26,"suggestions":"106"},{"ruleId":"99","severity":1,"message":"107","line":50,"column":8,"nodeType":"101","endLine":50,"endColumn":10,"suggestions":"108"},{"ruleId":"99","severity":1,"message":"109","line":54,"column":8,"nodeType":"101","endLine":54,"endColumn":10,"suggestions":"110"},{"ruleId":"99","severity":1,"message":"109","line":57,"column":8,"nodeType":"101","endLine":57,"endColumn":10,"suggestions":"111"},{"ruleId":"99","severity":1,"message":"109","line":60,"column":8,"nodeType":"101","endLine":60,"endColumn":10,"suggestions":"112"},{"ruleId":"113","severity":1,"message":"114","line":6,"column":1,"nodeType":"115","endLine":11,"endColumn":2},{"ruleId":"99","severity":1,"message":"116","line":21,"column":8,"nodeType":"101","endLine":21,"endColumn":10,"suggestions":"117"},{"ruleId":"99","severity":1,"message":"118","line":25,"column":8,"nodeType":"101","endLine":25,"endColumn":10,"suggestions":"119"},{"ruleId":"120","severity":1,"message":"121","line":1,"column":9,"nodeType":"122","messageId":"123","endLine":1,"endColumn":23},{"ruleId":"120","severity":1,"message":"124","line":1,"column":35,"nodeType":"122","messageId":"123","endLine":1,"endColumn":47},{"ruleId":"120","severity":1,"message":"125","line":1,"column":59,"nodeType":"122","messageId":"123","endLine":1,"endColumn":71},{"ruleId":"120","severity":1,"message":"126","line":9,"column":5,"nodeType":"122","messageId":"123","endLine":9,"endColumn":19},{"ruleId":"120","severity":1,"message":"127","line":37,"column":11,"nodeType":"122","messageId":"123","endLine":37,"endColumn":17},{"ruleId":"99","severity":1,"message":"128","line":44,"column":8,"nodeType":"101","endLine":44,"endColumn":10,"suggestions":"129"},{"ruleId":"99","severity":1,"message":"130","line":48,"column":8,"nodeType":"101","endLine":48,"endColumn":10,"suggestions":"131"},{"ruleId":"99","severity":1,"message":"132","line":20,"column":7,"nodeType":"101","endLine":20,"endColumn":27,"suggestions":"133"},{"ruleId":"99","severity":1,"message":"134","line":25,"column":7,"nodeType":"101","endLine":25,"endColumn":27,"suggestions":"135"},{"ruleId":"99","severity":1,"message":"134","line":29,"column":7,"nodeType":"101","endLine":29,"endColumn":27,"suggestions":"136"},{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","replacedBy":"140"},{"ruleId":"113","severity":1,"message":"114","line":4,"column":1,"nodeType":"115","endLine":6,"endColumn":2},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchTasks', 'isLogged', and 'props.todolistId'. Either include them or remove the dependency array.","ArrayExpression",["141"],"React Hook useCallback has missing dependencies: 'addTask' and 'props.todolistId'. Either include them or remove the dependency array.",["142"],"React Hook useCallback has a missing dependency: 'updateTodolistTitle'. Either include it or remove the dependency array.",["143"],"React Hook useCallback has a missing dependency: 'removeTodolist'. Either include it or remove the dependency array.",["144"],"React Hook useCallback has missing dependencies: 'changeFilter' and 'props.todolistId'. Either include them or remove the dependency array.",["145"],["146"],["147"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","React Hook useEffect has missing dependencies: 'fetchTodolists' and 'isLoggedIn'. Either include them or remove the dependency array.",["148"],"React Hook useCallback has a missing dependency: 'addTodolists'. Either include it or remove the dependency array.",["149"],"@typescript-eslint/no-unused-vars","'TaskPriorities' is defined but never used.","Identifier","unusedVar","'TaskStatuses' is defined but never used.","'TodolistType' is defined but never used.","'LinearProgress' is defined but never used.","'status' is assigned a value but never used.","React Hook useCallback has a missing dependency: 'logout'. Either include it or remove the dependency array.",["150"],"React Hook useEffect has a missing dependency: 'initializeApp'. Either include it or remove the dependency array.",["151"],"React Hook useCallback has a missing dependency: 'removeTask'. Either include it or remove the dependency array.",["152"],"React Hook useCallback has a missing dependency: 'updateTask'. Either include it or remove the dependency array.",["153"],["154"],"no-native-reassign",["155"],"no-negated-in-lhs",["156"],{"desc":"157","fix":"158"},{"desc":"159","fix":"160"},{"desc":"161","fix":"162"},{"desc":"163","fix":"164"},{"desc":"165","fix":"166"},{"desc":"165","fix":"167"},{"desc":"165","fix":"168"},{"desc":"169","fix":"170"},{"desc":"171","fix":"172"},{"desc":"173","fix":"174"},{"desc":"175","fix":"176"},{"desc":"177","fix":"178"},{"desc":"179","fix":"180"},{"desc":"179","fix":"181"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [fetchTasks, isLogged, props.todolistId]",{"range":"182","text":"183"},"Update the dependencies array to be: [addTask, props.todolistId]",{"range":"184","text":"185"},"Update the dependencies array to be: [props.todolistId, updateTodolistTitle]",{"range":"186","text":"187"},"Update the dependencies array to be: [removeTodolist]",{"range":"188","text":"189"},"Update the dependencies array to be: [changeFilter, props.todolistId]",{"range":"190","text":"191"},{"range":"192","text":"191"},{"range":"193","text":"191"},"Update the dependencies array to be: [fetchTodolists, isLoggedIn]",{"range":"194","text":"195"},"Update the dependencies array to be: [addTodolists]",{"range":"196","text":"197"},"Update the dependencies array to be: [logout]",{"range":"198","text":"199"},"Update the dependencies array to be: [initializeApp]",{"range":"200","text":"201"},"Update the dependencies array to be: [removeTask, task.id, todolistId]",{"range":"202","text":"203"},"Update the dependencies array to be: [task.id, todolistId, updateTask]",{"range":"204","text":"205"},{"range":"206","text":"205"},[1314,1316],"[fetchTasks, isLogged, props.todolistId]",[1529,1531],"[addTask, props.todolistId]",[1678,1696],"[props.todolistId, updateTodolistTitle]",[1972,1974],"[removeTodolist]",[2084,2086],"[changeFilter, props.todolistId]",[2201,2203],[2324,2326],[793,795],"[fetchTodolists, isLoggedIn]",[900,902],"[addTodolists]",[1304,1306],"[logout]",[1366,1368],"[initializeApp]",[726,746],"[removeTask, task.id, todolistId]",[1003,1023],"[task.id, todolistId, updateTask]",[1170,1190]]