[{"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\reportWebVitals.ts":"1","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\api\\API.ts":"2","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\index.tsx":"3","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\stories\\Task.stories.tsx":"4","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\stories\\todolist-api.stories.tsx":"5","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\stories\\task-api.stories.tsx":"6","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\Components\\AddItemForm\\AddItemForm.tsx":"7","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\Components\\EditableSpan\\EditableSpan.tsx":"8","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\features\\Todolists\\Todolist\\Task\\Task.tsx":"9","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\features\\Todolists\\tasksReducer.ts":"10","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\features\\Todolists\\Todolist\\TodoList.tsx":"11","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\app\\App.tsx":"12","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\features\\Todolists\\TotolistsList.tsx":"13","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\app\\store.ts":"14","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\features\\Todolists\\todolistReducer.ts":"15","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\stories\\EditableSpan.stories.tsx":"16","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\app\\appReducer.ts":"17","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\Components\\ErrorSnackBar\\ErrorSnackBar.tsx":"18","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\utils\\error-utils.ts":"19","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\stories\\AppWithRedux.stories.tsx":"20","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\stories\\AddItemForn.stories.tsx":"21","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\stories\\ReduxProviderStoreDecotaror.tsx":"22","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\app\\selectors.ts":"23","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\features\\Todolists\\selectors.ts":"24","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\features\\Auth\\authReducer.ts":"25","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\features\\Auth\\selectors.ts":"26","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\features\\Auth\\Login.tsx":"27"},{"size":440,"mtime":1618586872932,"results":"28","hashOfConfig":"29"},{"size":3072,"mtime":1623356372702,"results":"30","hashOfConfig":"29"},{"size":617,"mtime":1624479299754,"results":"31","hashOfConfig":"29"},{"size":1782,"mtime":1620486481394,"results":"32","hashOfConfig":"29"},{"size":1742,"mtime":1619026692850,"results":"33","hashOfConfig":"29"},{"size":2122,"mtime":1623358569435,"results":"34","hashOfConfig":"29"},{"size":1553,"mtime":1620478482785,"results":"35","hashOfConfig":"29"},{"size":1268,"mtime":1620478482789,"results":"36","hashOfConfig":"29"},{"size":1791,"mtime":1623348358442,"results":"37","hashOfConfig":"29"},{"size":9639,"mtime":1625323310677,"results":"38","hashOfConfig":"29"},{"size":3919,"mtime":1626812262010,"results":"39","hashOfConfig":"29"},{"size":3175,"mtime":1625291653608,"results":"40","hashOfConfig":"29"},{"size":2176,"mtime":1626811939404,"results":"41","hashOfConfig":"29"},{"size":2167,"mtime":1626812937375,"results":"42","hashOfConfig":"29"},{"size":6017,"mtime":1625291155421,"results":"43","hashOfConfig":"29"},{"size":813,"mtime":1619286510610,"results":"44","hashOfConfig":"29"},{"size":1604,"mtime":1625294632823,"results":"45","hashOfConfig":"29"},{"size":1034,"mtime":1624995019132,"results":"46","hashOfConfig":"29"},{"size":667,"mtime":1624994519302,"results":"47","hashOfConfig":"29"},{"size":520,"mtime":1625326579751,"results":"48","hashOfConfig":"29"},{"size":706,"mtime":1619286510626,"results":"49","hashOfConfig":"29"},{"size":1355,"mtime":1625326139717,"results":"50","hashOfConfig":"29"},{"size":224,"mtime":1626803822039,"results":"51","hashOfConfig":"29"},{"size":211,"mtime":1626811889457,"results":"52","hashOfConfig":"29"},{"size":1962,"mtime":1625292259350,"results":"53","hashOfConfig":"29"},{"size":144,"mtime":1626803884107,"results":"54","hashOfConfig":"29"},{"size":3629,"mtime":1626810762728,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"14moyvu",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"64"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\reportWebVitals.ts",[],["116","117"],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\api\\API.ts",[],["118","119"],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\index.tsx",[],["120","121"],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\stories\\Task.stories.tsx",[],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\stories\\todolist-api.stories.tsx",["122"],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\stories\\task-api.stories.tsx",["123"],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\Components\\AddItemForm\\AddItemForm.tsx",[],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\Components\\EditableSpan\\EditableSpan.tsx",[],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\features\\Todolists\\Todolist\\Task\\Task.tsx",["124","125","126"],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\features\\Todolists\\tasksReducer.ts",["127"],"import {TaskPriorities, tasksAPI, TaskStatuses, TaskType, TodolistType, UpdateTaskModelType} from \"../../api/API\";\r\nimport {\r\n    addTodolistAC,\r\n    removeTodolistAC,\r\n    setTodolistsAC,\r\n} from \"./todolistReducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, setAppStatusAC} from \"../../app/appReducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: TaskStateType = {\r\n    \"1\": [\r\n        {\r\n            id: \"1\", title: \"CSS\",\r\n            status: TaskStatuses.New, todoListId: 'todolistId1', description: '', startDate: '',\r\n            deadline: '', addedDate: '', order: 0,\r\n            priority: TaskPriorities.Low,\r\n            entityStatus: 'succeeded' as RequestStatusType,\r\n        },\r\n        {\r\n            id: \"2\", title: \"JS\",\r\n            status: TaskStatuses.Completed, todoListId: 'todolistId1', description: '', startDate: '',\r\n            deadline: '', addedDate: '', order: 0,\r\n            priority: TaskPriorities.Low,\r\n            entityStatus: 'succeeded' as RequestStatusType,\r\n        },\r\n        {\r\n            id: \"3\", title: \"REACT\",\r\n            status: TaskStatuses.New, todoListId: 'todolistId1', description: '', startDate: '',\r\n            deadline: '', addedDate: '', order: 0,\r\n            priority: TaskPriorities.Low,\r\n            entityStatus: 'succeeded' as RequestStatusType,\r\n        },\r\n    ],\r\n    \"2\": [\r\n        {\r\n            id: \"1\", title: \"book\",\r\n            status: TaskStatuses.New, todoListId: 'todolistId1', description: '', startDate: '',\r\n            deadline: '', addedDate: '', order: 0,\r\n            priority: TaskPriorities.Low,\r\n            entityStatus: 'succeeded' as RequestStatusType,\r\n        },\r\n        {\r\n            id: \"2\", title: \"book2\",\r\n            status: TaskStatuses.New, todoListId: 'todolistId1', description: '', startDate: '',\r\n            deadline: '', addedDate: '', order: 0,\r\n            priority: TaskPriorities.Low,\r\n            entityStatus: 'succeeded' as RequestStatusType,\r\n        },\r\n        {\r\n            id: \"3\", title: \"book3\",\r\n            status: TaskStatuses.New, todoListId: 'todolistId1', description: '', startDate: '',\r\n            deadline: '', addedDate: '', order: 0,\r\n            priority: TaskPriorities.Low,\r\n            entityStatus: 'succeeded' as RequestStatusType,\r\n        },\r\n\r\n    ]\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setTasksAC: (state, action: PayloadAction<SetTaskType>) => {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        },\r\n        addTaskAC: (state, action: PayloadAction<TaskType>) => {\r\n            state[action.payload.todoListId].unshift(action.payload)\r\n        },\r\n        removeTaskAC: (state, action: PayloadAction<RemoveTaskType>) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        },\r\n        updateTaskAC: (state, action: PayloadAction<UpdateTaskType>) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.model}\r\n            }\r\n        },\r\n        changeTaskEntityStatusAC: (state, action: PayloadAction<ChangeTaskEntityType>) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index].entityStatus = action.payload.entityStatus\r\n            }\r\n        }\r\n    },//\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistAC, (state, action) => {\r\n            state[action.payload.todo.id] = []\r\n        });\r\n        builder.addCase(removeTodolistAC, (state, action) => {\r\n            delete state[action.payload.todolistID]\r\n        });\r\n        builder.addCase(setTodolistsAC, (state, action) => {\r\n            action.payload.todos.forEach((tl) => {\r\n                state[tl.id] = []\r\n            })\r\n        })\r\n    }\r\n})\r\n\r\ntype ChangeTaskEntityType = { taskId: string, todolistId: string, entityStatus: RequestStatusType }\r\ntype UpdateTaskType = { taskId: string, model: UpdateDomainTaskModelType, todolistId: string }\r\ntype RemoveTaskType = { taskId: string, todolistId: string }\r\ntype SetTaskType = { tasks: Array<TaskType>, todolistId: string }\r\n\r\nexport const tasksReducer = slice.reducer\r\nexport const {setTasksAC,addTaskAC,removeTaskAC,updateTaskAC,changeTaskEntityStatusAC} = slice.actions\r\n\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) =>\r\n    (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        tasksAPI.getTasks(todolistId)\r\n            .then(res => {\r\n                const tasks = res.data.items\r\n                const action = setTasksAC({tasks, todolistId})\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            }).catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n    }\r\n\r\nexport const removeTaskTC = (taskId: string, todolistId: string) =>\r\n    (dispatch: Dispatch) => {\r\n\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        dispatch(changeTaskEntityStatusAC({taskId, todolistId, entityStatus: 'loading'}))\r\n        tasksAPI.deleteTask(taskId, todolistId)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = removeTaskAC({taskId, todolistId})\r\n                    dispatch(action)\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n    }\r\n\r\nexport const addTaskTC = (title: string, todolistId: string) =>\r\n    (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        tasksAPI.createTask(todolistId, title)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = addTaskAC(res.data.data.item)\r\n                    dispatch(action)\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n\r\n    }\r\n\r\n// универсальная санка, которая помимо taskId и todolistId принимает необходимое поле для изменения status|title\r\nexport const updateTask = (taskId: string, todolistId: string, domainModel: UpdateDomainTaskModelType) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n// так как мы обязаны на сервер отправить все св-ва, которые сервер ожидает, а не только\r\n// те, которые мы хотим обновить, соответственно нам нужно в этом месте взять таску целиком\r\n// чтобы у неё отобрать остальные св-ва\r\n        const allTasksFromState = getState().tasks\r\n        const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n        const task = tasksForCurrentTodolist.find(t => t.id === taskId)\r\n        if (!task) {\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n        const apiModel: UpdateTaskModelType = {\r\n            title: task.title,\r\n            description: task.description,\r\n            status: task.status,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            deadline: task.deadline,\r\n            ...domainModel// перезатираем только то свойство, которое было передано в domainModel\r\n        }\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        dispatch(changeTaskEntityStatusAC({taskId, todolistId, entityStatus: 'loading'}))\r\n        tasksAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC({taskId,model: domainModel, todolistId})\r\n                    dispatch(action)\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                    dispatch(changeTaskEntityStatusAC({taskId, todolistId, entityStatus: 'succeeded'}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n\r\n    }\r\n\r\n// types\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\n// создаем тип, для универсальной санки с необязательными полями, для подстановки нужного поля в санку\r\ntype UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n    entityStatus?: RequestStatusType\r\n}","C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\features\\Todolists\\Todolist\\TodoList.tsx",["128","129","130","131","132","133"],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\app\\App.tsx",["134","135"],"import React, {useCallback, useEffect} from 'react';\r\nimport './App.scss';\r\nimport {\r\n    AppBar,\r\n    Button, CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    makeStyles,\r\n    Toolbar,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport {TodolistsList} from \"../features/Todolists/TotolistsList\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {initializeAppTC} from \"./appReducer\";\r\nimport ErrorSnackBar from \"../Components/ErrorSnackBar/ErrorSnackBar\";\r\nimport {HashRouter, Redirect, Route, Switch, useHistory} from 'react-router-dom';\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {logoutTC} from \"../features/Login/authReducer\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\nfunction App() {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const status = useSelector<AppRootStateType, string>(state => state.app.status)\r\n    const classes = useStyles();\r\n    let history = useHistory();\r\n\r\n    const handleLogout = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackBar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        My TODO\r\n                    </Typography>\r\n                    {\r\n                        !isLoggedIn ?\r\n                            <Button color=\"inherit\" onClick={() => history.push('/login')}>Login</Button> :\r\n                            <Button color=\"inherit\" onClick={handleLogout}>Log out</Button>\r\n                    }\r\n                </Toolbar>\r\n            </AppBar>\r\n            {status === 'loading' && <LinearProgress color={\"primary\"}/>}\r\n            <Container fixed>\r\n                <HashRouter>\r\n                    <Switch>\r\n                        <Route exact path={'/'} render={() => <TodolistsList/>}/>\r\n                        <Route path={'/login'} render={() => <Login/>}/>\r\n                        <Route path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n                        <Redirect from={'*'} to={'/404'}/>\r\n                    </Switch>\r\n                </HashRouter>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n",["136","137"],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\features\\Todolists\\TotolistsList.tsx",["138","139"],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\app\\store.ts",["140"],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\features\\Todolists\\todolistReducer.ts",[],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\stories\\EditableSpan.stories.tsx",[],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\app\\appReducer.ts",[],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\Components\\ErrorSnackBar\\ErrorSnackBar.tsx",[],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\utils\\error-utils.ts",[],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\stories\\AppWithRedux.stories.tsx",[],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\stories\\AddItemForn.stories.tsx",[],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\stories\\ReduxProviderStoreDecotaror.tsx",["141","142","143"],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\app\\selectors.ts",[],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\features\\Todolists\\selectors.ts",[],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\features\\Auth\\authReducer.ts",[],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\features\\Auth\\selectors.ts",[],"C:\\Frontend\\IT-incubator\\TodoList\\MyTodo\\TodoList\\src\\features\\Auth\\Login.tsx",["144"],{"ruleId":"145","replacedBy":"146"},{"ruleId":"147","replacedBy":"148"},{"ruleId":"145","replacedBy":"149"},{"ruleId":"147","replacedBy":"150"},{"ruleId":"145","replacedBy":"151"},{"ruleId":"147","replacedBy":"152"},{"ruleId":"153","severity":1,"message":"154","line":4,"column":1,"nodeType":"155","endLine":6,"endColumn":2},{"ruleId":"153","severity":1,"message":"154","line":4,"column":1,"nodeType":"155","endLine":6,"endColumn":2},{"ruleId":"156","severity":1,"message":"157","line":19,"column":7,"nodeType":"158","endLine":19,"endColumn":27,"suggestions":"159"},{"ruleId":"156","severity":1,"message":"157","line":23,"column":7,"nodeType":"158","endLine":23,"endColumn":27,"suggestions":"160"},{"ruleId":"156","severity":1,"message":"157","line":26,"column":7,"nodeType":"158","endLine":26,"endColumn":27,"suggestions":"161"},{"ruleId":"162","severity":1,"message":"163","line":1,"column":59,"nodeType":"164","messageId":"165","endLine":1,"endColumn":71},{"ruleId":"156","severity":1,"message":"166","line":36,"column":7,"nodeType":"158","endLine":36,"endColumn":9,"suggestions":"167"},{"ruleId":"156","severity":1,"message":"168","line":40,"column":7,"nodeType":"158","endLine":40,"endColumn":17,"suggestions":"169"},{"ruleId":"156","severity":1,"message":"157","line":52,"column":7,"nodeType":"158","endLine":52,"endColumn":9,"suggestions":"170"},{"ruleId":"156","severity":1,"message":"171","line":56,"column":7,"nodeType":"158","endLine":56,"endColumn":9,"suggestions":"172"},{"ruleId":"156","severity":1,"message":"171","line":59,"column":7,"nodeType":"158","endLine":59,"endColumn":9,"suggestions":"173"},{"ruleId":"156","severity":1,"message":"171","line":62,"column":7,"nodeType":"158","endLine":62,"endColumn":9,"suggestions":"174"},{"ruleId":"156","severity":1,"message":"157","line":45,"column":8,"nodeType":"158","endLine":45,"endColumn":10,"suggestions":"175"},{"ruleId":"156","severity":1,"message":"176","line":49,"column":8,"nodeType":"158","endLine":49,"endColumn":10,"suggestions":"177"},{"ruleId":"145","replacedBy":"178"},{"ruleId":"147","replacedBy":"179"},{"ruleId":"156","severity":1,"message":"180","line":27,"column":8,"nodeType":"158","endLine":27,"endColumn":10,"suggestions":"181"},{"ruleId":"156","severity":1,"message":"157","line":31,"column":8,"nodeType":"158","endLine":31,"endColumn":10,"suggestions":"182"},{"ruleId":"156","severity":1,"message":"183","line":49,"column":7,"nodeType":"158","endLine":49,"endColumn":9,"suggestions":"184"},{"ruleId":"162","severity":1,"message":"185","line":3,"column":9,"nodeType":"164","messageId":"165","endLine":3,"endColumn":24},{"ruleId":"162","severity":1,"message":"186","line":3,"column":26,"nodeType":"164","messageId":"165","endLine":3,"endColumn":37},{"ruleId":"162","severity":1,"message":"187","line":10,"column":7,"nodeType":"164","messageId":"165","endLine":10,"endColumn":19},{"ruleId":"188","severity":1,"message":"189","line":54,"column":32,"nodeType":"190","endLine":54,"endColumn":49},"no-native-reassign",["191"],"no-negated-in-lhs",["192"],["191"],["192"],["191"],["192"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["193"],["194"],["195"],"@typescript-eslint/no-unused-vars","'TodolistType' is defined but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'dispatch', 'isLoggedIn', and 'props.todolistId'. Either include them or remove the dependency array.",["196"],"React Hook useCallback has a missing dependency: 'props.todolistId'. Either include it or remove the dependency array.",["197"],["198"],"React Hook useCallback has missing dependencies: 'changeFilter' and 'props.todolistId'. Either include them or remove the dependency array.",["199"],["200"],["201"],["202"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["203"],["191"],["192"],"React Hook useEffect has missing dependencies: 'dispatch' and 'isLoggedIn'. Either include them or remove the dependency array.",["204"],["205"],"React Hook useMemo has missing dependencies: 'actions' and 'dispatch'. Either include them or remove the dependency array.",["206"],"'applyMiddleware' is defined but never used.","'createStore' is defined but never used.","'initialState' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","no-global-assign","no-unsafe-negation",{"desc":"207","fix":"208"},{"desc":"207","fix":"209"},{"desc":"207","fix":"210"},{"desc":"211","fix":"212"},{"desc":"213","fix":"214"},{"desc":"215","fix":"216"},{"desc":"217","fix":"218"},{"desc":"217","fix":"219"},{"desc":"217","fix":"220"},{"desc":"215","fix":"221"},{"desc":"215","fix":"222"},{"desc":"223","fix":"224"},{"desc":"215","fix":"225"},{"desc":"226","fix":"227"},"Update the dependencies array to be: [dispatch, task.id, todolistId]",{"range":"228","text":"229"},{"range":"230","text":"229"},{"range":"231","text":"229"},"Update the dependencies array to be: [dispatch, isLoggedIn, props.todolistId]",{"range":"232","text":"233"},"Update the dependencies array to be: [dispatch, props.todolistId]",{"range":"234","text":"235"},"Update the dependencies array to be: [dispatch]",{"range":"236","text":"237"},"Update the dependencies array to be: [changeFilter, props.todolistId]",{"range":"238","text":"239"},{"range":"240","text":"239"},{"range":"241","text":"239"},{"range":"242","text":"237"},{"range":"243","text":"237"},"Update the dependencies array to be: [dispatch, isLoggedIn]",{"range":"244","text":"245"},{"range":"246","text":"237"},"Update the dependencies array to be: [actions, dispatch]",{"range":"247","text":"248"},[683,703],"[dispatch, task.id, todolistId]",[946,966],[1098,1118],[1176,1178],"[dispatch, isLoggedIn, props.todolistId]",[1368,1378],"[dispatch, props.todolistId]",[1835,1837],"[dispatch]",[1946,1948],"[changeFilter, props.todolistId]",[2062,2064],[2184,2186],[1476,1478],[1550,1552],[923,925],"[dispatch, isLoggedIn]",[1036,1038],[1814,1816],"[actions, dispatch]"]