{"version":3,"sources":["features/Todolists/Todolist/Task/Task.module.scss","features/Todolists/Todolists.module.scss","api/types.ts","Components/AddItemForm/AddItemForm.tsx","Components/EditableSpan/EditableSpan.tsx","utils/hooks/useActions.ts","store/actionCreators/appActionCreators.ts","utils/error-utils.ts","api/API.ts","store/reducers/authReducer.ts","store/reducers/appReducer.ts","store/reducers/todolistReducer.ts","store/reducers/tasksReducer.ts","assets/icons.js","features/Todolists/Todolist/Task/Task.tsx","utils/hooks/useAppSelector.ts","features/Todolists/Todolist/TodoList.tsx","features/Todolists/TotolistsList.tsx","Components/ErrorSnackBar/ErrorSnackBar.tsx","features/Login/InfoBox.tsx","features/Login/Login.tsx","Components/Spinner/Spinner.tsx","app/App.tsx","reportWebVitals.ts","store/store.ts","index.tsx"],"names":["module","exports","TaskStatuses","TaskPriorities","AddItemForm","React","memo","addItem","disabled","placeholder","icon","useState","error","setError","title","setTitle","useEffect","timeoutId","setTimeout","clearTimeout","addItemHandler","a","trim","message","className","onClick","value","type","onChange","e","currentTarget","onKeyPress","key","EditableSpan","fontSize","fontWeight","editMode","setEditMode","onBlur","autoFocus","style","onDoubleClick","useAppDispatch","useDispatch","useActions","actions","dispatch","useMemo","bindActionCreators","setAppStatus","createAction","setAppError","handleServerAppError","data","messages","length","status","handleServerNetworkError","instance","axios","create","baseURL","withCredentials","headers","tasksAPI","todolistId","get","post","taskId","delete","model","put","todolistAPI","authAPI","login","createAsyncThunk","rejectWithValue","res","resultCode","isLoggedIn","errors","fieldsErrors","undefined","logout","arg","asyncActions","slice","createSlice","name","initialState","reducers","setIsLoggedIn","state","action","payload","extraReducers","builder","addCase","fulfilled","authReducer","reducer","initializeApp","appReducer","isInitialized","fetchTodolists","todos","addTodolists","item","removeTodolist","updateTodolistTitle","param","changeFilterAC","index","findIndex","tl","id","filter","map","entityStatus","push","splice","todolistReducer","fetchTasks","tasks","items","addTask","removeTask","updateTask","getState","tasksForCurrentTodolist","task","find","t","apiModel","description","priority","startDate","deadline","domainModel","tasksReducer","forEach","todoListId","unshift","icons","plus","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","dot","trash","fillRule","clipRule","email","lock","unlock","info","closeMenu","openMenu","settings","Task","taskAsyncActions","Boolean","checked","setChecked","removeTaskHandler","useCallback","onChangeHandler","Completed","New","changeTaskTitle","statusLoading","useAppSelector","useSelector","Todolist","props","isLogged","auth","app","todolistAsyncActions","addTaskHandler","rejected","match","Error","changeTodoListTitle","changeFilter","removeTodolistHandler","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","allTodoLists","tasksForTodolist","text","onclick","ButtonDefault","TodolistsList","todolists","addTodoList","todo","todolist","to","ErrorSnackBar","closeError","setCloseError","handleClose","timeId","onClose","Alert","InfoBox","children","open","setOpen","href","target","rel","Login","show","setShow","authAsyncActions","formik","useFormik","initialValues","password","rememberMe","validate","values","test","onSubmit","formikHelpers","setFieldError","field","handleSubmit","getFieldProps","touched","htmlFor","Spinner","color","Array","i","background","App","appAsyncActions","menu","setMenu","handleLogout","exact","path","render","from","ItemMenu","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","window","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.ae6beb48.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"task\":\"Task_task__ZkZlS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Todolists_wrapper__2oAzE\",\"todo\":\"Todolists_todo__1PpEo\"};","// types\r\nexport type ParamsLoginType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type TodolistType= {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\nexport type GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\nexport type FieldError = {\r\n    field: string\r\n    error: string\r\n}\r\nexport type ResponseType<T = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors?: Array<FieldError>\r\n    data: T\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, ReactNode, useEffect, useState} from \"react\";\r\n\r\nexport type PropsType = {\r\n    addItem: (title: string) => Promise<any>\r\n    disabled?: boolean\r\n    placeholder?: string\r\n    icon?: ReactNode\r\n}\r\n\r\nexport const AddItemForm = React.memo(({addItem, disabled = false, placeholder, icon}: PropsType) => {\r\n    let [error, setError] = useState<string | null>(null)\r\n    let [title, setTitle] = useState(\"\")\r\n\r\n\r\n    useEffect(() => {\r\n        let timeoutId: number;\r\n        if(error) {\r\n            timeoutId = setTimeout(setError,3000,null)\r\n        }\r\n        return () => clearTimeout(timeoutId)\r\n    },[error])\r\n\r\n    const addItemHandler = async () => {\r\n        if (title.trim() !== \"\") {\r\n            try {\r\n                await addItem(title.trim());\r\n                setTitle(\"\");\r\n            } catch (e) {\r\n                setError(e.message);\r\n            }\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.key === 'Enter') {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='flex justify-center'>\r\n            <div className=\"text-gray-400 relative flex items-center relative\">\r\n                <button onClick={addItemHandler}\r\n                        disabled={disabled}\r\n                        className='absolute p-2'>\r\n                    {icon}\r\n                </button>\r\n                <input\r\n                    value={title}\r\n                    className={`border-2 ${error && 'border-red-500'} bg-white shadow-md rounded-md pl-16 pr-6 py-2 my-2 w-64`}\r\n                    type=\"text\"\r\n                    placeholder={placeholder}\r\n                    disabled={disabled}\r\n                    onChange={onChangeHandler}\r\n                    onKeyPress={onKeyPressHandler}\r\n                />\r\n                {error ? <div className='absolute -top-6 -right-4 p-1 border text-red-500 bg-gray-400 bg-opacity-10 rounded-md'>{error}</div> : null}\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\n\r\nexport type PropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n    disabled?: boolean\r\n    fontSize?: string\r\n    fontWeight?: \"normal\" | \"inherit\" | \"-moz-initial\" | \"initial\" | \"revert\" | \"unset\" | \"bold\" | (number & {}) |\r\n        \"bolder\" | \"lighter\" | undefined\r\n}\r\n\r\nexport const EditableSpan = React.memo(({value, onChange, disabled = false, fontSize, fontWeight}: PropsType) => {\r\n    const [editMode, setEditMode] = React.useState(false)\r\n    const [title, setTitle] = useState(value)\r\n\r\n    const activateEditMode = () => {\r\n        if (!disabled) {\r\n            setEditMode(true)\r\n            setTitle(value)\r\n        }\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        onChange(title)\r\n    }\r\n    const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            setEditMode(false)\r\n            onChange(title)\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode ?\r\n            <input\r\n                className='p-1 border w-40'\r\n                value={title}\r\n                onChange={onChangeStatusHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                onBlur={activateViewMode}\r\n                autoFocus/>\r\n            :\r\n            <span style={{fontSize: fontSize, fontWeight: fontWeight}} onDoubleClick={activateEditMode}>{title}</span>\r\n    )\r\n})","import {ActionCreatorsMapObject, bindActionCreators} from \"redux\";\r\nimport {useMemo} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n// создаем hook, который связывает все actions creators с диспатчем\r\n// нам больше не понядобиться использование диспатча в комоненте, просто будем вызывать функцию\r\n\r\n//has some conflicts with useDispatch types, just use any type in the general parameter\r\nexport const useAppDispatch = () => useDispatch<any>()\r\n\r\nexport const useActions = <T extends ActionCreatorsMapObject>(actions: T) => {\r\n    const dispatch = useAppDispatch()\r\n\r\n    return useMemo(() => {\r\n        return bindActionCreators(actions,dispatch)\r\n    },[])\r\n}","import {createAction} from \"@reduxjs/toolkit\";\r\n\r\nexport const setAppStatus = createAction<{ status: RequestStatusType }>('app/setAppStatus')\r\nexport const setAppError = createAction<{ error: string | null }>('app/setAppError')\r\n\r\n// types\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\n","import {ResponseType} from '../api/types'\r\nimport {Dispatch} from \"redux\";\r\nimport {setAppStatus,setAppError} from '../store/actionCreators/appActionCreators'\r\n\r\n\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppError({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppError({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatus({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: Dispatch) => {\r\n    dispatch(setAppError({error: error.message}))\r\n    dispatch(setAppStatus({status: 'failed'}))\r\n}\r\n\r\n","import axios from 'axios'\r\nimport {GetTasksResponse, ParamsLoginType, TaskType, TodolistType, UpdateTaskModelType, ResponseType} from \"./types\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'a409a2ec-60ad-4ff6-9051-8f6025edc2fd'\r\n        // 'API-KEY': 'd700f3f2-767b-4068-ac9d-6d0dcd5ff82d' // test account\r\n    }\r\n})\r\n\r\n// tasks API\r\nexport const tasksAPI = {\r\n    getTasks(todolistId: string) {\r\n        return  instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return  instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: title})\r\n    },\r\n    deleteTask(taskId: string, todolistId: string) {\r\n        return  instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return  instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    }\r\n}\r\n// todolist API\r\nexport const todolistAPI = {\r\n    getTodolist() {\r\n        return  instance.get<Array<TodolistType>>(`todo-lists`)\r\n    },\r\n    createTodolist(title: string) {\r\n        return  instance.post<ResponseType<{item: TodolistType}>>(`todo-lists`, {title})\r\n    },\r\n    deleteTodolist(todolistId: string, ) {\r\n        return  instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return  instance.put<ResponseType>(`todo-lists/${todolistId}`, {title})\r\n    }\r\n}\r\n\r\n// auth API\r\nexport const authAPI = {\r\n    login(data: ParamsLoginType) {\r\n        return instance.post<ResponseType<{userId: number}>>(`auth/login`, data)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType<{}>>(`auth/login`)\r\n    },\r\n    auth() {\r\n        return instance.get<ResponseType<{id: number, email: string, login: string}>>(`auth/me`)\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {AxiosError} from \"axios\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {setAppStatus} from '../actionCreators/appActionCreators'\r\nimport {authAPI} from \"../../api/API\";\r\nimport {ParamsLoginType} from \"../../api/types\";\r\nimport {ThunkError} from \"../../utils/types\";\r\n\r\n\r\nexport const login = createAsyncThunk<\r\n    {isLoggedIn: boolean},ParamsLoginType,\r\n    ThunkError\r\n    >('auth/login',\r\n    async (data,{dispatch, rejectWithValue}) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.login(data)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {isLoggedIn: true}\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            return rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\r\n        }\r\n    } catch (err) {\r\n        const error: AxiosError = err\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n    }\r\n})\r\nconst logout = createAsyncThunk('auth/logout', async (arg, {dispatch, rejectWithValue}) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setAppStatus({status: 'succeeded'}))\r\n           return {isLoggedIn: false}\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n\r\n        }\r\n    } catch (err) {\r\n        handleServerNetworkError(err, dispatch)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    login,\r\n    logout\r\n}\r\n\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'auth', // name of our reducer\r\n    initialState: initialState, // initialState\r\n    reducers: {\r\n        // Transfer to reducer our actions and put state and action to the parameters\r\n        // we need types actions and and use PayloadAction< {our value: type} >\r\n        setIsLoggedIn(state, action: PayloadAction<{ isLoggedIn: boolean }>) {\r\n            state.isLoggedIn = action.payload.isLoggedIn\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(login.fulfilled, (state, action) => {\r\n            if (action.payload) {\r\n                state.isLoggedIn = action.payload.isLoggedIn\r\n            }\r\n        });\r\n        builder.addCase(logout.fulfilled, (state, action) => {\r\n            if (action.payload) {\r\n                state.isLoggedIn = action.payload.isLoggedIn\r\n            }\r\n        })\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer // assign our reducer to variable\r\nexport const {setIsLoggedIn} = slice.actions // get actionCreator from actions\r\n","import {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {setIsLoggedIn} from \"./authReducer\";\r\nimport {authAPI} from \"../../api/API\";\r\nimport {setAppStatus,setAppError} from '../actionCreators/appActionCreators'\r\n\r\nconst initialState = {\r\n    status: 'idle',\r\n    error: null as string | null,\r\n    isInitialized: false\r\n}\r\n\r\nconst initializeApp = createAsyncThunk('app/initializeApp',\r\n    async (arg, {dispatch}) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.auth()\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedIn({isLoggedIn: true}))\r\n            dispatch(setAppStatus({status: 'succeeded'}))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (err) {\r\n        handleServerNetworkError(err, dispatch)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    initializeApp\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        // setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n        //     state.status = action.payload.status\r\n        // },\r\n        // setAppErrorAC(state, action: PayloadAction<{ error: string | null }>) {\r\n        //     state.error = action.payload.error\r\n        // },\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(initializeApp.fulfilled, (state, action) => {\r\n            state.isInitialized = true\r\n        })\r\n        builder.addCase(setAppStatus, (state, action) => {\r\n            state.status = action.payload.status\r\n        })\r\n        builder.addCase(setAppError, (state, action) => {\r\n            state.error = action.payload.error\r\n        })\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\n\r\n\r\n","import {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {AxiosError} from \"axios\";\r\nimport {todolistAPI} from \"../../api/API\";\r\nimport {TodolistType} from \"../../api/types\"\r\nimport {ThunkError} from \"../../utils/types\";\r\nimport {RequestStatusType, setAppStatus,} from \"../actionCreators/appActionCreators\";\r\n\r\n// thunks\r\nexport const fetchTodolists = createAsyncThunk('todolists/fetchTodolists',\r\n    async (arg, {\r\n        dispatch, rejectWithValue\r\n    }) => {\r\n        dispatch(setAppStatus({status: 'loading'}))\r\n        try {\r\n            const res = await todolistAPI.getTodolist()\r\n            dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {todos: res.data}\r\n        } catch (err) {\r\n            handleServerNetworkError(err, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    })\r\n\r\nexport const addTodolists = createAsyncThunk<\r\n    TodolistType,\r\n    string,\r\n    ThunkError\r\n    >('todolists/addTodolist',\r\n    async (title, {dispatch, rejectWithValue}) => {\r\n        try {\r\n            dispatch(setAppStatus({status: 'loading'}))\r\n            const res = await todolistAPI.createTodolist(title)\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatus({status: 'succeeded'}))\r\n                return res.data.data.item\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n                return rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\r\n            }\r\n        } catch (err) {\r\n            const error: AxiosError = err\r\n            handleServerNetworkError(err, dispatch)\r\n            return rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n        }\r\n    })\r\n\r\nexport const removeTodolist = createAsyncThunk('todolists/removeTodolist',\r\n    async (todolistId: string, {dispatch, rejectWithValue}) => {\r\n        dispatch(setAppStatus({status: 'loading'}))\r\n        try {\r\n            const res = await todolistAPI.deleteTodolist(todolistId)\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatus({status: 'succeeded'}))\r\n                return {todolistId}\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n                return rejectWithValue(null)\r\n            }\r\n        } catch (err) {\r\n            handleServerNetworkError(err, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    })\r\n\r\nexport const updateTodolistTitle = createAsyncThunk('todolists/updateTodolist',\r\n    async (param:{todolistId: string, title: string}, {dispatch, rejectWithValue}) => {\r\n        dispatch(setAppStatus({status: 'loading'}))\r\n        try {\r\n            const res = await todolistAPI.updateTodolist(param.todolistId, param.title)\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatus({status: 'succeeded'}))\r\n                return {todolistId: param.todolistId,  title: param.title}\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n                return rejectWithValue(null)\r\n            }\r\n        }catch (err) {\r\n            handleServerNetworkError(err, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n})\r\n\r\nexport const asyncActions = {\r\n    fetchTodolists,\r\n    addTodolists,\r\n    removeTodolist,\r\n    updateTodolistTitle\r\n}\r\n\r\n\r\nconst initialState: Array<TodolistDomainType> = [\r\n    // {\r\n    //     id: '1',\r\n    //     addedDate: '',\r\n    //     order:0,\r\n    //     title: 'React',\r\n    //     filter: 'all' as FilterValuesType,\r\n    //     entityStatus: \"idle\" as RequestStatusType,\r\n    // },\r\n    // {\r\n    //     id: '2',\r\n    //     addedDate: '',\r\n    //     order:0,\r\n    //     title: 'React',\r\n    //     filter: 'all' as FilterValuesType,\r\n    //     entityStatus: \"idle\" as RequestStatusType,\r\n    // },\r\n]\r\n\r\nconst slice = createSlice({\r\n    name: 'todolist',\r\n    initialState: initialState,\r\n    reducers: {\r\n        changeFilterAC: (state, action: PayloadAction<{ filter: FilterValuesType, id: string }>) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(fetchTodolists.fulfilled, (state, action) => {\r\n            return action.payload.todos.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        });\r\n        builder.addCase(addTodolists.fulfilled, (state, action) => {\r\n            state.push({...action.payload, filter: 'all', entityStatus: 'idle'})\r\n        });\r\n        builder.addCase(removeTodolist.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n            if (index !== -1) state.splice(index, 1)\r\n        });\r\n        builder.addCase(updateTodolistTitle.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n            state[index].title = action.payload.title\r\n        });\r\n\r\n    }\r\n})\r\n\r\nexport const todolistReducer = slice.reducer\r\nexport const {changeFilterAC,} = slice.actions\r\n\r\n// types\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}","import {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport {AxiosError} from \"axios\";\r\nimport {tasksAPI} from \"../../api/API\";\r\nimport {TaskType, UpdateTaskModelType} from \"../../api/types\";\r\nimport {AppRootStateType, ThunkError} from \"../../utils/types\";\r\nimport {setAppStatus} from \"../actionCreators/appActionCreators\";\r\nimport {addTodolists, fetchTodolists, removeTodolist} from \"./todolistReducer\";\r\n\r\nconst fetchTasks = createAsyncThunk('tasks/fetchTasks',\r\n    async (todolistId: string, {dispatch, rejectWithValue}) => {\r\n        dispatch(setAppStatus({status: 'loading'}))\r\n        try {\r\n            const res = await tasksAPI.getTasks(todolistId)\r\n            dispatch(setAppStatus({status: 'succeeded'}))\r\n            const tasks = res.data.items\r\n            return {tasks, todolistId}\r\n        } catch (err) {\r\n            handleServerNetworkError(err, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    })\r\n\r\n\r\n\r\nconst addTask = createAsyncThunk<\r\n    TaskType, { title: string, todolistId: string },\r\n    ThunkError\r\n    >('tasks/addTask',\r\n    async (param, {dispatch, rejectWithValue}) => {\r\n        dispatch(setAppStatus({status: 'loading'}))\r\n        try {\r\n            const res = await tasksAPI.createTask(param.todolistId, param.title)\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatus({status: 'succeeded'}))\r\n                return res.data.data.item\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n                return rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\r\n            }\r\n        } catch (err) {\r\n            const error: AxiosError = err\r\n            handleServerNetworkError(err, dispatch)\r\n            return rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n        }\r\n\r\n    })\r\n\r\nconst removeTask = createAsyncThunk('tasks/removeTask',\r\n    async (param: { taskId: string, todolistId: string }, {dispatch, rejectWithValue}) => {\r\n        dispatch(setAppStatus({status: 'loading'}))\r\n        try {\r\n            const res = await tasksAPI.deleteTask(param.taskId, param.todolistId)\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatus({status: 'succeeded'}))\r\n                return {taskId: param.taskId, todolistId: param.todolistId}\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n                return rejectWithValue(null)\r\n            }\r\n        } catch (err) {\r\n            handleServerNetworkError(err, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    })\r\n\r\n\r\n//универсальная санка, которая помимо taskId и todolistId принимает необходимое поле для изменения status|title\r\nconst updateTask = createAsyncThunk('tasks/updateTasks',\r\n    async (param: { taskId: string, todolistId: string, domainModel: UpdateDomainTaskModelType },\r\n           {dispatch, rejectWithValue, getState}) => {\r\n // так как мы обязаны на сервер отправить все св-ва, которые сервер ожидает, а не только\r\n// те, которые мы хотим обновить, соответственно нам нужно в этом месте взять таску целиком\r\n// чтобы у неё отобрать остальные св-ва\r\n        const state = getState() as AppRootStateType\r\n        const tasksForCurrentTodolist = state.tasks[param.todolistId]\r\n        const task = tasksForCurrentTodolist.find(t => t.id === param.taskId)\r\n        if (!task) {\r\n            return rejectWithValue('task not found in the state')\r\n        }\r\n        const apiModel: UpdateTaskModelType = {\r\n            title: task.title,\r\n            description: task.description,\r\n            status: task.status,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            deadline: task.deadline,\r\n            ...param.domainModel// перезатираем только то свойство, которое было передано в domainModel\r\n        }\r\n        dispatch(setAppStatus({status: 'loading'}))\r\n        const res = await tasksAPI.updateTask(param.todolistId, param.taskId, apiModel)\r\n        try {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatus({status: 'succeeded'}))\r\n                return param\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n                return rejectWithValue(null)\r\n            }\r\n        } catch (err) {\r\n            handleServerNetworkError(err, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n})\r\n\r\nexport const asyncActions = {\r\n    fetchTasks,\r\n    addTask,\r\n    removeTask,\r\n    updateTask\r\n}\r\n\r\n\r\nconst initialState: TaskStateType = {\r\n    // \"1\": [\r\n    //     {\r\n    //         id: \"1\", title: \"CSS\",\r\n    //         status: TaskStatuses.New, todoListId: 'todolistId1', description: '', startDate: '',\r\n    //         deadline: '', addedDate: '', order: 0,\r\n    //         priority: TaskPriorities.Low,\r\n    //         entityStatus: 'succeeded' as RequestStatusType,\r\n    //     },\r\n    //     {\r\n    //         id: \"2\", title: \"JS\",\r\n    //         status: TaskStatuses.Completed, todoListId: 'todolistId1', description: '', startDate: '',\r\n    //         deadline: '', addedDate: '', order: 0,\r\n    //         priority: TaskPriorities.Low,\r\n    //         entityStatus: 'succeeded' as RequestStatusType,\r\n    //     },\r\n    //     {\r\n    //         id: \"3\", title: \"REACT\",\r\n    //         status: TaskStatuses.New, todoListId: 'todolistId1', description: '', startDate: '',\r\n    //         deadline: '', addedDate: '', order: 0,\r\n    //         priority: TaskPriorities.Low,\r\n    //         entityStatus: 'succeeded' as RequestStatusType,\r\n    //     },\r\n    // ],\r\n    // \"2\": [\r\n    //     {\r\n    //         id: \"1\", title: \"book\",\r\n    //         status: TaskStatuses.New, todoListId: 'todolistId1', description: '', startDate: '',\r\n    //         deadline: '', addedDate: '', order: 0,\r\n    //         priority: TaskPriorities.Low,\r\n    //         entityStatus: 'succeeded' as RequestStatusType,\r\n    //     },\r\n    //     {\r\n    //         id: \"2\", title: \"book2\",\r\n    //         status: TaskStatuses.New, todoListId: 'todolistId1', description: '', startDate: '',\r\n    //         deadline: '', addedDate: '', order: 0,\r\n    //         priority: TaskPriorities.Low,\r\n    //         entityStatus: 'succeeded' as RequestStatusType,\r\n    //     },\r\n    //     {\r\n    //         id: \"3\", title: \"book3\",\r\n    //         status: TaskStatuses.New, todoListId: 'todolistId1', description: '', startDate: '',\r\n    //         deadline: '', addedDate: '', order: 0,\r\n    //         priority: TaskPriorities.Low,\r\n    //         entityStatus: 'succeeded' as RequestStatusType,\r\n    //     },\r\n    //\r\n    // ]\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: initialState,\r\n    reducers: {\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolists.fulfilled, (state, action) => {\r\n            state[action.payload.id] = []\r\n        });\r\n        builder.addCase(removeTodolist.fulfilled, (state, action) => {\r\n            delete state[action.payload.todolistId]\r\n        });\r\n        builder.addCase(fetchTodolists.fulfilled, (state, action) => {\r\n            action.payload.todos.forEach((tl) => {\r\n                state[tl.id] = []\r\n            })\r\n        });\r\n        builder.addCase(fetchTasks.fulfilled, (state, action) => {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        });\r\n        builder.addCase(addTask.fulfilled, (state, action) => {\r\n            state[action.payload.todoListId].unshift(action.payload)\r\n        });\r\n        builder.addCase(removeTask.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        });\r\n        builder.addCase(updateTask.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.domainModel}\r\n            }\r\n        })\r\n    }\r\n})\r\n\r\nexport const tasksReducer = slice.reducer\r\n\r\n// types\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n// создаем тип, для универсальной санки с необязательными полями, для подстановки нужного поля в санку\r\ntype UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n}","import React from \"react\";\r\n\r\nexport const icons = {\r\n    plus:\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\"\r\n             className=\"h-6 w-6 text-indigo-400 hover:text-indigo-600 z-1\" fill=\"none\"\r\n             viewBox=\"0 0 24 24\"\r\n             stroke=\"currentColor\">\r\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 4v16m8-8H4\"/>\r\n        </svg>,\r\n    dot:\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6 text-yellow-500 z-1\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z\" />\r\n        </svg>,\r\n    trash: <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 text-red-300 hover:text-red-500 z-1\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n        <path fillRule=\"evenodd\" d=\"M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\r\n    </svg>,\r\n    email: <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\"\r\n                stroke=\"currentColor\">\r\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2}\r\n              d=\"M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\"/>\r\n    </svg>,\r\n    lock: <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\"\r\n               fill=\"currentColor\">\r\n        <path fillRule=\"evenodd\"\r\n              d=\"M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z\"\r\n              clipRule=\"evenodd\"/>\r\n    </svg>,\r\n    unlock: <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\"\r\n                 fill=\"currentColor\">\r\n        <path\r\n            d=\"M10 2a5 5 0 00-5 5v2a2 2 0 00-2 2v5a2 2 0 002 2h10a2 2 0 002-2v-5a2 2 0 00-2-2H7V7a3 3 0 015.905-.75 1 1 0 001.937-.5A5.002 5.002 0 0010 2z\"/>\r\n    </svg>,\r\n    info: <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" viewBox=\"0 0 20 20\"\r\n               fill=\"white\">\r\n        <path fillRule=\"evenodd\"\r\n              d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z\"\r\n              clipRule=\"evenodd\"/>\r\n    </svg>,\r\n    closeMenu: <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-7 w-7 text-white\" viewBox=\"0 0 20 20\"\r\n                fill=\"currentColor\">\r\n        <path fillRule=\"evenodd\"\r\n              d=\"M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM9 15a1 1 0 011-1h6a1 1 0 110 2h-6a1 1 0 01-1-1z\"\r\n              clipRule=\"evenodd\"/>\r\n    </svg>,\r\n    openMenu: <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-7 w-7 text-white\" viewBox=\"0 0 20 20\"\r\n                 fill=\"currentColor\">\r\n        <path fillRule=\"evenodd\"\r\n              d=\"M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h6a1 1 0 110 2H4a1 1 0 01-1-1z\"\r\n              clipRule=\"evenodd\"/>\r\n    </svg>,\r\n    login: <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n        <path fillRule=\"evenodd\" d=\"M3 3a1 1 0 011 1v12a1 1 0 11-2 0V4a1 1 0 011-1zm7.707 3.293a1 1 0 010 1.414L9.414 9H17a1 1 0 110 2H9.414l1.293 1.293a1 1 0 01-1.414 1.414l-3-3a1 1 0 010-1.414l3-3a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\r\n    </svg>,\r\n    logout: <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n        <path fillRule=\"evenodd\" d=\"M3 3a1 1 0 00-1 1v12a1 1 0 102 0V4a1 1 0 00-1-1zm10.293 9.293a1 1 0 001.414 1.414l3-3a1 1 0 000-1.414l-3-3a1 1 0 10-1.414 1.414L14.586 9H7a1 1 0 100 2h7.586l-1.293 1.293z\" clipRule=\"evenodd\"/>\r\n    </svg>,\r\n    settings: <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4\" />\r\n    </svg>\r\n}\r\n","import React, {ChangeEvent, useCallback, useEffect, useState} from 'react'\r\nimport {EditableSpan} from \"../../../../Components/EditableSpan/EditableSpan\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/types\";\r\nimport style from './Task.module.scss'\r\nimport {useActions} from \"../../../../utils/hooks/useActions\";\r\nimport {taskAsyncActions} from \"../../../../store/actionCreators\";\r\nimport {icons} from \"../../../../assets/icons\";\r\n\r\nexport type PropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    status: string\r\n}\r\n\r\nconst Task = React.memo(({todolistId, task, status,}: PropsType) => {\r\n    const {removeTask, updateTask} = useActions(taskAsyncActions)\r\n    const [checked, setChecked] = useState<boolean>(Boolean(task.status))\r\n\r\n\r\n    useEffect(() => {\r\n        setChecked(Boolean(task.status))\r\n    }, [task.status])\r\n\r\n    const removeTaskHandler = useCallback(() => {\r\n        removeTask({taskId: task.id, todolistId})\r\n    }, [task.id, todolistId])\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let status = e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New\r\n\r\n        updateTask({taskId: task.id, todolistId, domainModel: {status}});\r\n    }, [task.id, todolistId])\r\n\r\n    const changeTaskTitle = useCallback((title: string) => {\r\n        updateTask({taskId: task.id, todolistId, domainModel: {title}});\r\n    }, [task.id, todolistId])\r\n\r\n    const statusLoading = status === 'loading'\r\n\r\n    return (\r\n        <div>\r\n            <div\r\n                className={`flex items-center ${style.task} ${checked && 'opacity-40'} \r\n            cursor-pointer border-2 shadow-md rounded-sm p-2 my-2`}>\r\n                <div className='w-full flex items-center'>\r\n                    <div className='flex items-center'>\r\n                        <input type=\"checkbox\"\r\n                               onChange={onChangeHandler}\r\n                               checked={task.status === TaskStatuses.Completed}\r\n                               disabled={statusLoading}\r\n                               className='w-4 h-4'/>\r\n                    </div>\r\n                    <div className='break-all ml-2 '>\r\n                        <EditableSpan value={task.title} onChange={changeTaskTitle} disabled={statusLoading}/>\r\n                    </div>\r\n                </div>\r\n                <div className='flex flex-col items-center justify-between'>\r\n                    <button className='flex' onClick={removeTaskHandler} disabled={statusLoading}>\r\n                        <span>{icons.trash}</span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Task\r\n\r\n","import {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../types\";\r\n\r\n\r\n// create a hook, that works with a typed useSelector\r\n// use TypedUseSelectorHook - Pass state types to useSelector\r\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport {AddItemForm} from \"../../../Components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../Components/EditableSpan/EditableSpan\";\r\nimport Task from \"./Task/Task\";\r\nimport {changeFilterAC, FilterValuesType, TodolistDomainType,} from \"../../../store/reducers/todolistReducer\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/types\";\r\nimport {useAppSelector} from \"../../../utils/hooks/useAppSelector\";\r\nimport {useActions, useAppDispatch} from \"../../../utils/hooks/useActions\";\r\nimport {taskAsyncActions, todolistAsyncActions} from \"../../../store/actionCreators\";\r\nimport {icons} from \"../../../assets/icons\";\r\n\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    todolistId: string\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n\r\n    const isLogged = useAppSelector(state => state.auth.isLoggedIn)\r\n    const status = useAppSelector(state => state.app.status)\r\n    const {updateTodolistTitle, removeTodolist} = useActions(todolistAsyncActions)\r\n    const {fetchTasks} = useActions(taskAsyncActions)\r\n    const {addTask} = taskAsyncActions\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        if (!isLogged) {\r\n            return\r\n        }\r\n        fetchTasks(props.todolistId)\r\n    }, [])//no dependencies. runs only once when the component will render\r\n\r\n    const addTaskHandler = useCallback(async (title: string) => {\r\n        let action = await dispatch(addTask({title: title.trim(), todolistId: props.todolistId}))\r\n\r\n        if (addTask.rejected.match(action)) {\r\n            if (action.payload?.fieldsErrors?.length) {\r\n                const error = action.payload?.fieldsErrors[0]\r\n                throw new Error(error.error)\r\n            }else {\r\n                throw new Error('Some error occurred')\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    const changeTodoListTitle = useCallback((title: string) => {\r\n        updateTodolistTitle({todolistId: props.todolistId, title})\r\n    }, [props.todolistId])\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, taskId: string) => {\r\n        dispatch(changeFilterAC({filter: value, id: taskId}));\r\n    }, [dispatch])\r\n\r\n    const removeTodolistHandler = useCallback(() => {\r\n        removeTodolist(props.todolistId)\r\n    }, [])\r\n\r\n    const onAllClickHandler = useCallback(() => {\r\n        changeFilter(\"all\", props.todolistId)\r\n    }, []);\r\n    const onActiveClickHandler = useCallback(() => {\r\n        changeFilter(\"active\", props.todolistId)\r\n    }, []);\r\n    const onCompletedClickHandler = useCallback(() => {\r\n        changeFilter(\"completed\", props.todolistId)\r\n    }, [])\r\n\r\n\r\n    let allTodoLists = props.tasks;\r\n    let tasksForTodolist = allTodoLists\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = allTodoLists.filter(t => t.status === TaskStatuses.New);\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodolist = allTodoLists.filter(t => t.status === TaskStatuses.Completed);\r\n    }\r\n\r\n    const task = tasksForTodolist.map(t => {\r\n        return <Task key={t.id}\r\n                     task={t}\r\n                     todolistId={props.todolistId}\r\n                     status={status}\r\n        />\r\n    })\r\n\r\n    const statusLoading = status === 'loading'\r\n\r\n    return <div className='w-full p-4 border rounded-md shadow-xl bg-white'>\r\n        <div className='flex pb-8 justify-between'>\r\n            <EditableSpan fontSize={'22px'}\r\n                          fontWeight='bold'\r\n                          value={props.title}\r\n                          onChange={changeTodoListTitle}\r\n                          disabled={statusLoading}/>\r\n            <button onClick={removeTodolistHandler} disabled={statusLoading}>{icons.trash}</button>\r\n        </div>\r\n        <AddItemForm\r\n            addItem={addTaskHandler}\r\n            disabled={statusLoading}\r\n            placeholder='Add new task'\r\n            icon={icons.plus}\r\n        />\r\n        <div className='task'>\r\n            {\r\n                props.tasks.length ? task\r\n                    :\r\n                    <span className='my-2 text-center bg-red-50 '>No tasks - create your first task</span>\r\n            }\r\n        </div>\r\n        <div className='w-full flex justify-between'>\r\n            <ButtonDefault text='All' filter={props.filter === 'all'} onclick={onAllClickHandler}/>\r\n            <ButtonDefault text='Active' filter={props.filter === 'active'} onclick={onActiveClickHandler}/>\r\n            <ButtonDefault text='Completed' filter={props.filter === 'completed'} onclick={onCompletedClickHandler}/>\r\n        </div>\r\n    </div>\r\n})\r\n\r\ntype ButtonDefaultType = {\r\n    text: string\r\n    filter: boolean\r\n    onclick: () => void\r\n}\r\nconst ButtonDefault = ({text,filter,onclick}: ButtonDefaultType) => {\r\n    return (\r\n        <button\r\n            onClick={onclick}\r\n            className={`transition duration-300 py-1 px-3 border-4 ${filter ? 'border-blue-300' : 'border-blue-600'} \r\n            border-opacity-100 hover:border-opacity-75 rounded-lg shadow-md font-medium`}>\r\n            {text}\r\n        </button>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"../../Components/AddItemForm/AddItemForm\";\r\nimport {Todolist} from \"./Todolist/TodoList\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {useAppSelector} from \"../../utils/hooks/useAppSelector\";\r\nimport {useActions, useAppDispatch} from \"../../utils/hooks/useActions\";\r\nimport {todolistAsyncActions} from \"../../store/actionCreators\";\r\nimport style from './Todolists.module.scss'\r\nimport {icons} from \"../../assets/icons\";\r\n\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n    const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn)\r\n    const todolists = useAppSelector(state => state.todolists)\r\n    const status = useAppSelector(state => state.app.status)\r\n    const tasks = useAppSelector(state => state.tasks);\r\n\r\n    const {fetchTodolists} = useActions(todolistAsyncActions)\r\n    const {addTodolists} = todolistAsyncActions\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return\r\n        }\r\n        fetchTodolists()\r\n    }, [])\r\n\r\n    const addTodoList = useCallback(async (title: string) => {\r\n        const action = await dispatch(addTodolists(title))\r\n\r\n        if (addTodolists.rejected.match(action)) {\r\n            if (action.payload?.fieldsErrors?.length) {\r\n                const error = action.payload?.fieldsErrors[0]\r\n                throw new Error(error.error)\r\n            } else {\r\n                throw new Error('Some error occurred')\r\n            }\r\n        }\r\n    }, [])\r\n\r\n    const statusLoading = status === 'loading'\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <div className=\"mt-10\">\r\n            <AddItemForm addItem={addTodoList} placeholder='Create new todo' disabled={statusLoading} icon={icons.plus}/>\r\n        </div>\r\n        <div className={`flex flex-wrap justify-center md:justify-start `}>\r\n\r\n        {todolists.map(t => {\r\n                let allTodoLists = tasks[t.id];\r\n                return (\r\n                    <div key={t.id} className={`${style.todo} p-4 flex justify-center `}>\r\n                        <Todolist key={t.id}\r\n                                  todolist={t}\r\n                                  title={t.title}\r\n                                  tasks={allTodoLists}\r\n                                  filter={t.filter}\r\n                                  todolistId={t.id}\r\n                        />\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    </>\r\n}\r\n\r\n","import React, {useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setAppError} from '../../store/actionCreators/appActionCreators'\r\nimport {AppRootStateType} from \"../../utils/types\";\r\n\r\n\r\nexport default function ErrorSnackBar() {\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const [closeError, setCloseError] = useState<boolean>(false)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        let timeId: NodeJS.Timeout\r\n        if (error) {\r\n            setCloseError(true)\r\n            timeId = setTimeout(handleClose, 4000)\r\n        }\r\n        return () => {\r\n            clearTimeout(timeId)\r\n        }\r\n    }, [error])\r\n\r\n    function handleClose() {\r\n        setCloseError(false)\r\n        dispatch(setAppError({error: null}));\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {closeError &&\r\n            <div className='z-10 absolute bottom-8 inset-x-0 text-center h-12'>\r\n                <Alert error={error} onClose={handleClose}/>\r\n            </div>}\r\n        </>\r\n    );\r\n}\r\n\r\n\r\ntype AlertPropsType = {\r\n    error: string | null\r\n    onClose: () => void\r\n}\r\nconst Alert = ({error, onClose}: AlertPropsType) => {\r\n    return (\r\n        <span className='flex items-center bg-red-600 text-white p-2 m-auto max-w-max rounded-md'>\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6 mr-4 text-white\" fill=\"none\"\r\n                     viewBox=\"0 0 24 24\"\r\n                     stroke=\"currentColor\">\r\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2}\r\n                          d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"/>\r\n                </svg>\r\n            {error}\r\n            <button onClick={onClose} className='ml-4'>\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n                        <path fillRule=\"evenodd\"\r\n                              d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293\r\n                              4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293\r\n                              5.707a1 1 0 010-1.414z\"\r\n                              clipRule=\"evenodd\"/>\r\n                    </svg>\r\n            </button>\r\n        </span>\r\n    )\r\n}\r\n","import React, {DetailedHTMLProps, HTMLAttributes, useState} from \"react\";\r\nimport {icons} from \"../../assets/icons\";\r\n\r\ntype DefaultPropsType = DetailedHTMLProps<HTMLAttributes<HTMLElement>, HTMLElement>;\r\ntype Ibox = DefaultPropsType & {\r\n    children?: React.ReactNode\r\n}\r\n\r\nexport const InfoBox = ({children, ...restprops}:Ibox) => {\r\n    const [open, setOpen] = useState<boolean>(false)\r\n\r\n    function openHandler() {\r\n        setOpen(state => !state)\r\n    }\r\n    return (\r\n        <div className='w-full flex flex-col items-end '>\r\n            <i onClick={openHandler} className='shadow-lg w-6 rounded-full cursor-pointer' >\r\n                {icons.info}\r\n            </i>\r\n            {children ? open && children : open &&\r\n                <div\r\n                    className='w-10/12 rounded-t-lg rounded-bl-lg bg-yellow-100 p-4 shadow-2xl absolute left-2 -top-24'>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}\r\n                           rel='noreferrer'\r\n                           className='ml-2 font-medium text-1xl'>\r\n                            HERE\r\n                        </a>\r\n                    </p>\r\n                    <p>or use test account credentials:</p>\r\n                    <p>EMAIL: nikitinasv12@gmail.com</p>\r\n                    <p>PASSWORD: 123456</p>\r\n                </div>\r\n\r\n            }\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react'\r\nimport {FormikHelpers, useFormik} from 'formik';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {useAppSelector} from \"../../utils/hooks/useAppSelector\";\r\nimport {authAsyncActions} from \"../../store/actionCreators\";\r\nimport {useAppDispatch} from \"../../utils/hooks/useActions\";\r\nimport {InfoBox} from \"./InfoBox\";\r\nimport {icons} from \"../../assets/icons\";\r\n\r\n\r\ntype FormikValueType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\n\r\nexport const Login = () => {\r\n    const [show, setShow] = useState<boolean>(false)\r\n\r\n    const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn)\r\n    const dispatch = useAppDispatch()\r\n    const {login} = authAsyncActions\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikValueType = {} as FormikValueType;\r\n            if (!values.email) {\r\n                errors.email = 'email is required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'password is required';\r\n            } else if (values.password.length < 6) {\r\n                errors.password = 'password must be more than 6 character';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: async (values: FormikValueType, formikHelpers: FormikHelpers<FormikValueType>) => {\r\n            let action = await dispatch(login(values));\r\n\r\n            if (login.rejected.match(action)) {\r\n                if (action.payload?.fieldsErrors?.length) {\r\n                    const error = action.payload?.fieldsErrors[0]\r\n                    formikHelpers.setFieldError(error.field, error.error)\r\n                } else {\r\n                    const error = action.payload?.errors[0]\r\n                    if (error) {\r\n                        formikHelpers.setFieldError(error, error)\r\n                    }\r\n                }\r\n            }\r\n        },\r\n    });\r\n    const showHandle = () => {\r\n        setShow(state => !state)\r\n    }\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return (\r\n        <div className='flex justify-center items-center mt-8'>\r\n            <div className='w-11/12 sm:w-96 p-8 rounded-md bg-blue-200 flex flex-col items-center justify-center\r\n            shadow-2xl relative'>\r\n                <InfoBox/>\r\n                <h3 className='font-medium text-white text-2xl my-4'>Sign in</h3>\r\n                <form onSubmit={formik.handleSubmit} className=\"flex flex-col -m-2 w-full\">\r\n                    <div className=\"text-gray-400 focus-within:text-gray-600 relative flex items-center relative\">\r\n                        <div className='absolute p-3'>\r\n                            {icons.email}\r\n                        </div>\r\n                        <input\r\n                            className=\"border-2 shadow-lg rounded-xl px-10 py-2 my-5 w-full\"\r\n                            type=\"text\"\r\n                            placeholder=\"Email\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email ?\r\n                            <div className='absolute -top-2 -right-4 p-1 border text-red-500 bg-gray-400\r\n                            bg-opacity-10 rounded-md'>{formik.errors.email}</div> : null}\r\n                    </div>\r\n                    <div className=\"text-gray-400 focus-within:text-gray-600 relative flex items-center\">\r\n                        <div onClick={showHandle} className='absolute p-3'>\r\n                            {!show ? icons.lock : icons.unlock}\r\n                        </div>\r\n                        <input\r\n                            className=\"border-2 shadow-lg rounded-xl  px-10 my-5 py-2  w-full\"\r\n                            type={show ? \"text\" : \"password\"}\r\n                            placeholder=\"Password\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password ?\r\n                            <div className='absolute -top-2 -right-4 p-1 border text-red-500 bg-gray-400\r\n                            bg-opacity-20 rounded-md'>{formik.errors.password}</div> : null}\r\n                    </div>\r\n                    <div className='flex items-center justify-between mt-6 relative'>\r\n                        <div className='flex items-center'>\r\n                            <input id='remember' className=\"w-5 h-5 checked:border-transparent\"\r\n                                   type=\"checkbox\"\r\n                                   {...formik.getFieldProps('rememberMe')}\r\n                            />\r\n                            <label htmlFor=\"remember\" className='ml-2 font-medium text-xs sm:text-base text-white'>Remember me</label>\r\n                        </div>\r\n                        <button className='text-xs sm:text-base'>Forgot password?</button>\r\n                    </div>\r\n                    <button className=\"font-bold hover:text-white shadow-lg w-full mb-5 mt-12 py-2 px-5 bg-yellow-300\r\n                    hover:bg-yellow-400 border rounded-md transition duration-500\r\n                    ease-in-out\">Sign in\r\n                    </button>\r\n                    <div className='flex justify-center items-center'>\r\n                        <p className='text-xs sm:text-base'>Don't have an account?</p>\r\n                        <button className='ml-2  text-xs sm:text-base font-medium text-white'>Sign in</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import './index.css'\r\n\r\ntype PropsType = {\r\n    color?: string\r\n}\r\n\r\nexport const Spinner = ({color}: PropsType) => {\r\n\r\n    const dot = [...Array(12).fill(1)].map((e, i) =>\r\n        color ? <div key={e + i * i} style={{background: color}}/> : <div key={e + i * i}/>)\r\n\r\n    return (\r\n        <div className=\"lds-default\">\r\n            {dot}\r\n        </div>)\r\n}","import React, {DetailedHTMLProps, HTMLAttributes, useCallback, useEffect, useState} from 'react';\r\nimport {TodolistsList} from \"../features/Todolists/TotolistsList\";\r\nimport ErrorSnackBar from \"../Components/ErrorSnackBar/ErrorSnackBar\";\r\nimport {Redirect, Route, Switch} from 'react-router-dom';\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {useAppSelector} from \"../utils/hooks/useAppSelector\";\r\nimport {useActions} from \"../utils/hooks/useActions\";\r\nimport {appAsyncActions, authAsyncActions} from \"../store/actionCreators\";\r\nimport {Spinner} from \"../Components/Spinner/Spinner\";\r\nimport {icons} from \"../assets/icons\";\r\n\r\n\r\nfunction App() {\r\n    const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn)\r\n    const isInitialized = useAppSelector(state => state.app.isInitialized)\r\n    const status = useAppSelector(state => state.app.status)\r\n    const {initializeApp} = useActions(appAsyncActions)\r\n    const {logout} = useActions(authAsyncActions)\r\n\r\n    const [menu, setMenu] = useState<boolean>(false)\r\n\r\n\r\n    const handleLogout = useCallback(() => {\r\n        logout()\r\n        setMenu(false);\r\n    }, [])\r\n\r\n    const handleClick = () => {\r\n        setMenu(!menu);\r\n    };\r\n\r\n    useEffect(() => {\r\n        initializeApp()\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div className='text-center h-16 pt-4'>\r\n            {status === 'loading' && <Spinner color={'white'}/>}\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div className='p-2 bg-blue-400 shadow-xl relative z-10'>\r\n                <button\r\n                    className='cursor-pointer p-2'\r\n                    onClick={handleClick}>\r\n                    {menu ? icons.closeMenu : icons.openMenu}\r\n                </button>\r\n                <nav className='mt-2  absolute -bottom-22 left-0 z-0'>\r\n                    <ul className={`text-lg cursor-pointer transition duration-500 transform \r\n                    ${menu ? '-translate-x-0' : '-translate-x-20'}`}>\r\n\r\n                        {!isLoggedIn && <ItemMenu text='Login' >{icons.login}</ItemMenu>}\r\n                        <ItemMenu text='Logout' onclick={handleLogout}>\r\n                            {icons.logout}\r\n                        </ItemMenu>\r\n                        <ItemMenu text='Settings'>\r\n                            {icons.settings}\r\n                        </ItemMenu>\r\n                    </ul>\r\n                </nav>\r\n            </div>\r\n            <ErrorSnackBar/>\r\n            <div className='text-center h-16 pt-4'>\r\n                {status === 'loading' && <Spinner color={'white'}/>}\r\n            </div>\r\n            <main className='px-2 h-full'>\r\n                <>\r\n                    <Switch>\r\n                        <Route exact path={'/'} render={() => <TodolistsList/>}/>\r\n                        <Route path={'/login'} render={() => <Login/>}/>\r\n                        <Route path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n                        <Redirect from={'*'} to={'/404'}/>\r\n                    </Switch>\r\n                </>\r\n            </main>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\ntype DefaultPropsType = DetailedHTMLProps<HTMLAttributes<HTMLElement>, HTMLElement>;\r\ntype ItemMenuType = DefaultPropsType & {\r\n    text: string\r\n    onclick?: () => void\r\n}\r\nconst ItemMenu = ({text, onclick, children, ...props}: ItemMenuType) => {\r\n    return (\r\n        <li onClick={onclick} className='flex justify-between items-center pl-2 hover:text-white bg-blue-100 hover:bg-blue-200 transition\r\n        duration-500 transform hover:translate-x-2'>{text}\r\n            <span  className='pl-2 ml-2 p-1 bg-blue-400 text-white'>\r\n                {children}\r\n            </span>\r\n        </li>\r\n    )\r\n}\r\n\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {combineReducers} from 'redux';\r\nimport thunk from 'redux-thunk'\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\nimport {appReducer, authReducer, tasksReducer, todolistReducer} from './reducers';\r\n\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния (редюсера)\r\nexport const rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\n// export const store = createStore(rootReducer);\r\n\r\n\r\n// create our store use configureStore\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunk),\r\n})\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент store.getState\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './app/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./store/store\";\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <Provider store={store} >\r\n            <App/>\r\n        </Provider>\r\n    </HashRouter>\r\n,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}