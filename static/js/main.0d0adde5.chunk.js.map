{"version":3,"sources":["api/API.ts","utils/error-utils.ts","features/Auth/authReducer.ts","app/appReducer.ts","features/Todolists/todolistReducer.ts","Components/AddItemForm/AddItemForm.tsx","Components/EditableSpan/EditableSpan.tsx","features/Todolists/tasksReducer.ts","features/Todolists/Todolist/Task/Task.tsx","features/Auth/selectors.ts","features/Todolists/Todolist/TodoList.tsx","features/Todolists/selectors.ts","features/Todolists/Todolist/Task/selector.ts","features/Todolists/TotolistsList.tsx","Components/ErrorSnackBar/ErrorSnackBar.tsx","features/Auth/Login.tsx","app/selectors.ts","app/App.tsx","reportWebVitals.ts","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","tasksAPI","todolistId","get","title","post","taskId","delete","model","put","todolistAPI","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedIn","state","action","payload","value","authReducer","reducer","actions","isInitialized","setIsInitialized","appReducer","setTodolistsAC","todos","map","tl","filter","entityStatus","addTodolistAC","push","todo","removeTodolistAC","index","findIndex","id","todolistID","splice","changeFilterAC","changeTitleAC","changeTodolistEntityStatusAC","todolistReducer","AddItemForm","React","memo","addItem","disabled","useState","setError","setTitle","addItemHandler","trim","TextField","onChange","e","currentTarget","onKeyPress","key","label","helperText","variant","className","IconButton","size","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","New","todoListId","description","startDate","deadline","addedDate","order","priority","Low","Completed","setTasksAC","tasks","addTaskAC","unshift","removeTaskAC","t","updateTaskAC","changeTaskEntityStatusAC","extraReducers","builder","addCase","forEach","tasksReducer","updateTask","domainModel","getState","task","find","apiModel","then","res","resultCode","catch","console","warn","Task","useDispatch","removeTask","useCallback","removeTaskTC","onChangeHandler","checked","changeTaskTitle","statusLoading","Checkbox","Delete","selectIsLoggedIn","auth","Todolist","props","isLogged","useSelector","useEffect","items","addTask","item","addTaskTC","changeTodoListTitle","newTitle","changeFilter","removeTodolist","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","allTodoLists","tasksForTodolist","todolist","Button","selectorTodolists","todolists","selectorTasks","TodolistsList","addTodoList","Error","addTodolistsTC","Grid","container","style","padding","justify","alignItems","direction","marginRight","spacing","Paper","to","Alert","elevation","ErrorSnackBar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","err","resetForm","xs","handleSubmit","textAlign","marginTop","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","selectIsInitialized","selectStatus","useStyles","makeStyles","theme","root","flexGrow","menuButton","App","classes","history","useHistory","handleLogout","AppBar","position","Toolbar","edge","aria-label","Typography","LinearProgress","Container","fixed","exact","path","render","from","top","width","CircularProgress","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","window","ReactDOM","document","getElementById"],"mappings":"qJAiFYA,EAMAC,E,kLApFCC,E,OAAWC,EAAMC,OAAO,CACjCC,QAAS,gDACTC,iBAAiB,EACjBC,QAAS,CACL,UAAW,0CAKNC,EAAW,SACXC,GACL,OAAQP,EAASQ,IAAT,qBAA6CD,EAA7C,YAFHD,EAAW,SAITC,EAAoBE,GAC3B,OAAQT,EAASU,KAAT,qBAA4DH,EAA5D,UAAgF,CAACE,MAAOA,KAL3FH,EAAW,SAOTK,EAAgBJ,GACvB,OAAQP,EAASY,OAAT,qBAA4CL,EAA5C,kBAAgEI,KARnEL,EAAW,SAUTC,EAAoBI,EAAgBE,GAC3C,OAAQb,EAASc,IAAT,qBAAmDP,EAAnD,kBAAuEI,GAAUE,IAIpFE,EAAc,WAEnB,OAAQf,EAASQ,IAAT,eAFHO,EAAc,SAIRN,GACX,OAAQT,EAASU,KAAT,aAAgE,CAACD,WALpEM,EAAc,SAORR,GACX,OAAQP,EAASY,OAAT,qBAA4CL,KAR/CQ,EAAc,SAURR,EAAoBE,GAC/B,OAAQT,EAASc,IAAT,qBAAyCP,GAAc,CAACE,WAK3DO,EAAU,SACbC,GACF,OAAOjB,EAASU,KAAT,aAA4DO,IAF9DD,EAAU,WAKf,OAAOhB,EAASY,OAAT,eALFI,EAAU,WAQf,OAAOhB,EAASQ,IAAT,a,SA8BHV,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAMAC,O,aAAAA,I,mBAAAA,I,WAAAA,I,uBAAAA,I,kBAAAA,M,KClFL,IAAMmB,EAAuB,SAAID,EAAuBE,GACvDF,EAAKG,SAASC,OACdF,EAASG,EAAc,CAACC,MAAON,EAAKG,SAAS,MAE7CD,EAASG,EAAc,CAACC,MAAO,yBAEnCJ,EAASK,EAAe,CAACC,OAAQ,aAGxBC,EAA2B,SAACH,EAA0BJ,GAC/DA,EAASG,EAAc,CAACC,MAAOA,EAAMI,WACrCR,EAASK,EAAe,CAACC,OAAQ,a,QCN/BG,EAAQC,YAAY,CACtBC,KAAM,OACNC,aANiB,CACjBC,YAAY,GAMZC,SAAU,CAGNC,cAHM,SAGQC,EAAOC,GACjBD,EAAMH,WAAaI,EAAOC,QAAQC,UAIjCC,EAAcX,EAAMY,QACnBN,EAAiBN,EAAMa,QAAvBP,cCVRN,EAAQC,YAAY,CACtBC,KAAM,MACNC,aARiB,CACjBN,OAAQ,OACRF,MAAO,KACPmB,eAAe,GAMfT,SAAU,CACNT,eADM,SACSW,EAAOC,GAClBD,EAAMV,OAASW,EAAOC,QAAQZ,QAElCH,cAJM,SAIQa,EAAOC,GACjBD,EAAMZ,MAAQa,EAAOC,QAAQd,OAEjCoB,iBAPM,SAOWR,EAAOC,GACpBD,EAAMO,cAAgBN,EAAOC,QAAQC,UAKpCM,EAAahB,EAAMY,Q,EAC+BZ,EAAMa,QAAvDjB,E,EAAAA,eAAeF,E,EAAAA,cAAcqB,E,EAAAA,iBCArCf,EAAQC,YAAY,CACtBC,KAAM,WACNC,aArB4C,GAsB5CE,SAAU,CACNY,eAAgB,SAACV,EAAOC,GACpB,OAAOA,EAAOC,QAAQS,MAAMC,KAAI,SAAAC,GAAE,kCAASA,GAAT,IAAaC,OAAQ,MAAOC,aAAc,aAEhFC,cAAe,SAAChB,EAAOC,GACnBD,EAAMiB,KAAN,2BAAehB,EAAOC,QAAQgB,MAA9B,IAAoCJ,OAAQ,MAAOC,aAAc,WAErEI,iBAAkB,SAACnB,EAAOC,GACtB,IAAMmB,EAAQpB,EAAMqB,WAAU,SAAAR,GAAE,OAAIA,EAAGS,KAAOrB,EAAOC,QAAQqB,eAC/C,IAAXH,GAAcpB,EAAMwB,OAAOJ,EAAO,IAEzCK,eAAgB,SAACzB,EAAOC,GACpB,IAAMmB,EAAQpB,EAAMqB,WAAU,SAAAR,GAAE,OAAIA,EAAGS,KAAOrB,EAAOC,QAAQoB,MAC7DtB,EAAMoB,GAAON,OAASb,EAAOC,QAAQY,QAEzCY,cAAe,SAAC1B,EAAOC,GACnB,IAAMmB,EAAQpB,EAAMqB,WAAU,SAAAR,GAAE,OAAIA,EAAGS,KAAOrB,EAAOC,QAAQoB,MAC7DtB,EAAMoB,GAAO9C,MAAQ2B,EAAOC,QAAQ5B,OAExCqD,6BAA8B,SAAC3B,EAAOC,GAClC,IAAMmB,EAAQpB,EAAMqB,WAAU,SAAAR,GAAE,OAAIA,EAAGS,KAAOrB,EAAOC,QAAQoB,MAC7DtB,EAAMoB,GAAOL,aAAed,EAAOC,QAAQa,iBAK1Ca,EAAkBnC,EAAMY,Q,EAEnCZ,EAAMa,QADMI,E,EAAAA,eAAeM,E,EAAAA,cAAcG,E,EAAAA,iBAAiBM,G,EAAAA,eAAeC,G,EAAAA,cAAcC,G,EAAAA,6B,iDClD5EE,GAAcC,IAAMC,MAAK,YAA6C,IAA3CC,EAA0C,EAA1CA,QAA0C,IAAjCC,gBAAiC,WACtDC,mBAAwB,MAD8B,oBACzE9C,EADyE,KAClE+C,EADkE,OAEtDD,mBAAS,IAF6C,oBAEzE5D,EAFyE,KAElE8D,EAFkE,KAIxEC,EAAiB,WACE,KAAjB/D,EAAMgE,QACNN,EAAQ1D,EAAMgE,QACdF,EAAS,KAETD,EAAS,sBAejB,OAAO,gCACH,cAACI,GAAA,EAAD,CAAWpC,MAAO7B,EACP2D,SAAUA,EACVO,SAfS,SAACC,GACrBL,EAASK,EAAEC,cAAcvC,QAedwC,WAbW,SAACF,GACV,OAAVrD,GACC+C,EAAS,MAEC,UAAVM,EAAEG,KACFP,KASOjD,QAASA,EACTyD,MAAOvE,EACPwE,WAAY1D,EACZ2D,QAAQ,WACRC,UAAU,KAErB,cAACC,EAAA,EAAD,CAAYC,KAAK,QAAQC,MAAM,UAAUC,QAASf,EAAgBJ,SAAUA,EAA5E,SACI,cAACoB,GAAA,EAAD,Y,UCnCCC,GAAexB,IAAMC,MAAK,YAAqD,IAAnD5B,EAAkD,EAAlDA,MAAOqC,EAA2C,EAA3CA,SAA2C,IAAjCP,gBAAiC,WACvDH,IAAMI,UAAS,GADwC,oBAChFqB,EADgF,KACtEC,EADsE,OAE7DtB,mBAAS/B,GAFoD,oBAEhF7B,EAFgF,KAEzE8D,EAFyE,KAwBvF,OACImB,EACI,cAAChB,GAAA,EAAD,CAAWQ,QAAQ,WAAW5C,MAAO7B,EAAOkE,SAZvB,SAACC,GAC1BL,EAASK,EAAEC,cAAcvC,QAWwDwC,WAT5D,SAACF,GACR,UAAVA,EAAEG,MACFY,GAAY,GACZhB,EAASlE,KAMmGmF,WAAS,EAACC,OAhBrG,WACrBF,GAAY,GACZhB,EAASlE,MAgBL,sBAAMqF,cAxBW,WACjB1B,IACAuB,GAAY,GACZpB,EAASjC,KAqBT,SAAwC7B,O,UC1B9CsB,GAA8B,CAChC,EAAK,CACD,CACI0B,GAAI,IAAKhD,MAAO,MAChBgB,OAAQ3B,EAAaiG,IAAKC,WAAY,cAAeC,YAAa,GAAIC,UAAW,GACjFC,SAAU,GAAIC,UAAW,GAAIC,MAAO,EACpCC,SAAUvG,EAAewG,IACzBrD,aAAc,aAElB,CACIO,GAAI,IAAKhD,MAAO,KAChBgB,OAAQ3B,EAAa0G,UAAWR,WAAY,cAAeC,YAAa,GAAIC,UAAW,GACvFC,SAAU,GAAIC,UAAW,GAAIC,MAAO,EACpCC,SAAUvG,EAAewG,IACzBrD,aAAc,aAElB,CACIO,GAAI,IAAKhD,MAAO,QAChBgB,OAAQ3B,EAAaiG,IAAKC,WAAY,cAAeC,YAAa,GAAIC,UAAW,GACjFC,SAAU,GAAIC,UAAW,GAAIC,MAAO,EACpCC,SAAUvG,EAAewG,IACzBrD,aAAc,cAGtB,EAAK,CACD,CACIO,GAAI,IAAKhD,MAAO,OAChBgB,OAAQ3B,EAAaiG,IAAKC,WAAY,cAAeC,YAAa,GAAIC,UAAW,GACjFC,SAAU,GAAIC,UAAW,GAAIC,MAAO,EACpCC,SAAUvG,EAAewG,IACzBrD,aAAc,aAElB,CACIO,GAAI,IAAKhD,MAAO,QAChBgB,OAAQ3B,EAAaiG,IAAKC,WAAY,cAAeC,YAAa,GAAIC,UAAW,GACjFC,SAAU,GAAIC,UAAW,GAAIC,MAAO,EACpCC,SAAUvG,EAAewG,IACzBrD,aAAc,aAElB,CACIO,GAAI,IAAKhD,MAAO,QAChBgB,OAAQ3B,EAAaiG,IAAKC,WAAY,cAAeC,YAAa,GAAIC,UAAW,GACjFC,SAAU,GAAIC,UAAW,GAAIC,MAAO,EACpCC,SAAUvG,EAAewG,IACzBrD,aAAc,eAMpBtB,GAAQC,YAAY,CACtBC,KAAM,QACNC,aAAcA,GACdE,SAAU,CACNwE,WAAY,SAACtE,EAAOC,GAChBD,EAAMC,EAAOC,QAAQ9B,YAAc6B,EAAOC,QAAQqE,OAEtDC,UAAW,SAACxE,EAAOC,GACfD,EAAMC,EAAOC,QAAQ2D,YAAYY,QAAQxE,EAAOC,UAEpDwE,aAAc,SAAC1E,EAAOC,GAClB,IAAMsE,EAAQvE,EAAMC,EAAOC,QAAQ9B,YAC7BgD,EAAQmD,EAAMlD,WAAU,SAAAsD,GAAC,OAAIA,EAAErD,KAAOrB,EAAOC,QAAQ1B,UACvD4C,GAAS,GACTmD,EAAM/C,OAAOJ,EAAO,IAG5BwD,aAAc,SAAC5E,EAAOC,GAClB,IAAMsE,EAAQvE,EAAMC,EAAOC,QAAQ9B,YAC7BgD,EAAQmD,EAAMlD,WAAU,SAAAsD,GAAC,OAAIA,EAAErD,KAAOrB,EAAOC,QAAQ1B,UACvD4C,GAAS,IACTmD,EAAMnD,GAAN,2BAAmBmD,EAAMnD,IAAWnB,EAAOC,QAAQxB,SAG3DmG,yBAA0B,SAAC7E,EAAOC,GAC9B,IAAMsE,EAAQvE,EAAMC,EAAOC,QAAQ9B,YAC7BgD,EAAQmD,EAAMlD,WAAU,SAAAsD,GAAC,OAAIA,EAAErD,KAAOrB,EAAOC,QAAQ1B,UACvD4C,GAAS,IACTmD,EAAMnD,GAAOL,aAAed,EAAOC,QAAQa,gBAIvD+D,cAAe,SAACC,GACZA,EAAQC,QAAQhE,GAAe,SAAChB,EAAOC,GACnCD,EAAMC,EAAOC,QAAQgB,KAAKI,IAAM,MAEpCyD,EAAQC,QAAQ7D,GAAkB,SAACnB,EAAOC,UAC/BD,EAAMC,EAAOC,QAAQqB,eAEhCwD,EAAQC,QAAQtE,GAAgB,SAACV,EAAOC,GACpCA,EAAOC,QAAQS,MAAMsE,SAAQ,SAACpE,GAC1Bb,EAAMa,EAAGS,IAAM,YAWlB4D,GAAezF,GAAMY,Q,GACuDZ,GAAMa,QAAjFgE,G,GAAAA,WAAWE,G,GAAAA,UAAUE,G,GAAAA,aAAaE,G,GAAAA,aAAaC,G,GAAAA,yBAwDhDM,GAAa,SAAC3G,EAAgBJ,EAAoBgH,GAArC,OACtB,SAACpG,EAAoBqG,GAIjB,IAEMC,EAFoBD,IAAWd,MACanG,GACbmH,MAAK,SAAAZ,GAAC,OAAIA,EAAErD,KAAO9C,KACxD,GAAK8G,EAAL,CAIA,IAAME,EAA6B,aAC/BlH,MAAOgH,EAAKhH,MACZwF,YAAawB,EAAKxB,YAClBxE,OAAQgG,EAAKhG,OACb6E,SAAUmB,EAAKnB,SACfJ,UAAWuB,EAAKvB,UAChBC,SAAUsB,EAAKtB,UACZoB,GAEPpG,EAASK,EAAe,CAACC,OAAQ,aACjCN,EAAS6F,GAAyB,CAACrG,SAAQJ,aAAY2C,aAAc,aACrE5C,EAAoBC,EAAYI,EAAQgH,GACnCC,MAAK,SAAAC,GACF,GAA4B,IAAxBA,EAAI5G,KAAK6G,WAAkB,CAC3B,IAAM1F,EAAS2E,GAAa,CAACpG,SAAOE,MAAO0G,EAAahH,eACxDY,EAASiB,GACTjB,EAASK,EAAe,CAACC,OAAQ,eACjCN,EAAS6F,GAAyB,CAACrG,SAAQJ,aAAY2C,aAAc,oBAErEhC,EAAqB2G,EAAI5G,KAAME,MAEpC4G,OAAM,SAAAxG,GACTG,EAAyBH,EAAOJ,WAzBhC6G,QAAQC,KAAK,iCC1IVC,GA7BFjE,IAAMC,MAAK,YAAoC,IAAlC3D,EAAiC,EAAjCA,WAAYkH,EAAqB,EAArBA,KAC5BtG,EAAWgH,cAEXC,EAAaC,uBAAY,WAC3BlH,EDoHoB,SAACR,EAAgBJ,GAAjB,OACxB,SAACY,GAEGA,EAASK,EAAe,CAACC,OAAQ,aACjCN,EAAS6F,GAAyB,CAACrG,SAAQJ,aAAY2C,aAAc,aACrE5C,EAAoBK,EAAQJ,GACvBqH,MAAK,SAAAC,GACF,GAA4B,IAAxBA,EAAI5G,KAAK6G,WAAkB,CAC3B,IAAM1F,EAASyE,GAAa,CAAClG,SAAQJ,eACrCY,EAASiB,GACTjB,EAASK,EAAe,CAACC,OAAQ,oBAEjCP,EAAqB2G,EAAI5G,KAAME,MAEpC4G,OAAM,SAAAxG,GACTG,EAAyBH,EAAOJ,OCnI3BmH,CAAab,EAAKhE,GAAIlD,MACjC,CAACkH,EAAKhE,GAAGlD,IACLgI,EAAkBF,uBAAY,SAACzD,GACjC,IAAInD,EAASmD,EAAEC,cAAc2D,QAAU1I,EAAa0G,UAAY1G,EAAaiG,IAC7E5E,EAASmG,GAAWG,EAAKhE,GAAKlD,EAAY,CAACkB,cAC7C,CAACgG,EAAKhE,GAAGlD,IACLkI,EAAkBJ,uBAAY,SAAC5H,GACjCU,EAASmG,GAAWG,EAAKhE,GAAIlD,EAAY,CAACE,aAC5C,CAACgH,EAAKhE,GAAGlD,IAELmI,EAAsC,YAAtBjB,EAAKvE,aAC3B,OACI,sBAAKiC,UAAWsC,EAAKhG,SAAW3B,EAAa0G,UAAY,wBAA0B,gBAAnF,UACI,cAACmC,GAAA,EAAD,CAAUrD,MAAM,UACNX,SAAU4D,EACVC,QAASf,EAAKhG,SAAW3B,EAAa0G,UACtCpC,SAAUsE,IACpB,cAACjD,GAAD,CAAcnD,MAAOmF,EAAKhH,MAAOkE,SAAU8D,EAAiBrE,SAAUsE,IACtE,cAACtD,EAAA,EAAD,CAAYG,QAAS6C,EAAYhE,SAAUsE,EAA3C,SACI,cAACE,GAAA,EAAD,YClCHC,GAAmB,SAAC1G,GAAD,OAAsCA,EAAM2G,KAAK9G,YCwBpE+G,GAAW9E,IAAMC,MAAK,SAAC8E,GAChC,IAAMC,EAAWC,YAAYL,IACvB1H,EAAWgH,cAEjBgB,qBAAU,WHyFc,IAAC5I,EGxFjB0I,GAGJ9H,GHqFqBZ,EGrFCyI,EAAMzI,WHsFhC,SAACY,GACGA,EAASK,EAAe,CAACC,OAAQ,aACjCnB,EAAkBC,GACbqH,MAAK,SAAAC,GACF,IAAMnB,EAAQmB,EAAI5G,KAAKmI,MACjBhH,EAASqE,GAAW,CAACC,QAAOnG,eAClCY,EAASiB,GACTjB,EAASK,EAAe,CAACC,OAAQ,kBAClCsG,OAAM,SAAAxG,GACTG,EAAyBH,EAAOJ,WG9FtC,IAEF,IAAMkI,EAAUhB,uBAAY,SAAC5H,GACzBU,EHkHiB,SAACV,EAAeF,GAAhB,OACrB,SAACY,GACGA,EAASK,EAAe,CAACC,OAAQ,aACjCnB,EAAoBC,EAAYE,GAC3BmH,MAAK,SAAAC,GACF,GAA4B,IAAxBA,EAAI5G,KAAK6G,WAAkB,CAC3B,IAAM1F,EAASuE,GAAUkB,EAAI5G,KAAKA,KAAKqI,MACvCnI,EAASiB,GACTjB,EAASK,EAAe,CAACC,OAAQ,oBAEjCP,EAAqB2G,EAAI5G,KAAME,MAEpC4G,OAAM,SAAAxG,GACTG,EAAyBH,EAAOJ,OG/H3BoI,CAAU9I,EAAMgE,OAAQuE,EAAMzI,eACzC,CAACY,IACGqI,EAAsBnB,uBAAY,SAACoB,GN4ER,IAAClJ,EAAoBE,EM1ElDU,GN0E8BZ,EM1ECyI,EAAMzI,WN0EaE,EM1EDgJ,EN2ErD,SAACtI,GAIGA,EAASK,EAAe,CAACC,OAAQ,aACjCN,EAAS2C,GAA6B,CAACL,GAAIlD,EAAY2C,aAAc,aACrEnC,EAA2BR,EAAYE,GAClCmH,MAAK,SAAAC,GACF,GAA4B,IAAxBA,EAAI5G,KAAK6G,WAAkB,CAC3B,IAAM1F,EAASyB,GAAc,CAACJ,GAAIlD,EAAYE,MAAOA,IACrDU,EAASiB,GACTjB,EAASK,EAAe,CAACC,OAAQ,eACjCN,EAAS2C,GAA6B,CAACL,GAAIlD,EAAY2C,aAAc,oBAErEhC,EAAqB2G,EAAI5G,KAAME,MAEpC4G,OAAM,SAAAxG,GACLG,EAAyBH,EAAOJ,WM3F1C,CAACA,EAAU6H,EAAMzI,aAEbmJ,EAAerB,uBAAY,SAAC/F,EAAyB3B,GACvDQ,EAASyC,GAAe,CAACX,OAAQX,EAAMmB,GAAI9C,OAC7C,CAACQ,IAEGwI,EAAiBtB,uBAAY,SAAC5E,GNiDP,IAAClD,EMhD1BY,GNgD0BZ,EMhDCkD,ENiD/B,SAACtC,GACGA,EAASK,EAAe,CAACC,OAAQ,aACjCN,EAAS2C,GAA6B,CAACL,GAAIlD,EAAY2C,aAAc,aACrEnC,EAA2BR,GACtBqH,MAAK,SAACC,GACH,GAA2B,IAAxBA,EAAI5G,KAAK6G,WAAkB,CAC1B,IAAM1F,EAASkB,EAAiB,CAACI,WAAYnD,IAC7CY,EAASiB,GACTjB,EAASK,EAAe,CAACC,OAAQ,oBAEjCP,EAAqB2G,EAAI5G,KAAME,MAEpC4G,OAAM,SAAAxG,GACTG,EAAyBH,EAAOJ,WM7DtC,IAEIyI,EAAoBvB,uBAAY,WAClCqB,EAAa,MAAOV,EAAMzI,cAC5B,IACIsJ,EAAuBxB,uBAAY,WACrCqB,EAAa,SAAUV,EAAMzI,cAC/B,IACIuJ,EAA0BzB,uBAAY,WACxCqB,EAAa,YAAaV,EAAMzI,cAClC,IAGEwJ,EAAef,EAAMtC,MACrBsD,EAAmBD,EACF,WAAjBf,EAAM/F,SACN+G,EAAmBD,EAAa9G,QAAO,SAAA6D,GAAC,OAAIA,EAAErF,SAAW3B,EAAaiG,QAErD,cAAjBiD,EAAM/F,SACN+G,EAAmBD,EAAa9G,QAAO,SAAA6D,GAAC,OAAIA,EAAErF,SAAW3B,EAAa0G,cAG1E,IAAMiB,EAAQuC,EAAiBjH,KAAI,SAAA+D,GAC/B,OAAO,cAAC,GAAD,CACMW,KAAMX,EACNvG,WAAYyI,EAAMzI,YAFbuG,EAAErD,OAMlBiF,EAAgD,YAAhCM,EAAMiB,SAAS/G,aAErC,OAAO,gCACH,sBAAKiC,UAAU,iBAAf,UACI,cAACM,GAAD,CAAcnD,MAAO0G,EAAMvI,MAAOkE,SAAU6E,EAAqBpF,SAAUsE,IAC3E,cAACtD,EAAA,EAAD,CAAYG,QAAS,kBAAMoE,EAAeX,EAAMzI,aAAa6D,SAAUsE,EAAvE,SACI,cAACE,GAAA,EAAD,SAGR,cAAC5E,GAAD,CAAaG,QAASkF,EAASjF,SAAUsE,IACzC,8BAEQjB,IAGR,gCACI,cAACyC,EAAA,EAAD,CAAQhF,QAAQ,WAAWI,MAAwB,QAAjB0D,EAAM/F,OAAmB,YAAc,UAAWoC,KAAK,QACjFE,QAASqE,EADjB,iBAGA,cAACM,EAAA,EAAD,CAAQhF,QAAQ,WAAWI,MAAwB,WAAjB0D,EAAM/F,OAAsB,YAAc,UAAWoC,KAAK,QACpFE,QAASsE,EADjB,oBAGA,cAACK,EAAA,EAAD,CAAQhF,QAAQ,WAAWI,MAAwB,cAAjB0D,EAAM/F,OAAyB,YAAc,UAAWoC,KAAK,QACvFE,QAASuE,EADjB,gC,SCnGCK,GAAoB,SAAChI,GAAD,OAAuDA,EAAMiI,WCAjFC,GAAgB,SAAClI,GAAD,OAA2CA,EAAMuE,OCYjE4D,GAA0B,WACnC,IAAMtI,EAAakH,YAAYL,IACzBuB,EAAYlB,YAAYiB,IACxBzD,EAAQwC,YAAYmB,IACpBlJ,EAAWgH,cAEjBgB,qBAAU,WACFnH,GAGJb,GTwCJ,SAACA,GACGA,EAASK,EAAe,CAACC,OAAQ,aACjCV,IACK6G,MAAK,SAACC,GACH1G,EAAS0B,EAAe,CAACC,MAAO+E,EAAI5G,QACpCE,EAASK,EAAe,CAACC,OAAQ,kBAEpCsG,OAAM,SAAAxG,GACHG,EAAyBH,EAAOJ,WS/CzC,IAEH,IAAMoJ,EAAclC,uBAAY,SAAC5H,GAC7BU,ETkDsB,SAACV,GAAD,OAAmB,SAACU,GAC9C,IACIA,EAASK,EAAe,CAACC,OAAQ,aAC7BV,EAA2BN,GAC1BmH,MAAK,SAAAC,GAC0B,IAAxBA,EAAI5G,KAAK6G,YACT3G,EAASgC,EAAc,CAACE,KAAMwE,EAAI5G,KAAKA,KAAKqI,QAC5CnI,EAASK,EAAe,CAACC,OAAQ,gBAEjCP,EAAqB2G,EAAI5G,KAAME,MAEpC4G,OAAM,SAAAxG,GACLG,EAAyBH,EAAOJ,MAE1C,MAAOyD,GACL,MAAM,IAAI4F,MAAM5F,KSjEP6F,CAAehK,MACzB,IAEH,OAAIuB,EAGG,qCACH,eAAC0I,GAAA,EAAD,CAAMC,WAAS,EAACC,MAAO,CAACC,QAAS,QAASC,QAAQ,SAASC,WAAW,SAChEC,UAAU,SADhB,UAEI,qBAAKJ,MAAO,CAACK,YAAa,QAA1B,0BACA,cAACjH,GAAD,CAAaG,QAASoG,OAE1B,cAACG,GAAA,EAAD,CAAMC,WAAS,EAACO,QAAS,EAAGJ,QAAQ,eAApC,SACKV,EAAUrH,KAAI,SAAA+D,GACX,IAAIiD,EAAerD,EAAMI,EAAErD,IAC3B,OACI,cAACiH,GAAA,EAAD,CAAiBpB,MAAI,EAACsB,MAAO,CAACC,QAAS,QAAvC,SACI,cAACM,GAAA,EAAD,CAAOP,MAAO,CAACC,QAAS,QAAxB,SACI,cAAC9B,GAAD,CACUkB,SAAUnD,EACVrG,MAAOqG,EAAErG,MACTiG,MAAOqD,EACP9G,OAAQ6D,EAAE7D,OACV1C,WAAYuG,EAAErD,IALTqD,EAAErD,OAFdqD,EAAErD,YAZlB,cAAC,KAAD,CAAU2H,GAAI,Y,oBC1B7B,SAASC,GAAMrC,GACX,OAAO,cAAC,KAAD,aAAUsC,UAAW,EAAGpG,QAAQ,UAAa8D,IAGzC,SAASuC,KACpB,IAAMhK,EAAQ2H,aAA6C,SAAA/G,GAAK,OAAIA,EAAMqJ,IAAIjK,SACxEJ,EAAWgH,cAEXsD,EAAc,SAACC,EAA8BC,GAChC,cAAXA,GAGJxK,EAASG,EAAc,CAACC,MAAO,SAGnC,OACI,cAACqK,GAAA,EAAD,CAAUC,KAAgB,OAAVtK,EAAgBuK,iBAAkB,IAAMC,QAASN,EAAjE,SACI,cAAC,GAAD,CAAOM,QAASN,EAAaO,SAAS,QAAtC,SACKzK,M,+DCXJ0K,GAAQ,WACjB,IAAMjK,EAAakH,YAAYL,IACzB1H,EAAWgH,cACX+D,EAASC,aAAU,CACrBC,cAAe,CACXC,MAAO,qBACPC,SAAU,OACVC,YAAY,GAEhBC,SAAU,SAACC,GACP,IAAMC,EAA0B,GAWhC,OAVKD,EAAOJ,MAEA,4CAA4CM,KAAKF,EAAOJ,SAChEK,EAAOL,MAAQ,yBAFfK,EAAOL,MAAQ,WAIdI,EAAOH,SAEDG,EAAOH,SAASjL,OAAS,IAChCqL,EAAOJ,SAAW,0CAFlBI,EAAOJ,SAAW,WAIfI,GAEXE,SAAU,SAAAH,GbZK,IAACxL,EaaZE,GbbYF,EaaKwL,EbbqB,SAACtL,GAC/CA,EAASK,EAAe,CAACC,OAAQ,aACjCT,EAAcC,GACT2G,MAAK,SAAAC,GACqB,IAAxBA,EAAI5G,KAAK6G,YACR3G,EAASK,EAAe,CAACC,OAAQ,eACjCN,EAASe,EAAc,CAACI,OAAO,MAE/BpB,EAAqB2G,EAAI5G,KAAME,MAEpC4G,OAAM,SAAA8E,GACLnL,EAAyBmL,EAAK1L,SaG1B+K,EAAOY,eAGf,OAAG9K,EACQ,cAAC,KAAD,CAAUoJ,GAAI,MAElB,cAACV,GAAA,EAAD,CAAMC,WAAS,EACTG,QAAQ,SADd,SAEC,cAACJ,GAAA,EAAD,CAAMpB,MAAI,EAACyD,GAAI,GAAf,SACA,sBAAMH,SAAUV,EAAOc,aAAcpC,MAAO,CAACqC,UAAW,SAAUC,UAAW,QAA7E,SACI,eAACC,GAAA,EAAD,WACI,eAACC,GAAA,EAAD,WACI,yDACI,mBAAGC,KAAM,wCACNC,OAAQ,SADX,qBAIJ,wEACA,0DACA,kDAEJ,eAACC,GAAA,EAAD,WACI,cAAC7I,GAAA,EAAD,aACIM,MAAM,QACNwI,OAAO,UACHtB,EAAOuB,cAAc,WAE5BvB,EAAOwB,QAAQrB,OAASH,EAAOQ,OAAOL,MACnC,qBAAKzB,MAAO,CAACtF,MAAO,OAApB,SAA6B4G,EAAOQ,OAAOL,QAAe,KAC9D,cAAC3H,GAAA,EAAD,aACIiJ,KAAK,WACL3I,MAAM,WACNwI,OAAO,UACHtB,EAAOuB,cAAc,cAE5BvB,EAAOwB,QAAQpB,UAAYJ,EAAOQ,OAAOJ,SACtC,qBAAK1B,MAAO,CAACtF,MAAO,OAApB,SAA6B4G,EAAOQ,OAAOJ,WAAkB,KACjE,cAACsB,GAAA,EAAD,CACI5I,MAAO,cACP6I,QAAS,cAAClF,GAAA,EAAD,eACDuD,EAAOuB,cAAc,kBAGjC,cAACvD,EAAA,EAAD,CAAQyD,KAAM,SAAUzI,QAAS,YAAaI,MAAO,UAArD,gCChFXwI,GAAsB,SAAC3L,GAAD,OAAsCA,EAAMqJ,IAAI9I,eACtEqL,GAAe,SAAC5L,GAAD,OAAqCA,EAAMqJ,IAAI/J,QCoBrEuM,GAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACFC,SAAU,GAEdC,WAAY,CACRpD,YAAaiD,EAAMhD,QAAQ,IAE/BzK,MAAO,CACH2N,SAAU,OAiEHE,OA1Df,WACI,IAAMtM,EAAakH,YAAYL,IACzBnG,EAAgBwG,YAAY4E,IAC5BrM,EAASyH,YAAY6E,IAErBQ,EAAUP,KAEV7M,EAAWgH,cACXqG,EAAUC,eAEVC,EAAerG,uBAAY,WAC7BlH,GfVsB,SAACA,GAC3BA,EAASK,EAAe,CAACC,OAAQ,aACjCT,IACK4G,MAAK,SAAAC,GACyB,IAAxBA,EAAI5G,KAAK6G,YACR3G,EAASK,EAAe,CAACC,OAAQ,eACjCN,EAASe,EAAc,CAACI,OAAO,MAE/BpB,EAAqB2G,EAAI5G,KAAME,MAEpC4G,OAAM,SAAA8E,GACTnL,EAAyBmL,EAAK1L,WeA/B,CAACA,IAMJ,OAJAgI,qBAAU,WACNhI,GdrB6B,SAACA,GAClCH,IACK4G,MAAK,SAAAC,GAC0B,IAAxBA,EAAI5G,KAAK6G,WACT3G,EAASe,EAAc,CAACI,OAAO,KAE/BpB,EAAqB2G,EAAI5G,KAAME,GAEnCA,EAASwB,EAAiB,CAACL,OAAO,QACnCyF,OAAM,SAAAxG,GACLG,EAAyBH,EAAOJ,WcYrC,CAACA,IAECuB,EAQD,sBAAKyC,UAAU,MAAf,UACI,cAACoG,GAAD,IACA,cAACoD,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACI,eAACC,EAAA,EAAD,WACI,cAACzJ,EAAA,EAAD,CAAY0J,KAAK,QAAQ3J,UAAWoJ,EAAQF,WAAY/I,MAAM,UAAUyJ,aAAW,OAAnF,SACI,cAAC,IAAD,MAEJ,cAACC,EAAA,EAAD,CAAY9J,QAAQ,KAAKC,UAAWoJ,EAAQ9N,MAA5C,qBAIKuB,EAEG,cAACkI,EAAA,EAAD,CAAQ5E,MAAM,UAAUC,QAASmJ,EAAjC,qBADA,cAACxE,EAAA,EAAD,CAAQ5E,MAAM,UAAUC,QAAS,kBAAMiJ,EAAQpL,KAAK,WAApD,wBAKJ,YAAX3B,GAAwB,cAACwN,EAAA,EAAD,CAAgB3J,MAAO,YAChD,cAAC4J,EAAA,EAAD,CAAWC,OAAK,EAAhB,SACI,cAAC,KAAD,UACI,eAAC,KAAD,WACI,cAAC,KAAD,CAAOC,OAAK,EAACC,KAAM,IAAKC,OAAQ,kBAAM,cAAC,GAAD,OACtC,cAAC,KAAD,CAAOD,KAAM,SAAUC,OAAQ,kBAAM,cAAC,GAAD,OACrC,cAAC,KAAD,CAAOD,KAAM,OAAQC,OAAQ,kBAAM,wDACnC,cAAC,KAAD,CAAUC,KAAM,IAAKnE,GAAI,mBA/BlC,qBACHR,MAAO,CAACgE,SAAU,QAASY,IAAK,MAAOvC,UAAW,SAAUwC,MAAO,QADhE,SAEH,cAACC,EAAA,EAAD,OC7CGC,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBjI,MAAK,YAAkD,IAA/CkI,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,kBCEDO,GAAcC,aAAgB,CACvC1J,MAAOW,GACP+C,UAAWrG,EACXyH,IAAK5I,EACLkG,KAAMvG,IAQG8N,GAAQC,YAAe,CAChC9N,QAAS2N,GACTI,WAAY,SAAAC,GAAoB,OAAIA,IAAuBC,QAAQC,SAMvEC,OAAON,MAAQA,GCvBfO,IAAStB,OACD,cAAC,IAAD,CAAUe,MAAOA,GAAjB,SACI,cAAC,GAAD,MAGVQ,SAASC,eAAe,SAM1BnB,O","file":"static/js/main.0d0adde5.chunk.js","sourcesContent":["import axios from 'axios'\r\nimport {RequestStatusType} from \"../app/appReducer\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'a409a2ec-60ad-4ff6-9051-8f6025edc2fd'\r\n    }\r\n})\r\n\r\n// tasks API\r\nexport const tasksAPI = {\r\n    getTasks(todolistId: string) {\r\n        return  instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return  instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: title})\r\n    },\r\n    deleteTask(taskId: string, todolistId: string) {\r\n        return  instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return  instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    }\r\n}\r\n// todolist API\r\nexport const todolistAPI = {\r\n    getTodolist() {\r\n        return  instance.get<Array<TodolistType>>(`todo-lists`)\r\n    },\r\n    createTodolist(title: string) {\r\n        return  instance.post<ResponseType<{item: TodolistType}>>(`todo-lists`, {title})\r\n    },\r\n    deleteTodolist(todolistId: string, ) {\r\n        return  instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return  instance.put<ResponseType>(`todo-lists/${todolistId}`, {title})\r\n    }\r\n}\r\n\r\n// auth API\r\nexport const authAPI = {\r\n    login(data: ParamsLoginType) {\r\n        return instance.post<ResponseType<{userId: number}>>(`auth/login`, data)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType<{}>>(`auth/login`)\r\n    },\r\n    auth() {\r\n        return instance.get<ResponseType<{id: number, email: string, login: string}>>(`auth/me`)\r\n    }\r\n}\r\n\r\n\r\n// types\r\nexport type ParamsLoginType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type TodolistType= {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\nexport type ResponseType<T = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: T\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n    entityStatus: RequestStatusType\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {ResponseType} from '../api/API'\r\nimport {setAppErrorAC, setAppStatusAC} from '../app/appReducer'\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: Dispatch) => {\r\n    dispatch(setAppErrorAC({error: error.message}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\n","import { Dispatch } from 'redux'\r\nimport {setAppStatusAC} from '../../app/appReducer'\r\nimport {authAPI, ParamsLoginType} from \"../../api/API\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'auth', // name of our reducer\r\n    initialState: initialState, // initialState\r\n    reducers: {\r\n        // Transfer to reducer our actions and put state and action to the parameters\r\n        // we need types actions and and use PayloadAction< {our value: type} >\r\n        setIsLoggedIn(state, action :PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    }\r\n})\r\nexport const authReducer = slice.reducer // assign our reducer to variable\r\nexport const {setIsLoggedIn} = slice.actions // get actionCreator from actions\r\n\r\n\r\nexport const loginTC = (data: ParamsLoginType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n        if(res.data.resultCode === 0) {\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            dispatch(setIsLoggedIn({value: true}))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    }).catch(err => {\r\n        handleServerNetworkError(err, dispatch)\r\n    })\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if(res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                dispatch(setIsLoggedIn({value: false}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        }).catch(err => {\r\n        handleServerNetworkError(err, dispatch)\r\n    })\r\n}","import {authAPI} from \"../api/API\";\r\nimport {Dispatch} from \"redux\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport { setIsLoggedIn} from \"../features/Auth/authReducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    status: 'idle',\r\n    error: null as string | null,\r\n    isInitialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppStatusAC(state, action: PayloadAction<{status: RequestStatusType}>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppErrorAC(state, action: PayloadAction<{error: string | null}>) {\r\n            state.error = action.payload.error\r\n        },\r\n        setIsInitialized(state, action: PayloadAction<{value: boolean}>) {\r\n            state.isInitialized = action.payload.value\r\n        }\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\nexport const {setAppStatusAC,setAppErrorAC,setIsInitialized} = slice.actions\r\n\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.auth()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedIn({value: true}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n            dispatch(setIsInitialized({value: true}))\r\n        }).catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n\r\n\r\n// types\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\n","import {todolistAPI} from \"../../api/API\";\r\nimport {TodolistType} from \"../../api/API\"\r\nimport {\r\n    RequestStatusType,\r\n    setAppStatusAC,\r\n} from \"../../app/appReducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: Array<TodolistDomainType> = [\r\n    // {\r\n    //     id: '1',\r\n    //     addedDate: '',\r\n    //     order:0,\r\n    //     title: 'React',\r\n    //     filter: 'all' as FilterValuesType,\r\n    //     entityStatus: \"idle\" as RequestStatusType,\r\n    // },\r\n    // {\r\n    //     id: '2',\r\n    //     addedDate: '',\r\n    //     order:0,\r\n    //     title: 'React',\r\n    //     filter: 'all' as FilterValuesType,\r\n    //     entityStatus: \"idle\" as RequestStatusType,\r\n    // },\r\n]\r\n\r\nconst slice = createSlice({\r\n    name: 'todolist',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setTodolistsAC: (state, action: PayloadAction<{todos: Array<TodolistType>}>) => {\r\n            return action.payload.todos.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        },\r\n        addTodolistAC: (state, action: PayloadAction<{todo: TodolistType}>) => {\r\n            state.push({...action.payload.todo, filter: 'all', entityStatus: 'idle'})\r\n        },\r\n        removeTodolistAC: (state, action: PayloadAction<{todolistID: string}>) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todolistID)\r\n            if(index !== -1) state.splice(index, 1)\r\n        },\r\n        changeFilterAC: (state, action: PayloadAction<{filter: FilterValuesType, id: string}>) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTitleAC: (state, action: PayloadAction<{id: string, title: string}>) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].title = action.payload.title\r\n        },\r\n        changeTodolistEntityStatusAC: (state, action: PayloadAction<{id: string, entityStatus: RequestStatusType}>) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.entityStatus\r\n        },\r\n    }\r\n})\r\n\r\nexport const todolistReducer = slice.reducer\r\nexport const {setTodolistsAC,addTodolistAC,removeTodolistAC,changeFilterAC,changeTitleAC,changeTodolistEntityStatusAC}\r\n= slice.actions\r\n\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () =>\r\n    (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistAPI.getTodolist()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC({todos: res.data}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n            .catch(error => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n\r\n    }\r\n\r\n\r\nexport const addTodolistsTC = (title: string) => (dispatch: Dispatch) => {\r\n    try {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n            todolistAPI.createTodolist(title)//let result =  await todolistAPI.createTodolist(title) возвращает\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTodolistAC({todo: res.data.data.item}))\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch(error => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    } catch (e) {\r\n        throw new Error(e)\r\n    }\r\n}\r\n\r\nexport const deleteTodolistsTC = (todolistId: string) =>\r\n    (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        dispatch(changeTodolistEntityStatusAC({id: todolistId, entityStatus: 'loading'}))\r\n        todolistAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                if(res.data.resultCode === 0) {\r\n                    const action = removeTodolistAC({todolistID: todolistId})\r\n                    dispatch(action)\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                }else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n    }\r\n\r\nexport const updateTodolistTitleTC = (todolistId: string, title: string) =>\r\n    (dispatch: Dispatch) => {\r\n// так как мы обязаны на сервер отправить все св-ва, которые сервер ожидает, а не только\r\n// те, которые мы хотим обновить, соответственно нам нужно в этом месте взять таску целиком\r\n// чтобы у неё отобрать остальные св-ва\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        dispatch(changeTodolistEntityStatusAC({id: todolistId, entityStatus: 'loading'}))\r\n        todolistAPI.updateTodolist(todolistId, title)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = changeTitleAC({id: todolistId, title: title})\r\n                    dispatch(action)\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                    dispatch(changeTodolistEntityStatusAC({id: todolistId, entityStatus: 'succeeded'}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch(error => {\r\n                handleServerNetworkError(error, dispatch)\r\n        })\r\n    }\r\n\r\n// types\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter:  FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\nexport type PropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(({addItem, disabled = false}: PropsType) => {\r\n    let [error, setError] = useState<string | null>(null)\r\n    let [title, setTitle] = useState(\"\")\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title.trim());\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if(error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.key === 'Enter') {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField value={title}\r\n                   disabled={disabled}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   error={!!error}\r\n                   label={title}\r\n                   helperText={error}\r\n                   variant='outlined'\r\n                   className=''\r\n        />\r\n        <IconButton size='small' color='primary' onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})","import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\n\r\nexport type PropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo(({value, onChange, disabled = false}: PropsType) => {\r\n    const [editMode, setEditMode] = React.useState(false)\r\n    const [title, setTitle] = useState(value)\r\n\r\n    const activateEditMode = () => {\r\n        if(!disabled) {\r\n            setEditMode(true)\r\n            setTitle(value)\r\n        }\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        onChange(title)\r\n    }\r\n    const onChangeStatusHandler =(e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler =(e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            setEditMode(false)\r\n            onChange(title)\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode ?\r\n            <TextField variant='outlined' value={title} onChange={onChangeStatusHandler} onKeyPress={onKeyPressHandler} autoFocus onBlur={activateViewMode}/>\r\n            :\r\n            <span onDoubleClick={activateEditMode}>{title}</span>\r\n    )\r\n})","import {TaskPriorities, tasksAPI, TaskStatuses, TaskType, TodolistType, UpdateTaskModelType} from \"../../api/API\";\r\nimport {\r\n    addTodolistAC,\r\n    removeTodolistAC,\r\n    setTodolistsAC,\r\n} from \"./todolistReducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, setAppStatusAC} from \"../../app/appReducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: TaskStateType = {\r\n    \"1\": [\r\n        {\r\n            id: \"1\", title: \"CSS\",\r\n            status: TaskStatuses.New, todoListId: 'todolistId1', description: '', startDate: '',\r\n            deadline: '', addedDate: '', order: 0,\r\n            priority: TaskPriorities.Low,\r\n            entityStatus: 'succeeded' as RequestStatusType,\r\n        },\r\n        {\r\n            id: \"2\", title: \"JS\",\r\n            status: TaskStatuses.Completed, todoListId: 'todolistId1', description: '', startDate: '',\r\n            deadline: '', addedDate: '', order: 0,\r\n            priority: TaskPriorities.Low,\r\n            entityStatus: 'succeeded' as RequestStatusType,\r\n        },\r\n        {\r\n            id: \"3\", title: \"REACT\",\r\n            status: TaskStatuses.New, todoListId: 'todolistId1', description: '', startDate: '',\r\n            deadline: '', addedDate: '', order: 0,\r\n            priority: TaskPriorities.Low,\r\n            entityStatus: 'succeeded' as RequestStatusType,\r\n        },\r\n    ],\r\n    \"2\": [\r\n        {\r\n            id: \"1\", title: \"book\",\r\n            status: TaskStatuses.New, todoListId: 'todolistId1', description: '', startDate: '',\r\n            deadline: '', addedDate: '', order: 0,\r\n            priority: TaskPriorities.Low,\r\n            entityStatus: 'succeeded' as RequestStatusType,\r\n        },\r\n        {\r\n            id: \"2\", title: \"book2\",\r\n            status: TaskStatuses.New, todoListId: 'todolistId1', description: '', startDate: '',\r\n            deadline: '', addedDate: '', order: 0,\r\n            priority: TaskPriorities.Low,\r\n            entityStatus: 'succeeded' as RequestStatusType,\r\n        },\r\n        {\r\n            id: \"3\", title: \"book3\",\r\n            status: TaskStatuses.New, todoListId: 'todolistId1', description: '', startDate: '',\r\n            deadline: '', addedDate: '', order: 0,\r\n            priority: TaskPriorities.Low,\r\n            entityStatus: 'succeeded' as RequestStatusType,\r\n        },\r\n\r\n    ]\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setTasksAC: (state, action: PayloadAction<SetTaskType>) => {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        },\r\n        addTaskAC: (state, action: PayloadAction<TaskType>) => {\r\n            state[action.payload.todoListId].unshift(action.payload)\r\n        },\r\n        removeTaskAC: (state, action: PayloadAction<RemoveTaskType>) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        },\r\n        updateTaskAC: (state, action: PayloadAction<UpdateTaskType>) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.model}\r\n            }\r\n        },\r\n        changeTaskEntityStatusAC: (state, action: PayloadAction<ChangeTaskEntityType>) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index].entityStatus = action.payload.entityStatus\r\n            }\r\n        }\r\n    },//\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistAC, (state, action) => {\r\n            state[action.payload.todo.id] = []\r\n        });\r\n        builder.addCase(removeTodolistAC, (state, action) => {\r\n            delete state[action.payload.todolistID]\r\n        });\r\n        builder.addCase(setTodolistsAC, (state, action) => {\r\n            action.payload.todos.forEach((tl) => {\r\n                state[tl.id] = []\r\n            })\r\n        })\r\n    }\r\n})\r\n\r\ntype ChangeTaskEntityType = { taskId: string, todolistId: string, entityStatus: RequestStatusType }\r\ntype UpdateTaskType = { taskId: string, model: UpdateDomainTaskModelType, todolistId: string }\r\ntype RemoveTaskType = { taskId: string, todolistId: string }\r\ntype SetTaskType = { tasks: Array<TaskType>, todolistId: string }\r\n\r\nexport const tasksReducer = slice.reducer\r\nexport const {setTasksAC,addTaskAC,removeTaskAC,updateTaskAC,changeTaskEntityStatusAC} = slice.actions\r\n\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) =>\r\n    (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        tasksAPI.getTasks(todolistId)\r\n            .then(res => {\r\n                const tasks = res.data.items\r\n                const action = setTasksAC({tasks, todolistId})\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            }).catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n    }\r\n\r\nexport const removeTaskTC = (taskId: string, todolistId: string) =>\r\n    (dispatch: Dispatch) => {\r\n\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        dispatch(changeTaskEntityStatusAC({taskId, todolistId, entityStatus: 'loading'}))\r\n        tasksAPI.deleteTask(taskId, todolistId)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = removeTaskAC({taskId, todolistId})\r\n                    dispatch(action)\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n    }\r\n\r\nexport const addTaskTC = (title: string, todolistId: string) =>\r\n    (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        tasksAPI.createTask(todolistId, title)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = addTaskAC(res.data.data.item)\r\n                    dispatch(action)\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n\r\n    }\r\n\r\n// универсальная санка, которая помимо taskId и todolistId принимает необходимое поле для изменения status|title\r\nexport const updateTask = (taskId: string, todolistId: string, domainModel: UpdateDomainTaskModelType) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n// так как мы обязаны на сервер отправить все св-ва, которые сервер ожидает, а не только\r\n// те, которые мы хотим обновить, соответственно нам нужно в этом месте взять таску целиком\r\n// чтобы у неё отобрать остальные св-ва\r\n        const allTasksFromState = getState().tasks\r\n        const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n        const task = tasksForCurrentTodolist.find(t => t.id === taskId)\r\n        if (!task) {\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n        const apiModel: UpdateTaskModelType = {\r\n            title: task.title,\r\n            description: task.description,\r\n            status: task.status,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            deadline: task.deadline,\r\n            ...domainModel// перезатираем только то свойство, которое было передано в domainModel\r\n        }\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        dispatch(changeTaskEntityStatusAC({taskId, todolistId, entityStatus: 'loading'}))\r\n        tasksAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC({taskId,model: domainModel, todolistId})\r\n                    dispatch(action)\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                    dispatch(changeTaskEntityStatusAC({taskId, todolistId, entityStatus: 'succeeded'}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n\r\n    }\r\n\r\n// types\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\n// создаем тип, для универсальной санки с необязательными полями, для подстановки нужного поля в санку\r\ntype UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n    entityStatus?: RequestStatusType\r\n}","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../../../Components/EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport { removeTaskTC, updateTask} from \"../../tasksReducer\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/API\";\r\n\r\nexport type PropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\n\r\nconst Task = React.memo(({todolistId, task}: PropsType) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const removeTask = useCallback(() => {\r\n        dispatch(removeTaskTC(task.id, todolistId))\r\n    },[task.id,todolistId])\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let status = e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New\r\n        dispatch(updateTask(task.id,  todolistId, {status}));\r\n    },[task.id,todolistId])\r\n    const changeTaskTitle = useCallback((title: string) => {\r\n        dispatch(updateTask(task.id, todolistId, {title}));\r\n    },[task.id,todolistId])\r\n\r\n    const statusLoading = task.entityStatus === 'loading'\r\n    return (\r\n        <div className={task.status === TaskStatuses.Completed ? \"task__wrapper is-done\" : \"task__wrapper\"}>\r\n            <Checkbox color='primary'\r\n                      onChange={onChangeHandler}\r\n                      checked={task.status === TaskStatuses.Completed}\r\n                      disabled={statusLoading}/>\r\n            <EditableSpan value={task.title} onChange={changeTaskTitle} disabled={statusLoading}/>\r\n            <IconButton onClick={removeTask} disabled={statusLoading}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Task","import {AppRootStateType} from \"../../app/store\";\r\n\r\nexport const selectIsLoggedIn = (state: AppRootStateType): boolean => state.auth.isLoggedIn","import React, {useCallback, useEffect} from 'react';\r\nimport {Button, IconButton} from '@material-ui/core';\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {AddItemForm} from \"../../../Components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../Components/EditableSpan/EditableSpan\";\r\nimport Task from \"./Task/Task\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {addTaskTC, fetchTasksTC} from \"../tasksReducer\";\r\nimport {\r\n    changeFilterAC,\r\n    deleteTodolistsTC,\r\n    FilterValuesType,\r\n    TodolistDomainType,\r\n    updateTodolistTitleTC\r\n} from \"../todolistReducer\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/API\";\r\nimport {selectIsLoggedIn} from \"../../Auth/selectors\";\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    todolistId: string\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) =>  {\r\n    const isLogged = useSelector(selectIsLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if(!isLogged) {\r\n            return\r\n        }\r\n        dispatch(fetchTasksTC(props.todolistId))\r\n    },[])//no dependencies. runs only once when the component will render\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        dispatch(addTaskTC(title.trim(), props.todolistId))\r\n    },[dispatch]);\r\n    const changeTodoListTitle = useCallback((newTitle: string) => {\r\n\r\n        dispatch(updateTodolistTitleTC(props.todolistId, newTitle))\r\n    },[dispatch, props.todolistId])\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, taskId: string) => {\r\n        dispatch(changeFilterAC({filter: value,id: taskId}));\r\n    },[dispatch])\r\n\r\n    const removeTodolist = useCallback((id: string) => {\r\n        dispatch(deleteTodolistsTC(id))\r\n    },[])\r\n\r\n    const onAllClickHandler = useCallback(() => {\r\n        changeFilter(\"all\", props.todolistId)\r\n    },[]);\r\n    const onActiveClickHandler = useCallback(() => {\r\n        changeFilter(\"active\", props.todolistId)\r\n    },[]);\r\n    const onCompletedClickHandler = useCallback(() => {\r\n        changeFilter(\"completed\", props.todolistId)\r\n    },[])\r\n\r\n\r\n    let allTodoLists = props.tasks;\r\n    let tasksForTodolist = allTodoLists\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = allTodoLists.filter(t => t.status === TaskStatuses.New);\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodolist = allTodoLists.filter(t => t.status === TaskStatuses.Completed);\r\n    }\r\n\r\n    const task =  tasksForTodolist.map(t => {\r\n        return <Task key={t.id}\r\n                     task={t}\r\n                     todolistId={props.todolistId}\r\n        />\r\n    })\r\n\r\n    const statusLoading = props.todolist.entityStatus === 'loading'\r\n\r\n    return <div>\r\n        <div className='title__wrapper'>\r\n            <EditableSpan value={props.title} onChange={changeTodoListTitle} disabled={statusLoading}/>\r\n            <IconButton onClick={() => removeTodolist(props.todolistId)} disabled={statusLoading}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>\r\n        <AddItemForm addItem={addTask} disabled={statusLoading}/>\r\n        <div>\r\n            {\r\n                task\r\n            }\r\n        </div>\r\n        <div>\r\n            <Button variant='outlined' color={props.filter === 'all' ? \"secondary\" : \"primary\"} size='small'\r\n                    onClick={onAllClickHandler}>All\r\n            </Button>\r\n            <Button variant='outlined' color={props.filter === 'active' ? \"secondary\" : \"primary\"} size='small'\r\n                    onClick={onActiveClickHandler}>Active\r\n            </Button>\r\n            <Button variant='outlined' color={props.filter === 'completed' ? \"secondary\" : \"primary\"} size='small'\r\n                    onClick={onCompletedClickHandler}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import {AppRootStateType} from \"../../app/store\";\r\nimport {TodolistDomainType} from \"./todolistReducer\";\r\n\r\nexport const selectorTodolists = (state: AppRootStateType):Array<TodolistDomainType> => state.todolists","import {AppRootStateType} from \"../../../../app/store\";\r\nimport {TaskStateType} from \"../../tasksReducer\";\r\n\r\nexport const selectorTasks = (state: AppRootStateType):TaskStateType => state.tasks","import React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {addTodolistsTC, fetchTodolistsTC} from \"./todolistReducer\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"../../Components/AddItemForm/AddItemForm\";\r\nimport {Todolist} from \"./Todolist/TodoList\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {selectIsLoggedIn} from \"../Auth/selectors\";\r\nimport {selectorTodolists} from \"./selectors\";\r\nimport {selectorTasks} from \"./Todolist/Task/selector\";\r\n\r\n\r\n\r\n\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n    const todolists = useSelector(selectorTodolists)\r\n    const tasks = useSelector(selectorTasks);\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if(!isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        dispatch(addTodolistsTC(title))\r\n    }, [])\r\n\r\n    if(!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n    return <>\r\n        <Grid container style={{padding: '20px'}} justify=\"center\" alignItems=\"center\"\r\n              direction=\"column\">\r\n            <div style={{marginRight: '20px'}}>Add new task</div>\r\n            <AddItemForm addItem={addTodoList}/>\r\n        </Grid>\r\n        <Grid container spacing={3} justify='space-around'>\r\n            {todolists.map(t => {\r\n                let allTodoLists = tasks[t.id];\r\n                return (\r\n                    <Grid key={t.id} item style={{padding: '20px'}}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist key={t.id}\r\n                                      todolist={t}\r\n                                      title={t.title}\r\n                                      tasks={allTodoLists}\r\n                                      filter={t.filter}\r\n                                      todolistId={t.id}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                )\r\n            })}\r\n        </Grid>\r\n    </>\r\n}","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport { setAppErrorAC} from \"../../app/appReducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport default function ErrorSnackBar() {\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC({error: null}));\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={4000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from 'formik';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./authReducer\";\r\nimport { Redirect } from 'react-router-dom';\r\nimport {selectIsLoggedIn} from \"./selectors\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n    const dispatch = useDispatch()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: 'free@samuraijs.com',\r\n            password: 'free',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'password must be more than 3 character';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    });\r\n    if(isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n    return <Grid container\r\n                 justify=\"center\">\r\n            <Grid item xs={10} >\r\n            <form onSubmit={formik.handleSubmit} style={{textAlign: 'center', marginTop: \"50px\"}}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email ?\r\n                            <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password ?\r\n                            <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import {AppRootStateType} from \"./store\";\r\n\r\nexport const selectIsInitialized = (state: AppRootStateType): boolean => state.app.isInitialized\r\nexport const selectStatus = (state: AppRootStateType): string => state.app.status","import React, {useCallback, useEffect} from 'react';\r\nimport './App.scss';\r\nimport {\r\n    AppBar,\r\n    Button, CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    makeStyles,\r\n    Toolbar,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport {TodolistsList} from \"../features/Todolists/TotolistsList\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {initializeAppTC} from \"./appReducer\";\r\nimport ErrorSnackBar from \"../Components/ErrorSnackBar/ErrorSnackBar\";\r\nimport {HashRouter, Redirect, Route, Switch, useHistory} from 'react-router-dom';\r\nimport {Login} from \"../features/Auth/Login\";\r\nimport {logoutTC} from \"../features/Auth/authReducer\";\r\nimport {selectIsInitialized, selectStatus} from \"./selectors\";\r\nimport { selectIsLoggedIn } from '../features/Auth/selectors';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n    const isInitialized = useSelector(selectIsInitialized)\r\n    const status = useSelector(selectStatus)\r\n\r\n    const classes = useStyles();\r\n\r\n    const dispatch = useDispatch()\r\n    const history = useHistory();\r\n\r\n    const handleLogout = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [dispatch])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackBar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        My TODO\r\n                    </Typography>\r\n                    {\r\n                        !isLoggedIn ?\r\n                            <Button color=\"inherit\" onClick={() => history.push('/login')}>Login</Button> :\r\n                            <Button color=\"inherit\" onClick={handleLogout}>Log out</Button>\r\n                    }\r\n                </Toolbar>\r\n            </AppBar>\r\n            {status === 'loading' && <LinearProgress color={\"primary\"}/>}\r\n            <Container fixed>\r\n                <HashRouter>\r\n                    <Switch>\r\n                        <Route exact path={'/'} render={() => <TodolistsList/>}/>\r\n                        <Route path={'/login'} render={() => <Login/>}/>\r\n                        <Route path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n                        <Redirect from={'*'} to={'/404'}/>\r\n                    </Switch>\r\n                </HashRouter>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {tasksReducer} from '../features/Todolists/tasksReducer';\r\nimport {todolistReducer} from '../features/Todolists/todolistReducer';\r\nimport {combineReducers} from 'redux';\r\nimport thunk from 'redux-thunk'\r\nimport {appReducer} from \"./appReducer\";\r\nimport {authReducer} from \"../features/Auth/authReducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния (редюсера)\r\nexport const rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\n// export const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// create our store use configureStore\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunk),\r\n})\r\n\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент store.getSstate\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './app/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\n\r\nReactDOM.render(\r\n        <Provider store={store} >\r\n            <App/>\r\n        </Provider>\r\n,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}