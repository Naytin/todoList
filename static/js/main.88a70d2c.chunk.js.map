{"version":3,"sources":["api/API.ts","Components/AddItemForm/AddItemForm.tsx","Components/EditableSpan/EditableSpan.tsx","features/Todolists/todolistReducer.ts","features/Todolists/tasksReducer.ts","app/appReducer.ts","features/Auth/authReducer.ts","app/store.ts","utils/error-utils.ts","features/Auth/authActionCreators.tsx","features/Todolists/actionCreators/todolistActionCreators.ts","features/Todolists/actionCreators/taskActionCreators.ts","app/appActionCreators.ts","features/index.ts","hooks/useActions.ts","features/Todolists/Todolist/Task/Task.tsx","features/Auth/selectors.ts","features/Todolists/Todolist/TodoList.tsx","features/Todolists/selectors.ts","features/Todolists/Todolist/Task/selector.ts","features/Todolists/TotolistsList.tsx","Components/ErrorSnackBar/ErrorSnackBar.tsx","features/Auth/Login.tsx","app/selectors.ts","app/App.tsx","reportWebVitals.ts","index.tsx","features/Todolists/Todolist/Task/Task.module.scss","features/Todolists/Todolist/TodoList.module.scss"],"names":["TaskStatuses","TaskPriorities","AddItemForm","React","memo","addItem","disabled","useState","error","setError","title","setTitle","addItemHandler","trim","TextField","value","onChange","e","currentTarget","onKeyPress","key","label","helperText","variant","className","IconButton","size","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","tasksAPI","todolistId","get","post","taskId","delete","model","put","todolistAPI","authAPI","data","slice","createSlice","name","initialState","reducers","setTodolistsAC","state","action","payload","todos","map","tl","filter","entityStatus","addTodolistAC","push","todo","removeTodolistAC","index","findIndex","id","todolistID","splice","changeFilterAC","changeTitleAC","changeTodolistEntityStatusAC","todolistReducer","reducer","actions","status","New","todoListId","description","startDate","deadline","addedDate","order","priority","Low","Completed","setTasksAC","tasks","addTaskAC","unshift","removeTaskAC","t","updateTaskAC","changeTaskEntityStatusAC","extraReducers","builder","addCase","forEach","tasksReducer","isInitialized","setAppStatusAC","setAppErrorAC","setIsInitialized","appReducer","isLoggedIn","setIsLoggedIn","authReducer","rootReducer","combineReducers","todolists","app","auth","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","window","handleServerAppError","dispatch","messages","length","handleServerNetworkError","message","loginTC","then","res","resultCode","catch","err","logoutTC","fetchTodolistsTC","addTodolistsTC","item","Error","deleteTodolistsTC","updateTodolistTitleTC","fetchTasksTC","items","removeTaskTC","addTaskTC","updateTask","domainModel","getState","task","find","apiModel","console","warn","initializeAppTC","AuthActionCreators","TodoActionCreators","TaskActionCreators","AppActionCreators","useActions","useDispatch","useMemo","bindActionCreators","ActionCreators","Task","removeTask","useCallback","onChangeHandler","checked","changeTaskTitle","statusLoading","style","task__wrapper","is_done","content","Checkbox","Delete","selectIsLoggedIn","Todolist","props","useSelector","useEffect","addTask","changeTodoListTitle","newTitle","changeFilter","removeTodolist","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","allTodoLists","tasksForTodolist","todolist","title__wrapper","btn__wrapper","Button","selectorTodolists","selectorTasks","TodolistsList","Grid","container","padding","justify","alignItems","direction","marginRight","wrap","overflowY","Paper","to","Alert","elevation","ErrorSnackBar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","xs","handleSubmit","textAlign","marginTop","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","selectIsInitialized","selectStatus","useStyles","makeStyles","theme","root","flexGrow","menuButton","spacing","App","classes","history","useHistory","handleLogout","AppBar","position","Toolbar","edge","aria-label","Typography","LinearProgress","Container","maxWidth","exact","path","render","from","top","width","CircularProgress","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.88a70d2c.chunk.js","sourcesContent":["import axios from 'axios'\r\nimport {RequestStatusType} from \"../app/appReducer\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'a409a2ec-60ad-4ff6-9051-8f6025edc2fd'\r\n    }\r\n})\r\n\r\n// tasks API\r\nexport const tasksAPI = {\r\n    getTasks(todolistId: string) {\r\n        return  instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return  instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: title})\r\n    },\r\n    deleteTask(taskId: string, todolistId: string) {\r\n        return  instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return  instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    }\r\n}\r\n// todolist API\r\nexport const todolistAPI = {\r\n    getTodolist() {\r\n        return  instance.get<Array<TodolistType>>(`todo-lists`)\r\n    },\r\n    createTodolist(title: string) {\r\n        return  instance.post<ResponseType<{item: TodolistType}>>(`todo-lists`, {title})\r\n    },\r\n    deleteTodolist(todolistId: string, ) {\r\n        return  instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return  instance.put<ResponseType>(`todo-lists/${todolistId}`, {title})\r\n    }\r\n}\r\n\r\n// auth API\r\nexport const authAPI = {\r\n    login(data: ParamsLoginType) {\r\n        return instance.post<ResponseType<{userId: number}>>(`auth/login`, data)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType<{}>>(`auth/login`)\r\n    },\r\n    auth() {\r\n        return instance.get<ResponseType<{id: number, email: string, login: string}>>(`auth/me`)\r\n    }\r\n}\r\n\r\n\r\n// types\r\nexport type ParamsLoginType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type TodolistType= {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\nexport type ResponseType<T = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: T\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n    entityStatus: RequestStatusType\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\nexport type PropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(({addItem, disabled = false}: PropsType) => {\r\n    let [error, setError] = useState<string | null>(null)\r\n    let [title, setTitle] = useState(\"\")\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title.trim());\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if(error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.key === 'Enter') {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField value={title}\r\n                   disabled={disabled}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   error={!!error}\r\n                   label={title}\r\n                   helperText={error}\r\n                   variant='outlined'\r\n                   className=''\r\n        />\r\n        <IconButton size='small' color='primary' onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})","import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\n\r\nexport type PropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo(({value, onChange, disabled = false}: PropsType) => {\r\n    const [editMode, setEditMode] = React.useState(false)\r\n    const [title, setTitle] = useState(value)\r\n\r\n    const activateEditMode = () => {\r\n        if(!disabled) {\r\n            setEditMode(true)\r\n            setTitle(value)\r\n        }\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        onChange(title)\r\n    }\r\n    const onChangeStatusHandler =(e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler =(e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            setEditMode(false)\r\n            onChange(title)\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode ?\r\n            <TextField variant='outlined' value={title} onChange={onChangeStatusHandler} onKeyPress={onKeyPressHandler} autoFocus onBlur={activateViewMode}/>\r\n            :\r\n            <span onDoubleClick={activateEditMode}>{title}</span>\r\n    )\r\n})","import {TodolistType} from \"../../api/API\"\r\nimport {RequestStatusType} from \"../../app/appReducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: Array<TodolistDomainType> = [\r\n    // {\r\n    //     id: '1',\r\n    //     addedDate: '',\r\n    //     order:0,\r\n    //     title: 'React',\r\n    //     filter: 'all' as FilterValuesType,\r\n    //     entityStatus: \"idle\" as RequestStatusType,\r\n    // },\r\n    // {\r\n    //     id: '2',\r\n    //     addedDate: '',\r\n    //     order:0,\r\n    //     title: 'React',\r\n    //     filter: 'all' as FilterValuesType,\r\n    //     entityStatus: \"idle\" as RequestStatusType,\r\n    // },\r\n]\r\n\r\nconst slice = createSlice({\r\n    name: 'todolist',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setTodolistsAC: (state, action: PayloadAction<{todos: Array<TodolistType>}>) => {\r\n            return action.payload.todos.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        },\r\n        addTodolistAC: (state, action: PayloadAction<{todo: TodolistType}>) => {\r\n            state.push({...action.payload.todo, filter: 'all', entityStatus: 'idle'})\r\n        },\r\n        removeTodolistAC: (state, action: PayloadAction<{todolistID: string}>) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todolistID)\r\n            if(index !== -1) state.splice(index, 1)\r\n        },\r\n        changeFilterAC: (state, action: PayloadAction<{filter: FilterValuesType, id: string}>) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTitleAC: (state, action: PayloadAction<{id: string, title: string}>) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].title = action.payload.title\r\n        },\r\n        changeTodolistEntityStatusAC: (state, action: PayloadAction<{id: string, entityStatus: RequestStatusType}>) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.entityStatus\r\n        },\r\n    }\r\n})\r\n\r\nexport const todolistReducer = slice.reducer\r\nexport const {setTodolistsAC,addTodolistAC,removeTodolistAC,changeFilterAC,changeTitleAC,changeTodolistEntityStatusAC}\r\n= slice.actions\r\n\r\n// types\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter:  FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}","import {TaskPriorities, tasksAPI, TaskStatuses, TaskType, TodolistType, UpdateTaskModelType} from \"../../api/API\";\r\nimport {\r\n    addTodolistAC,\r\n    removeTodolistAC,\r\n    setTodolistsAC,\r\n} from \"./todolistReducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, setAppStatusAC} from \"../../app/appReducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: TaskStateType = {\r\n    \"1\": [\r\n        {\r\n            id: \"1\", title: \"CSS\",\r\n            status: TaskStatuses.New, todoListId: 'todolistId1', description: '', startDate: '',\r\n            deadline: '', addedDate: '', order: 0,\r\n            priority: TaskPriorities.Low,\r\n            entityStatus: 'succeeded' as RequestStatusType,\r\n        },\r\n        {\r\n            id: \"2\", title: \"JS\",\r\n            status: TaskStatuses.Completed, todoListId: 'todolistId1', description: '', startDate: '',\r\n            deadline: '', addedDate: '', order: 0,\r\n            priority: TaskPriorities.Low,\r\n            entityStatus: 'succeeded' as RequestStatusType,\r\n        },\r\n        {\r\n            id: \"3\", title: \"REACT\",\r\n            status: TaskStatuses.New, todoListId: 'todolistId1', description: '', startDate: '',\r\n            deadline: '', addedDate: '', order: 0,\r\n            priority: TaskPriorities.Low,\r\n            entityStatus: 'succeeded' as RequestStatusType,\r\n        },\r\n    ],\r\n    \"2\": [\r\n        {\r\n            id: \"1\", title: \"book\",\r\n            status: TaskStatuses.New, todoListId: 'todolistId1', description: '', startDate: '',\r\n            deadline: '', addedDate: '', order: 0,\r\n            priority: TaskPriorities.Low,\r\n            entityStatus: 'succeeded' as RequestStatusType,\r\n        },\r\n        {\r\n            id: \"2\", title: \"book2\",\r\n            status: TaskStatuses.New, todoListId: 'todolistId1', description: '', startDate: '',\r\n            deadline: '', addedDate: '', order: 0,\r\n            priority: TaskPriorities.Low,\r\n            entityStatus: 'succeeded' as RequestStatusType,\r\n        },\r\n        {\r\n            id: \"3\", title: \"book3\",\r\n            status: TaskStatuses.New, todoListId: 'todolistId1', description: '', startDate: '',\r\n            deadline: '', addedDate: '', order: 0,\r\n            priority: TaskPriorities.Low,\r\n            entityStatus: 'succeeded' as RequestStatusType,\r\n        },\r\n\r\n    ]\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setTasksAC: (state, action: PayloadAction<SetTaskType>) => {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        },\r\n        addTaskAC: (state, action: PayloadAction<TaskType>) => {\r\n            state[action.payload.todoListId].unshift(action.payload)\r\n        },\r\n        removeTaskAC: (state, action: PayloadAction<RemoveTaskType>) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        },\r\n        updateTaskAC: (state, action: PayloadAction<UpdateTaskType>) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.model}\r\n            }\r\n        },\r\n        changeTaskEntityStatusAC: (state, action: PayloadAction<ChangeTaskEntityType>) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index].entityStatus = action.payload.entityStatus\r\n            }\r\n        }\r\n    },//\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistAC, (state, action) => {\r\n            state[action.payload.todo.id] = []\r\n        });\r\n        builder.addCase(removeTodolistAC, (state, action) => {\r\n            delete state[action.payload.todolistID]\r\n        });\r\n        builder.addCase(setTodolistsAC, (state, action) => {\r\n            action.payload.todos.forEach((tl) => {\r\n                state[tl.id] = []\r\n            })\r\n        })\r\n    }\r\n})\r\n\r\ntype ChangeTaskEntityType = { taskId: string, todolistId: string, entityStatus: RequestStatusType }\r\ntype UpdateTaskType = { taskId: string, model: UpdateDomainTaskModelType, todolistId: string }\r\ntype RemoveTaskType = { taskId: string, todolistId: string }\r\ntype SetTaskType = { tasks: Array<TaskType>, todolistId: string }\r\n\r\nexport const tasksReducer = slice.reducer\r\nexport const {setTasksAC,addTaskAC,removeTaskAC,updateTaskAC,changeTaskEntityStatusAC} = slice.actions\r\n\r\n\r\n\r\n// types\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\n// создаем тип, для универсальной санки с необязательными полями, для подстановки нужного поля в санку\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n    entityStatus?: RequestStatusType\r\n}","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    status: 'idle',\r\n    error: null as string | null,\r\n    isInitialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppStatusAC(state, action: PayloadAction<{status: RequestStatusType}>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppErrorAC(state, action: PayloadAction<{error: string | null}>) {\r\n            state.error = action.payload.error\r\n        },\r\n        setIsInitialized(state, action: PayloadAction<{value: boolean}>) {\r\n            state.isInitialized = action.payload.value\r\n        }\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\nexport const {setAppStatusAC,setAppErrorAC,setIsInitialized} = slice.actions\r\n\r\n// types\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\n","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'auth', // name of our reducer\r\n    initialState: initialState, // initialState\r\n    reducers: {\r\n        // Transfer to reducer our actions and put state and action to the parameters\r\n        // we need types actions and and use PayloadAction< {our value: type} >\r\n        setIsLoggedIn(state, action :PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    }\r\n})\r\nexport const authReducer = slice.reducer // assign our reducer to variable\r\nexport const {setIsLoggedIn} = slice.actions // get actionCreator from actions\r\n\r\n\r\n","import {tasksReducer} from '../features/Todolists/tasksReducer';\r\nimport {todolistReducer} from '../features/Todolists/todolistReducer';\r\nimport {combineReducers} from 'redux';\r\nimport thunk from 'redux-thunk'\r\nimport {appReducer} from \"./appReducer\";\r\nimport {authReducer} from \"../features/Auth/authReducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния (редюсера)\r\nexport const rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\n// export const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// create our store use configureStore\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunk),\r\n})\r\n\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент store.getSstate\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\ntype AppDispatchType = typeof store.dispatch\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()\r\n","import {ResponseType} from '../api/API'\r\nimport {setAppErrorAC, setAppStatusAC} from '../app/appReducer'\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: Dispatch) => {\r\n    dispatch(setAppErrorAC({error: error.message}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\n","import {authAPI, ParamsLoginType} from \"../../api/API\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setAppStatusAC} from \"../../app/appReducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {setIsLoggedIn} from \"./authReducer\";\r\n\r\nexport const loginTC = (data: ParamsLoginType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if(res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                dispatch(setIsLoggedIn({value: true}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        }).catch(err => {\r\n        handleServerNetworkError(err, dispatch)\r\n    })\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if(res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                dispatch(setIsLoggedIn({value: false}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        }).catch(err => {\r\n        handleServerNetworkError(err, dispatch)\r\n    })\r\n}\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {setAppStatusAC} from \"../../../app/appReducer\";\r\nimport {todolistAPI} from \"../../../api/API\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../../utils/error-utils\";\r\nimport {\r\n    addTodolistAC,\r\n    changeTitleAC,\r\n    changeTodolistEntityStatusAC,\r\n    removeTodolistAC,\r\n    setTodolistsAC,\r\n    changeFilterAC\r\n} from \"../todolistReducer\";\r\n\r\nexport {changeFilterAC}\r\n\r\nexport const fetchTodolistsTC = () =>\r\n    (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistAPI.getTodolist()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC({todos: res.data}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n            .catch(error => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n\r\n    }\r\n\r\n\r\nexport const addTodolistsTC = (title: string) => (dispatch: Dispatch) => {\r\n    try {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistAPI.createTodolist(title)//let result =  await todolistAPI.createTodolist(title) возвращает\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTodolistAC({todo: res.data.data.item}))\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n    } catch (e) {\r\n        throw new Error(e)\r\n    }\r\n}\r\n\r\nexport const deleteTodolistsTC = (todolistId: string) =>\r\n    (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        dispatch(changeTodolistEntityStatusAC({id: todolistId, entityStatus: 'loading'}))\r\n        todolistAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                if(res.data.resultCode === 0) {\r\n                    const action = removeTodolistAC({todolistID: todolistId})\r\n                    dispatch(action)\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                }else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n    }\r\n\r\nexport const updateTodolistTitleTC = (todolistId: string, title: string) =>\r\n    (dispatch: Dispatch) => {\r\n// так как мы обязаны на сервер отправить все св-ва, которые сервер ожидает, а не только\r\n// те, которые мы хотим обновить, соответственно нам нужно в этом месте взять таску целиком\r\n// чтобы у неё отобрать остальные св-ва\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        dispatch(changeTodolistEntityStatusAC({id: todolistId, entityStatus: 'loading'}))\r\n        todolistAPI.updateTodolist(todolistId, title)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = changeTitleAC({id: todolistId, title: title})\r\n                    dispatch(action)\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                    dispatch(changeTodolistEntityStatusAC({id: todolistId, entityStatus: 'succeeded'}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n    }","import {Dispatch} from \"redux\";\r\nimport {setAppStatusAC} from \"../../../app/appReducer\";\r\nimport {tasksAPI, UpdateTaskModelType} from \"../../../api/API\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../../utils/error-utils\";\r\nimport {AppRootStateType} from \"../../../app/store\";\r\nimport {\r\n    addTaskAC,\r\n    changeTaskEntityStatusAC,\r\n    removeTaskAC,\r\n    setTasksAC,\r\n    UpdateDomainTaskModelType,\r\n    updateTaskAC\r\n} from \"../tasksReducer\";\r\n\r\nexport const fetchTasksTC = (todolistId: string) =>\r\n    (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        tasksAPI.getTasks(todolistId)\r\n            .then(res => {\r\n                const tasks = res.data.items\r\n                const action = setTasksAC({tasks, todolistId})\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            }).catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n    }\r\n\r\nexport const removeTaskTC = (taskId: string, todolistId: string) =>\r\n    (dispatch: Dispatch) => {\r\n\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        dispatch(changeTaskEntityStatusAC({taskId, todolistId, entityStatus: 'loading'}))\r\n        tasksAPI.deleteTask(taskId, todolistId)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = removeTaskAC({taskId, todolistId})\r\n                    dispatch(action)\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n    }\r\n\r\nexport const addTaskTC = (title: string, todolistId: string) =>\r\n    (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        tasksAPI.createTask(todolistId, title)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = addTaskAC(res.data.data.item)\r\n                    dispatch(action)\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n\r\n    }\r\n\r\n// универсальная санка, которая помимо taskId и todolistId принимает необходимое поле для изменения status|title\r\nexport const updateTask = (taskId: string, todolistId: string, domainModel: UpdateDomainTaskModelType) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n// так как мы обязаны на сервер отправить все св-ва, которые сервер ожидает, а не только\r\n// те, которые мы хотим обновить, соответственно нам нужно в этом месте взять таску целиком\r\n// чтобы у неё отобрать остальные св-ва\r\n        const allTasksFromState = getState().tasks\r\n        const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n        const task = tasksForCurrentTodolist.find(t => t.id === taskId)\r\n        if (!task) {\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n        const apiModel: UpdateTaskModelType = {\r\n            title: task.title,\r\n            description: task.description,\r\n            status: task.status,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            deadline: task.deadline,\r\n            ...domainModel// перезатираем только то свойство, которое было передано в domainModel\r\n        }\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        dispatch(changeTaskEntityStatusAC({taskId, todolistId, entityStatus: 'loading'}))\r\n        tasksAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC({taskId,model: domainModel, todolistId})\r\n                    dispatch(action)\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                    dispatch(changeTaskEntityStatusAC({taskId, todolistId, entityStatus: 'succeeded'}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n\r\n    }\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/API\";\r\nimport {setIsLoggedIn} from \"../features/Auth/authReducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {setIsInitialized} from \"./appReducer\";\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.auth()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedIn({value: true}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n            dispatch(setIsInitialized({value: true}))\r\n        }).catch(error => {\r\n        handleServerNetworkError(error, dispatch)\r\n    })\r\n}\r\n","import * as AuthActionCreators from '../features/Auth/authActionCreators'\r\nimport * as TodoActionCreators from '../features/Todolists/actionCreators/todolistActionCreators'\r\nimport * as TaskActionCreators from '../features/Todolists/actionCreators/taskActionCreators'\r\nimport * as AppActionCreators from '../app/appActionCreators'\r\n\r\nexport default  {\r\n    ...AuthActionCreators,\r\n    ...TodoActionCreators,\r\n    ...TaskActionCreators,\r\n    ...AppActionCreators\r\n}","import {bindActionCreators} from \"redux\";\r\nimport {useAppDispatch} from \"../app/store\";\r\nimport ActionCreators from '../features/index'\r\nimport {useMemo} from \"react\";\r\n\r\nexport const useActions = () => {\r\n    const dispatch = useAppDispatch()\r\n\r\n    return useMemo(() => {\r\n        return bindActionCreators(ActionCreators,dispatch)\r\n    },[])\r\n}\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../../../Components/EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/API\";\r\nimport {useActions} from \"../../../../hooks/useActions\";\r\nimport style from './Task.module.scss'\r\n\r\nexport type PropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\n\r\nconst Task = React.memo(({todolistId, task}: PropsType) => {\r\n    const {removeTaskTC, updateTask} = useActions()\r\n\r\n    const removeTask = useCallback(() => {\r\n       removeTaskTC(task.id, todolistId)\r\n    },[task.id,todolistId])\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        updateTask(task.id,  todolistId, {status: e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New});\r\n    },[task.id,todolistId])\r\n\r\n    const changeTaskTitle = useCallback((title: string) => {\r\n        updateTask(task.id, todolistId, {title});\r\n    },[task.id,todolistId])\r\n\r\n    const statusLoading = task.entityStatus === 'loading'\r\n    return (\r\n        <div className={task.status === TaskStatuses.Completed ? style.task__wrapper + ' ' + style.is_done: style.task__wrapper}>\r\n            <div className={style.content}>\r\n                <Checkbox color='primary'\r\n                          onChange={onChangeHandler}\r\n                          checked={task.status === TaskStatuses.Completed}\r\n                          disabled={statusLoading}/>\r\n                <EditableSpan value={task.title} onChange={changeTaskTitle} disabled={statusLoading}/>\r\n            </div>\r\n            <IconButton onClick={removeTask} disabled={statusLoading}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Task","import {AppRootStateType} from \"../../app/store\";\r\n\r\nexport const selectIsLoggedIn = (state: AppRootStateType): boolean => state.auth.isLoggedIn","import React, {useCallback, useEffect} from 'react';\r\nimport {Button, IconButton} from '@material-ui/core';\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {AddItemForm} from \"../../../Components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../Components/EditableSpan/EditableSpan\";\r\nimport Task from \"./Task/Task\";\r\nimport { useSelector} from \"react-redux\";\r\nimport {\r\n    FilterValuesType,\r\n    TodolistDomainType,\r\n} from \"../todolistReducer\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/API\";\r\nimport {selectIsLoggedIn} from \"../../Auth/selectors\";\r\nimport {useActions} from \"../../../hooks/useActions\";\r\n\r\nimport style from './TodoList.module.scss'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    todolistId: string\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) =>  {\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n\r\n    const {fetchTasksTC, addTaskTC, updateTodolistTitleTC,deleteTodolistsTC,changeFilterAC} = useActions()\r\n\r\n    useEffect(() => {\r\n        if(!isLoggedIn) {\r\n            return\r\n        }\r\n        fetchTasksTC(props.todolistId)\r\n    },[])//no dependencies. runs only once when the component will render\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        addTaskTC(title.trim(), props.todolistId)\r\n    },[]);\r\n\r\n    const changeTodoListTitle = useCallback((newTitle: string) => {\r\n        updateTodolistTitleTC(props.todolistId, newTitle)\r\n    },[props.todolistId])\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, taskId: string) => {\r\n            changeFilterAC({filter: value,id: taskId});\r\n    },[])\r\n\r\n    const removeTodolist = useCallback((id: string) => {\r\n        deleteTodolistsTC(id)\r\n    },[])\r\n\r\n    const onAllClickHandler = useCallback(() => {\r\n        changeFilter(\"all\", props.todolistId)\r\n    },[]);\r\n    const onActiveClickHandler = useCallback(() => {\r\n        changeFilter(\"active\", props.todolistId)\r\n    },[]);\r\n    const onCompletedClickHandler = useCallback(() => {\r\n        changeFilter(\"completed\", props.todolistId)\r\n    },[])\r\n\r\n\r\n    let allTodoLists = props.tasks;\r\n    let tasksForTodolist = allTodoLists\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = allTodoLists.filter(t => t.status === TaskStatuses.New);\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodolist = allTodoLists.filter(t => t.status === TaskStatuses.Completed);\r\n    }\r\n\r\n    const task =  tasksForTodolist.map(t => {\r\n        return <Task key={t.id}\r\n                     task={t}\r\n                     todolistId={props.todolistId}\r\n        />\r\n    })\r\n\r\n    const statusLoading = props.todolist.entityStatus === 'loading'\r\n\r\n    return <div className={style.todo}>\r\n        <div className={style.title__wrapper}>\r\n            <EditableSpan value={props.title} onChange={changeTodoListTitle} disabled={statusLoading}/>\r\n            <IconButton onClick={() => removeTodolist(props.todolistId)} disabled={statusLoading}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>\r\n        <AddItemForm addItem={addTask} disabled={statusLoading}/>\r\n        <div>\r\n            {\r\n                task\r\n            }\r\n        </div>\r\n        <div className={style.btn__wrapper}>\r\n            <Button variant='outlined' color={props.filter === 'all' ? \"secondary\" : \"primary\"} size='small'\r\n                    onClick={onAllClickHandler}>All\r\n            </Button>\r\n            <Button variant='outlined' color={props.filter === 'active' ? \"secondary\" : \"primary\"} size='small'\r\n                    onClick={onActiveClickHandler}>Active\r\n            </Button>\r\n            <Button variant='outlined' color={props.filter === 'completed' ? \"secondary\" : \"primary\"} size='small'\r\n                    onClick={onCompletedClickHandler}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import {AppRootStateType} from  \"../../app/store\";\r\nimport {TodolistDomainType} from \"./todolistReducer\";\r\n\r\nexport const selectorTodolists = (state: AppRootStateType):Array<TodolistDomainType> => state.todolists","import {AppRootStateType} from \"../../../../app/store\";\r\nimport {TaskStateType} from \"../../tasksReducer\";\r\n\r\nexport const selectorTasks = (state: AppRootStateType):TaskStateType => state.tasks","import React, {useEffect} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"../../Components/AddItemForm/AddItemForm\";\r\nimport {Todolist} from \"./Todolist/TodoList\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {selectIsLoggedIn} from \"../Auth/selectors\";\r\nimport {selectorTodolists} from \"./selectors\";\r\nimport {selectorTasks} from \"./Todolist/Task/selector\";\r\nimport {useActions} from \"../../hooks/useActions\";\r\nimport style from './TotolistsList.module.scss'\r\n\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n    const todolists = useSelector(selectorTodolists)\r\n    const tasks = useSelector(selectorTasks);\r\n\r\n    const {fetchTodolistsTC, addTodolistsTC} = useActions()\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return\r\n        }\r\n        fetchTodolistsTC()\r\n    }, [])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n    return <>\r\n        <Grid container  style={{padding: '20px'}}\r\n              justify=\"center\"\r\n              alignItems=\"center\"\r\n              direction=\"column\">\r\n            <div style={{marginRight: '20px'}}>Add new task</div>\r\n            <AddItemForm addItem={addTodolistsTC}/>\r\n        </Grid>\r\n        <Grid container wrap={'nowrap'} style={{overflowY: 'auto', padding: '0  20px 300px'}}>\r\n            {todolists.map(t => {\r\n                let allTodoLists = tasks[t.id];\r\n                return (\r\n                    <Grid key={t.id} item style={{padding: '20px'}}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist key={t.id}\r\n                                      todolist={t}\r\n                                      title={t.title}\r\n                                      tasks={allTodoLists}\r\n                                      filter={t.filter}\r\n                                      todolistId={t.id}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                )\r\n            })}\r\n        </Grid>\r\n    </>\r\n}","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport { setAppErrorAC} from \"../../app/appReducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport default function ErrorSnackBar() {\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC({error: null}));\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={4000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from 'formik';\r\nimport {useSelector} from \"react-redux\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport {selectIsLoggedIn} from \"./selectors\";\r\nimport {useActions} from \"../../hooks/useActions\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n    const {loginTC} = useActions()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: 'free@samuraijs.com',\r\n            password: 'free',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'password must be more than 3 character';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            loginTC(values)\r\n            formik.resetForm()\r\n        },\r\n    });\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n    return <Grid container\r\n                 justify=\"center\">\r\n        <Grid item xs={10}>\r\n            <form onSubmit={formik.handleSubmit} style={{textAlign: 'center', marginTop: \"50px\"}}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email ?\r\n                            <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password ?\r\n                            <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import {AppRootStateType} from \"./store\";\r\n\r\nexport const selectIsInitialized = (state: AppRootStateType): boolean => state.app.isInitialized\r\nexport const selectStatus = (state: AppRootStateType): string => state.app.status","import React, {useCallback, useEffect} from 'react';\r\nimport './App.scss';\r\nimport {\r\n    AppBar,\r\n    Button, CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    makeStyles,\r\n    Toolbar,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport {TodolistsList} from \"../features/Todolists/TotolistsList\";\r\nimport {useSelector} from \"react-redux\";\r\nimport ErrorSnackBar from \"../Components/ErrorSnackBar/ErrorSnackBar\";\r\nimport {HashRouter, Redirect, Route, Switch, useHistory} from 'react-router-dom';\r\nimport {Login} from \"../features/Auth/Login\";\r\nimport {selectIsInitialized, selectStatus} from \"./selectors\";\r\nimport {selectIsLoggedIn } from '../features/Auth/selectors';\r\nimport {useActions} from \"../hooks/useActions\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n    const classes = useStyles();\r\n\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n    const isInitialized = useSelector(selectIsInitialized)\r\n    const status = useSelector(selectStatus)\r\n\r\n    const {logoutTC, initializeAppTC} = useActions()\r\n    const history = useHistory();\r\n\r\n    const handleLogout = useCallback(() => {\r\n      logoutTC()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        initializeAppTC()\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackBar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        My TODO\r\n                    </Typography>\r\n                    {\r\n                        !isLoggedIn ?\r\n                            <Button color=\"inherit\" onClick={() => history.push('/login')}>Login</Button> :\r\n                            <Button color=\"inherit\" onClick={handleLogout}>Log out</Button>\r\n                    }\r\n                </Toolbar>\r\n            </AppBar>\r\n            {status === 'loading' && <LinearProgress color={\"primary\"}/>}\r\n            <Container maxWidth={false} >\r\n                <HashRouter>\r\n                    <Switch>\r\n                        <Route exact path={'/'} render={() => <TodolistsList/>}/>\r\n                        <Route path={'/login'} render={() => <Login/>}/>\r\n                        <Route path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n                        <Redirect from={'*'} to={'/404'}/>\r\n                    </Switch>\r\n                </HashRouter>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './app/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\n\r\nReactDOM.render(\r\n        <Provider store={store} >\r\n            <App/>\r\n        </Provider>\r\n,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"is_done\":\"Task_is_done__j8oYL\",\"task__wrapper\":\"Task_task__wrapper__3yx0w\",\"content\":\"Task_content__2Dl_X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todo\":\"TodoList_todo__3km2V\",\"btn__wrapper\":\"TodoList_btn__wrapper__3Xdyv\",\"title__wrapper\":\"TodoList_title__wrapper__2EXQV\"};"],"sourceRoot":""}