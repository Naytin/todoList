{"version":3,"sources":["api/API.ts","Components/AddItemForm/AddItemForm.tsx","Components/EditableSpan/EditableSpan.tsx","utils/error-utils.ts","store/reducers/authReducer.ts","store/reducers/appReducer.ts","store/reducers/todolistReducer.ts","store/reducers/tasksReducer.ts","store/store.ts","store/actionCreators/index.ts","hooks/useActions.ts","features/Todolists/Todolist/Task/Task.tsx","hooks/useAppSelector.ts","features/Todolists/Todolist/TodoList.tsx","features/Todolists/TotolistsList.tsx","Components/ErrorSnackBar/ErrorSnackBar.tsx","features/Login/Login.tsx","app/App.tsx","reportWebVitals.ts","index.tsx","features/Todolists/Todolist/Task/Task.module.scss","features/Todolists/Todolist/TodoList.module.scss"],"names":["TaskStatuses","TaskPriorities","AddItemForm","React","memo","addItem","disabled","useState","error","setError","title","setTitle","addItemHandler","trim","TextField","value","onChange","e","currentTarget","onKeyPress","key","label","helperText","variant","className","IconButton","size","color","onClick","AddBox","EditableSpan","fontSize","editMode","setEditMode","autoFocus","onBlur","style","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","tasksAPI","todolistId","get","post","taskId","delete","model","put","todolistAPI","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","status","handleServerNetworkError","message","login","createAsyncThunk","a","rejectWithValue","res","resultCode","isLoggedIn","errors","fieldsErrors","undefined","logout","arg","asyncActions","slice","createSlice","name","initialState","reducers","setIsLoggedIn","state","action","payload","extraReducers","builder","addCase","fulfilled","authReducer","reducer","actions","initializeApp","isInitialized","appReducer","fetchTodolists","todos","addTodolists","todo","item","removeTodolist","updateTodolistTitle","param","changeFilterAC","index","findIndex","tl","id","filter","changeTodolistEntityStatusAC","entityStatus","map","push","splice","todolistReducer","fetchTasks","tasks","items","addTask","task","removeTask","updateTask","getState","tasksForCurrentTodolist","find","t","apiModel","description","priority","startDate","deadline","domainModel","tasksReducer","forEach","todoListId","unshift","rootReducer","combineReducers","todolists","app","auth","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","window","appAsyncActions","authAsyncActions","taskAsyncActions","todolistAsyncActions","useActions","useDispatch","bindActionCreators","ActionCreators","Task","removeTaskHandler","useCallback","onChangeHandler","checked","Completed","New","changeTaskTitle","statusLoading","task__wrapper","is_done","content","Checkbox","Delete","useAppSelector","useSelector","Todolist","props","isLogged","useEffect","addTaskHandler","changeTodoListTitle","changeFilter","removeTodolistHandler","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","allTodoLists","tasksForTodolist","todolist","title__wrapper","btn__wrapper","Button","TodolistsList","addTodoList","Grid","container","padding","justify","alignItems","direction","marginRight","wrap","overflowY","Paper","to","Alert","elevation","ErrorSnackBar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","test","onSubmit","formikHelpers","rejected","match","setFieldError","field","xs","handleSubmit","textAlign","marginTop","FormControl","FormLabel","href","target","rel","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","useStyles","makeStyles","theme","root","flexGrow","menuButton","spacing","App","classes","history","useHistory","handleLogout","AppBar","position","Toolbar","edge","aria-label","Typography","LinearProgress","Container","fixed","exact","path","render","from","top","width","CircularProgress","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.4b46f744.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'a409a2ec-60ad-4ff6-9051-8f6025edc2fd'\r\n        // 'API-KEY': 'd700f3f2-767b-4068-ac9d-6d0dcd5ff82d' // test account\r\n    }\r\n})\r\n\r\n// tasks API\r\nexport const tasksAPI = {\r\n    getTasks(todolistId: string) {\r\n        return  instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return  instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: title})\r\n    },\r\n    deleteTask(taskId: string, todolistId: string) {\r\n        return  instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return  instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    }\r\n}\r\n// todolist API\r\nexport const todolistAPI = {\r\n    getTodolist() {\r\n        return  instance.get<Array<TodolistType>>(`todo-lists`)\r\n    },\r\n    createTodolist(title: string) {\r\n        return  instance.post<ResponseType<{item: TodolistType}>>(`todo-lists`, {title})\r\n    },\r\n    deleteTodolist(todolistId: string, ) {\r\n        return  instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return  instance.put<ResponseType>(`todo-lists/${todolistId}`, {title})\r\n    }\r\n}\r\n\r\n// auth API\r\nexport const authAPI = {\r\n    login(data: ParamsLoginType) {\r\n        return instance.post<ResponseType<{userId: number}>>(`auth/login`, data)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType<{}>>(`auth/login`)\r\n    },\r\n    auth() {\r\n        return instance.get<ResponseType<{id: number, email: string, login: string}>>(`auth/me`)\r\n    }\r\n}\r\n\r\n\r\n// types\r\nexport type ParamsLoginType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type TodolistType= {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\nexport type FieldError = {\r\n    field: string\r\n    error: string\r\n}\r\nexport type ResponseType<T = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors?: Array<FieldError>\r\n    data: T\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\nexport type PropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(({addItem, disabled = false}: PropsType) => {\r\n    let [error, setError] = useState<string | null>(null)\r\n    let [title, setTitle] = useState(\"\")\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title.trim());\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if(error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.key === 'Enter') {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField value={title}\r\n                   disabled={disabled}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   error={!!error}\r\n                   label={title}\r\n                   helperText={error}\r\n                   variant='outlined'\r\n                   className=''\r\n        />\r\n        <IconButton size='small' color='primary' onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})","import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\n\r\nexport type PropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n    disabled?: boolean\r\n    fontSize?: string\r\n}\r\n\r\nexport const EditableSpan = React.memo(({value, onChange, disabled = false, fontSize}: PropsType) => {\r\n    const [editMode, setEditMode] = React.useState(false)\r\n    const [title, setTitle] = useState(value)\r\n\r\n    const activateEditMode = () => {\r\n        if(!disabled) {\r\n            setEditMode(true)\r\n            setTitle(value)\r\n        }\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        onChange(title)\r\n    }\r\n    const onChangeStatusHandler =(e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler =(e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            setEditMode(false)\r\n            onChange(title)\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode ?\r\n            <TextField variant='outlined' value={title} onChange={onChangeStatusHandler} onKeyPress={onKeyPressHandler} autoFocus onBlur={activateViewMode}/>\r\n            :\r\n            <span style={{fontSize: fontSize}} onDoubleClick={activateEditMode}>{title}</span>\r\n    )\r\n})","import {ResponseType} from '../api/API'\r\nimport {setAppErrorAC, setAppStatusAC} from '../store/reducers/appReducer'\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: Dispatch) => {\r\n    dispatch(setAppErrorAC({error: error.message}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\n","import {setAppStatusAC} from './appReducer'\r\nimport {authAPI, FieldError, ParamsLoginType} from \"../../api/API\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {AxiosError} from \"axios\";\r\n\r\n\r\nexport const login = createAsyncThunk<\r\n    {isLoggedIn: boolean},ParamsLoginType, {\r\n    rejectValue: {errors: Array<string>, fieldsErrors?: Array<FieldError>}\r\n}\r\n    >('auth/login',\r\n    async (data,{dispatch, rejectWithValue}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.login(data)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return {isLoggedIn: true}\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            return rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\r\n        }\r\n    } catch (err) {\r\n        const error: AxiosError = err\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n    }\r\n})\r\nexport const logout = createAsyncThunk('auth/logout', async (arg, {dispatch, rejectWithValue}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n           return {isLoggedIn: false}\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n\r\n        }\r\n    } catch (err) {\r\n        handleServerNetworkError(err, dispatch)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    login,\r\n    logout\r\n}\r\n\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'auth', // name of our reducer\r\n    initialState: initialState, // initialState\r\n    reducers: {\r\n        // Transfer to reducer our actions and put state and action to the parameters\r\n        // we need types actions and and use PayloadAction< {our value: type} >\r\n        setIsLoggedIn(state, action: PayloadAction<{ isLoggedIn: boolean }>) {\r\n            state.isLoggedIn = action.payload.isLoggedIn\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(login.fulfilled, (state, action) => {\r\n            if (action.payload) {\r\n                state.isLoggedIn = action.payload.isLoggedIn\r\n            }\r\n        });\r\n        builder.addCase(logout.fulfilled, (state, action) => {\r\n            if (action.payload) {\r\n                state.isLoggedIn = action.payload.isLoggedIn\r\n            }\r\n        })\r\n    }\r\n})\r\nexport const authReducer = slice.reducer // assign our reducer to variable\r\nexport const {setIsLoggedIn} = slice.actions // get actionCreator from actions\r\n","import {authAPI} from \"../../api/API\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {setIsLoggedIn} from \"./authReducer\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    status: 'idle',\r\n    error: null as string | null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const initializeApp = createAsyncThunk('app/initializeApp',\r\n    async (arg, {dispatch}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.auth()\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedIn({isLoggedIn: true}))\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (err) {\r\n        handleServerNetworkError(err, dispatch)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    initializeApp\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppErrorAC(state, action: PayloadAction<{ error: string | null }>) {\r\n            state.error = action.payload.error\r\n        },\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(initializeApp.fulfilled, (state, action) => {\r\n            state.isInitialized = true\r\n        })\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\nexport const {setAppStatusAC, setAppErrorAC} = slice.actions\r\n\r\n// types\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\n","import {todolistAPI} from \"../../api/API\";\r\nimport {TodolistType} from \"../../api/API\"\r\nimport {\r\n    RequestStatusType,\r\n    setAppStatusAC,\r\n} from \"./appReducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n// thunks\r\nexport const fetchTodolists = createAsyncThunk('todolists/fetchTodolists',\r\n    async (arg, {\r\n        dispatch, rejectWithValue\r\n    }) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        try {\r\n            const res = await todolistAPI.getTodolist()\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return {todos: res.data}\r\n        } catch (err) {\r\n            handleServerNetworkError(err, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    })\r\n\r\nexport const addTodolists = createAsyncThunk('todolists/addTodolist',\r\n    async (title: string, {dispatch, rejectWithValue}) => {\r\n        try {\r\n            dispatch(setAppStatusAC({status: 'loading'}))\r\n            const res = await todolistAPI.createTodolist(title)\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                return {todo: res.data.data.item}\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n                return rejectWithValue(null)\r\n            }\r\n        } catch (err) {\r\n            handleServerNetworkError(err, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    })\r\n\r\nexport const removeTodolist = createAsyncThunk('todolists/removeTodolist',\r\n    async (todolistId: string, {dispatch, rejectWithValue}) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        try {\r\n            const res = await todolistAPI.deleteTodolist(todolistId)\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                return {todolistId}\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n                return rejectWithValue(null)\r\n            }\r\n        } catch (err) {\r\n            handleServerNetworkError(err, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    })\r\n\r\n\r\nexport const updateTodolistTitle = createAsyncThunk('todolists/updateTodolist',\r\n    async (param:{todolistId: string, title: string}, {dispatch, rejectWithValue}) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        try {\r\n            const res = await todolistAPI.updateTodolist(param.todolistId, param.title)\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                return {todolistId: param.todolistId,  title: param.title}\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n                return rejectWithValue(null)\r\n            }\r\n        }catch (err) {\r\n            handleServerNetworkError(err, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n})\r\n\r\nexport const asyncActions = {\r\n    fetchTodolists,\r\n    addTodolists,\r\n    removeTodolist,\r\n    updateTodolistTitle\r\n}\r\n\r\n\r\nconst initialState: Array<TodolistDomainType> = [\r\n    // {\r\n    //     id: '1',\r\n    //     addedDate: '',\r\n    //     order:0,\r\n    //     title: 'React',\r\n    //     filter: 'all' as FilterValuesType,\r\n    //     entityStatus: \"idle\" as RequestStatusType,\r\n    // },\r\n    // {\r\n    //     id: '2',\r\n    //     addedDate: '',\r\n    //     order:0,\r\n    //     title: 'React',\r\n    //     filter: 'all' as FilterValuesType,\r\n    //     entityStatus: \"idle\" as RequestStatusType,\r\n    // },\r\n]\r\n\r\nconst slice = createSlice({\r\n    name: 'todolist',\r\n    initialState: initialState,\r\n    reducers: {\r\n        changeFilterAC: (state, action: PayloadAction<{ filter: FilterValuesType, id: string }>) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatusAC: (state, action: PayloadAction<{ id: string, entityStatus: RequestStatusType }>) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.entityStatus\r\n        },\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(fetchTodolists.fulfilled, (state, action) => {\r\n            return action.payload.todos.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        });\r\n        builder.addCase(addTodolists.fulfilled, (state, action) => {\r\n            state.push({...action.payload.todo, filter: 'all', entityStatus: 'idle'})\r\n        });\r\n        builder.addCase(removeTodolist.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n            if (index !== -1) state.splice(index, 1)\r\n        });\r\n        builder.addCase(updateTodolistTitle.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n            state[index].title = action.payload.title\r\n        });\r\n\r\n    }\r\n})\r\n\r\nexport const todolistReducer = slice.reducer\r\nexport const {\r\n    changeFilterAC,\r\n    changeTodolistEntityStatusAC\r\n} = slice.actions\r\n\r\n// types\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}","import {TaskPriorities, tasksAPI, TaskStatuses, TaskType, TodolistType, UpdateTaskModelType} from \"../../api/API\";\r\nimport {\r\n    addTodolists,\r\n    fetchTodolists,\r\n    removeTodolist,\r\n} from \"./todolistReducer\";\r\nimport {AppRootStateType} from \"../store\";\r\nimport { setAppStatusAC} from \"./appReducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\n\r\n\r\nexport const fetchTasks = createAsyncThunk('tasks/fetchTasks',\r\n    async (todolistId: string, {dispatch, rejectWithValue}) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        try {\r\n            const res = await tasksAPI.getTasks(todolistId)\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            const tasks = res.data.items\r\n            return {tasks, todolistId}\r\n        } catch (err) {\r\n            handleServerNetworkError(err, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    })\r\n\r\nexport const addTask = createAsyncThunk('tasks/addTask',\r\n    async (param: { title: string, todolistId: string }, {dispatch, rejectWithValue}) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        try {\r\n            const res = await tasksAPI.createTask(param.todolistId, param.title)\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                return {task: res.data.data.item}\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n                return rejectWithValue(null)\r\n            }\r\n        } catch (err) {\r\n            handleServerNetworkError(err, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n\r\n    })\r\n\r\nexport const removeTask = createAsyncThunk('tasks/removeTask',\r\n    async (param: { taskId: string, todolistId: string }, {dispatch, rejectWithValue}) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        // thunkAPI.dispatch(changeTaskEntityStatusAC({param.taskId, param.todolistId, entityStatus: 'loading'}))\r\n        try {\r\n            const res = await tasksAPI.deleteTask(param.taskId, param.todolistId)\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                return {taskId: param.taskId, todolistId: param.todolistId}\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n                return rejectWithValue(null)\r\n            }\r\n        } catch (err) {\r\n            handleServerNetworkError(err, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    })\r\n\r\n\r\n//универсальная санка, которая помимо taskId и todolistId принимает необходимое поле для изменения status|title\r\nexport const updateTask = createAsyncThunk('tasks/updateTasks',\r\n    async (param: { taskId: string, todolistId: string, domainModel: UpdateDomainTaskModelType },\r\n           {dispatch, rejectWithValue, getState}) => {\r\n // так как мы обязаны на сервер отправить все св-ва, которые сервер ожидает, а не только\r\n// те, которые мы хотим обновить, соответственно нам нужно в этом месте взять таску целиком\r\n// чтобы у неё отобрать остальные св-ва\r\n        const state = getState() as AppRootStateType\r\n        const tasksForCurrentTodolist = state.tasks[param.todolistId]\r\n        const task = tasksForCurrentTodolist.find(t => t.id === param.taskId)\r\n        if (!task) {\r\n            return rejectWithValue('task not found in the state')\r\n        }\r\n        const apiModel: UpdateTaskModelType = {\r\n            title: task.title,\r\n            description: task.description,\r\n            status: task.status,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            deadline: task.deadline,\r\n            ...param.domainModel// перезатираем только то свойство, которое было передано в domainModel\r\n        }\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        const res = await tasksAPI.updateTask(param.todolistId, param.taskId, apiModel)\r\n        try {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                return param\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n                return rejectWithValue(null)\r\n            }\r\n        } catch (err) {\r\n            handleServerNetworkError(err, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n})\r\n\r\nexport const asyncActions = {\r\n    fetchTasks,\r\n    addTask,\r\n    removeTask,\r\n    updateTask\r\n}\r\n\r\n\r\nconst initialState: TaskStateType = {\r\n    // \"1\": [\r\n    //     {\r\n    //         id: \"1\", title: \"CSS\",\r\n    //         status: TaskStatuses.New, todoListId: 'todolistId1', description: '', startDate: '',\r\n    //         deadline: '', addedDate: '', order: 0,\r\n    //         priority: TaskPriorities.Low,\r\n    //         entityStatus: 'succeeded' as RequestStatusType,\r\n    //     },\r\n    //     {\r\n    //         id: \"2\", title: \"JS\",\r\n    //         status: TaskStatuses.Completed, todoListId: 'todolistId1', description: '', startDate: '',\r\n    //         deadline: '', addedDate: '', order: 0,\r\n    //         priority: TaskPriorities.Low,\r\n    //         entityStatus: 'succeeded' as RequestStatusType,\r\n    //     },\r\n    //     {\r\n    //         id: \"3\", title: \"REACT\",\r\n    //         status: TaskStatuses.New, todoListId: 'todolistId1', description: '', startDate: '',\r\n    //         deadline: '', addedDate: '', order: 0,\r\n    //         priority: TaskPriorities.Low,\r\n    //         entityStatus: 'succeeded' as RequestStatusType,\r\n    //     },\r\n    // ],\r\n    // \"2\": [\r\n    //     {\r\n    //         id: \"1\", title: \"book\",\r\n    //         status: TaskStatuses.New, todoListId: 'todolistId1', description: '', startDate: '',\r\n    //         deadline: '', addedDate: '', order: 0,\r\n    //         priority: TaskPriorities.Low,\r\n    //         entityStatus: 'succeeded' as RequestStatusType,\r\n    //     },\r\n    //     {\r\n    //         id: \"2\", title: \"book2\",\r\n    //         status: TaskStatuses.New, todoListId: 'todolistId1', description: '', startDate: '',\r\n    //         deadline: '', addedDate: '', order: 0,\r\n    //         priority: TaskPriorities.Low,\r\n    //         entityStatus: 'succeeded' as RequestStatusType,\r\n    //     },\r\n    //     {\r\n    //         id: \"3\", title: \"book3\",\r\n    //         status: TaskStatuses.New, todoListId: 'todolistId1', description: '', startDate: '',\r\n    //         deadline: '', addedDate: '', order: 0,\r\n    //         priority: TaskPriorities.Low,\r\n    //         entityStatus: 'succeeded' as RequestStatusType,\r\n    //     },\r\n    //\r\n    // ]\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: initialState,\r\n    reducers: {\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolists.fulfilled, (state, action) => {\r\n            state[action.payload.todo.id] = []\r\n        });\r\n        builder.addCase(removeTodolist.fulfilled, (state, action) => {\r\n            delete state[action.payload.todolistId]\r\n        });\r\n        builder.addCase(fetchTodolists.fulfilled, (state, action) => {\r\n            action.payload.todos.forEach((tl) => {\r\n                state[tl.id] = []\r\n            })\r\n        });\r\n        builder.addCase(fetchTasks.fulfilled, (state, action) => {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        });\r\n        builder.addCase(addTask.fulfilled, (state, action) => {\r\n            state[action.payload.task.todoListId].unshift(action.payload.task)\r\n        });\r\n        builder.addCase(removeTask.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        });\r\n        builder.addCase(updateTask.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.domainModel}\r\n            }\r\n        })\r\n    }\r\n})\r\n\r\nexport const tasksReducer = slice.reducer\r\n\r\n// types\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n// создаем тип, для универсальной санки с необязательными полями, для подстановки нужного поля в санку\r\ntype UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n}","import {tasksReducer} from './reducers/tasksReducer';\r\nimport {todolistReducer} from './reducers/todolistReducer';\r\nimport {combineReducers} from 'redux';\r\nimport thunk from 'redux-thunk'\r\nimport {appReducer} from \"./reducers/appReducer\";\r\nimport {authReducer} from \"./reducers/authReducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния (редюсера)\r\nexport const rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\n// export const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// create our store use configureStore\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunk),\r\n})\r\n\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент store.getSstate\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\ntype AppDispatchType = typeof store.dispatch\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()","import {asyncActions as appAsyncActions} from '../reducers/appReducer'\r\nimport {asyncActions as authAsyncActions} from '../reducers/authReducer'\r\nimport {asyncActions as taskAsyncActions} from '../reducers/tasksReducer'\r\nimport {asyncActions as todolistAsyncActions} from '../reducers/todolistReducer'\r\n\r\nexport default {\r\n    ...appAsyncActions,\r\n    ...authAsyncActions,\r\n    ...taskAsyncActions,\r\n    ...todolistAsyncActions\r\n}","import {bindActionCreators} from \"redux\";\r\nimport {useAppDispatch} from \"../store/store\";\r\nimport ActionCreators from '../store/actionCreators'\r\n\r\n// создаем hook, который связывает все actions creators с диспатчем\r\n// нам больше не понядобиться использование диспатча в комоненте, просто будем вызывать функцию\r\nexport const useActions = () => {\r\n    const dispatch = useAppDispatch()\r\n    return bindActionCreators(ActionCreators,dispatch)\r\n}","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../../../Components/EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/API\";\r\nimport style from './Task.module.scss'\r\nimport {useActions} from \"../../../../hooks/useActions\";\r\n\r\nexport type PropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    status:  string\r\n}\r\n\r\nconst Task = React.memo(({todolistId, task, status}: PropsType) => {\r\n    const {removeTask, updateTask} = useActions()\r\n\r\n    const removeTaskHandler = useCallback(() => {\r\n        removeTask({taskId: task.id, todolistId})\r\n    },[task.id,todolistId])\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let status = e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New\r\n        updateTask({taskId: task.id, todolistId, domainModel: {status}});\r\n    },[task.id,todolistId])\r\n\r\n    const changeTaskTitle = useCallback((title: string) => {\r\n        updateTask({taskId: task.id, todolistId, domainModel: {title}});\r\n    },[task.id,todolistId])\r\n\r\n    const statusLoading = status === 'loading'\r\n    return (\r\n        <div className={task.status === TaskStatuses.Completed ? style.task__wrapper + ' ' + style.is_done: style.task__wrapper}>\r\n            <div className={style.content}>\r\n                <Checkbox color='primary'\r\n                          onChange={onChangeHandler}\r\n                          checked={task.status === TaskStatuses.Completed}\r\n                          disabled={statusLoading}/>\r\n                <EditableSpan value={task.title} onChange={changeTaskTitle} disabled={statusLoading}/>\r\n            </div>\r\n            <IconButton onClick={removeTaskHandler} disabled={statusLoading}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Task","import {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../store/store\";\r\n\r\n// create a hook, that works with a typed useSelector\r\n// use TypedUseSelectorHook - Pass state types to useSelector\r\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport {Button, IconButton} from '@material-ui/core';\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {AddItemForm} from \"../../../Components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../Components/EditableSpan/EditableSpan\";\r\nimport Task from \"./Task/Task\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {\r\n    changeFilterAC,\r\n    FilterValuesType,\r\n    TodolistDomainType,\r\n} from \"../../../store/reducers/todolistReducer\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/API\";\r\nimport style from './TodoList.module.scss'\r\nimport {useAppSelector} from \"../../../hooks/useAppSelector\";\r\nimport {useActions} from \"../../../hooks/useActions\";\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    todolistId: string\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) =>  {\r\n    const isLogged = useAppSelector(state => state.auth.isLoggedIn)\r\n    const status = useAppSelector(state => state.app.status)\r\n    const {fetchTasks,addTask,updateTodolistTitle, removeTodolist} = useActions()\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if(!isLogged) {\r\n            return\r\n        }\r\n        fetchTasks(props.todolistId)\r\n    },[])//no dependencies. runs only once when the component will render\r\n\r\n    const addTaskHandler = useCallback((title: string) => {\r\n        addTask({title: title.trim(), todolistId: props.todolistId})\r\n    },[]);\r\n\r\n    const changeTodoListTitle = useCallback((title: string) => {\r\n        updateTodolistTitle({todolistId: props.todolistId, title})\r\n    },[ props.todolistId])\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, taskId: string) => {\r\n        dispatch(changeFilterAC({filter: value,id: taskId}));\r\n    },[dispatch])\r\n\r\n    const removeTodolistHandler = useCallback((id: string) => {\r\n        removeTodolist(id)\r\n    },[])\r\n\r\n    const onAllClickHandler = useCallback(() => {\r\n        changeFilter(\"all\", props.todolistId)\r\n    },[]);\r\n    const onActiveClickHandler = useCallback(() => {\r\n        changeFilter(\"active\", props.todolistId)\r\n    },[]);\r\n    const onCompletedClickHandler = useCallback(() => {\r\n        changeFilter(\"completed\", props.todolistId)\r\n    },[])\r\n\r\n\r\n    let allTodoLists = props.tasks;\r\n    let tasksForTodolist = allTodoLists\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = allTodoLists.filter(t => t.status === TaskStatuses.New);\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodolist = allTodoLists.filter(t => t.status === TaskStatuses.Completed);\r\n    }\r\n\r\n    const task =  tasksForTodolist.map(t => {\r\n        return <Task key={t.id}\r\n                     task={t}\r\n                     todolistId={props.todolistId}\r\n                     status={status}\r\n        />\r\n    })\r\n\r\n    const statusLoading = props.todolist.entityStatus === 'loading'\r\n\r\n    return <div className={style.todo}>\r\n        <div className={style.title__wrapper}>\r\n            <EditableSpan fontSize={'20px'}  value={props.title} onChange={changeTodoListTitle} disabled={statusLoading}/>\r\n            <IconButton onClick={() => removeTodolistHandler(props.todolistId)} disabled={statusLoading}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>\r\n        <AddItemForm addItem={addTaskHandler} disabled={statusLoading}/>\r\n        <div>\r\n            {\r\n                task.length ? task : <span>No tasks - create your first task</span>\r\n            }\r\n        </div>\r\n        <div className={style.btn__wrapper}>\r\n            <Button variant='outlined' color={props.filter === 'all' ? \"secondary\" : \"primary\"} size='small'\r\n                    onClick={onAllClickHandler}>All\r\n            </Button>\r\n            <Button variant='outlined' color={props.filter === 'active' ? \"secondary\" : \"primary\"} size='small'\r\n                    onClick={onActiveClickHandler}>Active\r\n            </Button>\r\n            <Button variant='outlined' color={props.filter === 'completed' ? \"secondary\" : \"primary\"} size='small'\r\n                    onClick={onCompletedClickHandler}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"../../Components/AddItemForm/AddItemForm\";\r\nimport {Todolist} from \"./Todolist/TodoList\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {useAppSelector} from \"../../hooks/useAppSelector\";\r\nimport {useActions} from \"../../hooks/useActions\";\r\n\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n    const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn)\r\n    const todolists = useAppSelector(state => state.todolists)\r\n    const tasks = useAppSelector(state => state.tasks);\r\n    const {fetchTodolists, addTodolists} = useActions()\r\n\r\n    useEffect(() => {\r\n        if(!isLoggedIn) {\r\n            return\r\n        }\r\n        fetchTodolists()\r\n    }, [])\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        addTodolists(title)\r\n    }, [])\r\n\r\n    if(!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n    return <>\r\n        <Grid container  style={{padding: '20px'}}\r\n              justify=\"center\"\r\n              alignItems=\"center\"\r\n              direction=\"column\">\r\n            <div style={{marginRight: '20px'}}>Add new task</div>\r\n            <AddItemForm addItem={addTodoList}/>\r\n        </Grid>\r\n        <Grid container wrap={'nowrap'} style={{overflowY: 'auto', padding: '0  20px 200px'}}>\r\n            {todolists.map(t => {\r\n                let allTodoLists = tasks[t.id];\r\n                return (\r\n                    <Grid key={t.id} item style={{padding: '20px'}}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist key={t.id}\r\n                                      todolist={t}\r\n                                      title={t.title}\r\n                                      tasks={allTodoLists}\r\n                                      filter={t.filter}\r\n                                      todolistId={t.id}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                )\r\n            })}\r\n        </Grid>\r\n    </>\r\n}","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport { setAppErrorAC} from \"../../store/reducers/appReducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport default function ErrorSnackBar() {\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC({error: null}));\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={4000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {FormikHelpers, useFormik} from 'formik';\r\nimport {useAppDispatch} from \"../../store/store\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport {useAppSelector} from \"../../hooks/useAppSelector\";\r\nimport {useActions} from \"../../hooks/useActions\";\r\n\r\ntype FormikValueType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\n\r\nexport const Login = () => {\r\n    const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn)\r\n    const {login} = useActions()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: 'nikitinasv12@gmail.com',\r\n            password: '123456',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikValueType = {} as FormikValueType;\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'password must be more than 3 character';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: async (values: FormikValueType, formikHelpers: FormikHelpers<FormikValueType>) => {\r\n\r\n            let action = await login(values);\r\n            //@ts-ignore\r\n            if (login.rejected.match(action)) {\r\n                if (action.payload?.fieldsErrors?.length) {\r\n                    const error = action.payload?.fieldsErrors[0]\r\n                    formikHelpers.setFieldError(error.field, error.error)\r\n                }\r\n\r\n            }\r\n        },\r\n    });\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n    return <Grid container\r\n                 justify=\"center\">\r\n        <Grid item xs={10}>\r\n            <form onSubmit={formik.handleSubmit} style={{textAlign: 'center', marginTop: \"50px\"}}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}\r\n                               rel='noreferrer'>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use test account credentials:</p>\r\n                        <p>Email: nikitinasv12@gmail.com</p>\r\n                        <p>Password: 123456</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email ?\r\n                            <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password ?\r\n                            <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport './App.scss';\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    makeStyles,\r\n    Toolbar,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport {TodolistsList} from \"../features/Todolists/TotolistsList\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport ErrorSnackBar from \"../Components/ErrorSnackBar/ErrorSnackBar\";\r\nimport {HashRouter, Redirect, Route, Switch, useHistory} from 'react-router-dom';\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {useAppSelector} from \"../hooks/useAppSelector\";\r\nimport {useActions} from \"../hooks/useActions\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\nfunction App() {\r\n    const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn)\r\n    const isInitialized = useAppSelector(state => state.app.isInitialized)\r\n    const status = useAppSelector(state => state.app.status)\r\n    const {logout, initializeApp} = useActions()\r\n    const classes = useStyles();\r\n    let history = useHistory();\r\n\r\n    const handleLogout = useCallback(() => {\r\n       logout()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        initializeApp()\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackBar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        My TODO\r\n                    </Typography>\r\n                    {\r\n                        !isLoggedIn ?\r\n                            <Button color=\"inherit\" onClick={() => history.push('/login')}>Login</Button> :\r\n                            <Button color=\"inherit\" onClick={handleLogout}>Log out</Button>\r\n                    }\r\n                </Toolbar>\r\n            </AppBar>\r\n            {status === 'loading' && <LinearProgress color={\"primary\"}/>}\r\n            <Container fixed>\r\n                <HashRouter>\r\n                    <Switch>\r\n                        <Route exact path={'/'} render={() => <TodolistsList/>}/>\r\n                        <Route path={'/login'} render={() => <Login/>}/>\r\n                        <Route path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n                        <Redirect from={'*'} to={'/404'}/>\r\n                    </Switch>\r\n                </HashRouter>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './app/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./store/store\";\r\n\r\nReactDOM.render(\r\n        <Provider store={store} >\r\n            <App/>\r\n        </Provider>\r\n,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"is_done\":\"Task_is_done__j8oYL\",\"task__wrapper\":\"Task_task__wrapper__3yx0w\",\"content\":\"Task_content__2Dl_X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todo\":\"TodoList_todo__3km2V\",\"btn__wrapper\":\"TodoList_btn__wrapper__3Xdyv\",\"title__wrapper\":\"TodoList_title__wrapper__2EXQV\"};"],"sourceRoot":""}