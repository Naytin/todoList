{"version":3,"sources":["api/API.ts","utils/error-utils.ts","features/Login/authReducer.ts","app/appReducer.ts","features/Todolists/todolistReducer.ts","Components/AddItemForm/AddItemForm.tsx","Components/EditableSpan/EditableSpan.tsx","features/Todolists/tasksReducer.ts","features/Todolists/Todolist/Task/Task.tsx","features/Todolists/Todolist/TodoList.tsx","features/Todolists/TotolistsList.tsx","Components/ErrorSnackBar/ErrorSnackBar.tsx","features/Login/Login.tsx","app/App.tsx","reportWebVitals.ts","app/store.ts","index.tsx","features/Todolists/Todolist/Task/Task.module.scss","features/Todolists/Todolist/TodoList.module.scss"],"names":["TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","tasksAPI","todolistId","get","title","post","taskId","delete","model","put","todolistAPI","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","loginTC","createAsyncThunk","a","res","resultCode","isLoggedIn","logoutTC","arg","slice","createSlice","name","initialState","reducers","setIsLoggedIn","state","action","payload","extraReducers","builder","addCase","fulfilled","authReducer","reducer","actions","initializeAppTC","isInitialized","appReducer","fetchTodolistsTC","rejectWithValue","todos","addTodolistsTC","todo","item","removeTodolistTC","updateTodolistTitleTC","param","changeFilterAC","index","findIndex","tl","id","filter","changeTodolistEntityStatusAC","entityStatus","map","push","splice","todolistReducer","AddItemForm","React","memo","addItem","disabled","useState","setError","setTitle","addItemHandler","trim","TextField","value","onChange","e","currentTarget","onKeyPress","key","label","helperText","variant","className","IconButton","size","color","onClick","AddBox","EditableSpan","fontSize","editMode","setEditMode","autoFocus","onBlur","style","onDoubleClick","fetchTasksTC","tasks","items","addTaskTC","task","removeTaskTC","updateTask","getState","tasksForCurrentTodolist","find","t","apiModel","description","priority","startDate","deadline","domainModel","changeTaskEntityStatusAC","forEach","todoListId","unshift","tasksReducer","Task","useDispatch","removeTask","useCallback","onChangeHandler","checked","Completed","New","changeTaskTitle","statusLoading","task__wrapper","is_done","content","Checkbox","Delete","Todolist","props","isLogged","useSelector","auth","useEffect","addTask","changeTodoListTitle","changeFilter","removeTodolist","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","allTodoLists","tasksForTodolist","todolist","title__wrapper","btn__wrapper","Button","TodolistsList","todolists","addTodoList","Grid","container","padding","justify","alignItems","direction","marginRight","wrap","overflowY","Paper","to","Alert","elevation","ErrorSnackBar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","xs","handleSubmit","textAlign","marginTop","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","useStyles","makeStyles","theme","root","flexGrow","menuButton","spacing","App","classes","history","useHistory","handleLogout","AppBar","position","Toolbar","edge","aria-label","Typography","LinearProgress","Container","fixed","exact","path","render","from","top","width","CircularProgress","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","window","ReactDOM","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.bb7132cf.chunk.js","sourcesContent":["import axios from 'axios'\r\nimport {RequestStatusType} from \"../app/appReducer\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'a409a2ec-60ad-4ff6-9051-8f6025edc2fd'\r\n        // 'API-KEY': 'd700f3f2-767b-4068-ac9d-6d0dcd5ff82d' // test account\r\n    }\r\n})\r\n\r\n// tasks API\r\nexport const tasksAPI = {\r\n    getTasks(todolistId: string) {\r\n        return  instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return  instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: title})\r\n    },\r\n    deleteTask(taskId: string, todolistId: string) {\r\n        return  instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return  instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    }\r\n}\r\n// todolist API\r\nexport const todolistAPI = {\r\n    getTodolist() {\r\n        return  instance.get<Array<TodolistType>>(`todo-lists`)\r\n    },\r\n    createTodolist(title: string) {\r\n        return  instance.post<ResponseType<{item: TodolistType}>>(`todo-lists`, {title})\r\n    },\r\n    deleteTodolist(todolistId: string, ) {\r\n        return  instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return  instance.put<ResponseType>(`todo-lists/${todolistId}`, {title})\r\n    }\r\n}\r\n\r\n// auth API\r\nexport const authAPI = {\r\n    login(data: ParamsLoginType) {\r\n        return instance.post<ResponseType<{userId: number}>>(`auth/login`, data)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType<{}>>(`auth/login`)\r\n    },\r\n    auth() {\r\n        return instance.get<ResponseType<{id: number, email: string, login: string}>>(`auth/me`)\r\n    }\r\n}\r\n\r\n\r\n// types\r\nexport type ParamsLoginType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type TodolistType= {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\nexport type ResponseType<T = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: T\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n    entityStatus: RequestStatusType\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {ResponseType} from '../api/API'\r\nimport {setAppErrorAC, setAppStatusAC} from '../app/appReducer'\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: Dispatch) => {\r\n    dispatch(setAppErrorAC({error: error.message}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\n","import {setAppStatusAC} from '../../app/appReducer'\r\nimport {authAPI, ParamsLoginType} from \"../../api/API\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n\r\nexport const loginTC = createAsyncThunk('auth/login', async (data: ParamsLoginType,{dispatch}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.login(data)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return {isLoggedIn: true}\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (err) {\r\n        handleServerNetworkError(err, dispatch)\r\n    }\r\n})\r\nexport const logoutTC = createAsyncThunk('auth/logout', async (arg, {dispatch}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n           return {isLoggedIn: false}\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (err) {\r\n        handleServerNetworkError(err, dispatch)\r\n    }\r\n\r\n})\r\n\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'auth', // name of our reducer\r\n    initialState: initialState, // initialState\r\n    reducers: {\r\n        // Transfer to reducer our actions and put state and action to the parameters\r\n        // we need types actions and and use PayloadAction< {our value: type} >\r\n        setIsLoggedIn(state, action: PayloadAction<{ isLoggedIn: boolean }>) {\r\n            state.isLoggedIn = action.payload.isLoggedIn\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(loginTC.fulfilled, (state, action) => {\r\n            if (action.payload) {\r\n                state.isLoggedIn = action.payload.isLoggedIn\r\n            }\r\n        });\r\n        builder.addCase(logoutTC.fulfilled, (state, action) => {\r\n            if (action.payload) {\r\n                state.isLoggedIn = action.payload.isLoggedIn\r\n            }\r\n        })\r\n    }\r\n})\r\nexport const authReducer = slice.reducer // assign our reducer to variable\r\nexport const {setIsLoggedIn} = slice.actions // get actionCreator from actions\r\n","import {authAPI} from \"../api/API\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {setIsLoggedIn} from \"../features/Login/authReducer\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    status: 'idle',\r\n    error: null as string | null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const initializeAppTC = createAsyncThunk('app/initializeApp', async (arg, {dispatch}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.auth()\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedIn({isLoggedIn: true}))\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (err) {\r\n        handleServerNetworkError(err, dispatch)\r\n    }\r\n})\r\n\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppErrorAC(state, action: PayloadAction<{ error: string | null }>) {\r\n            state.error = action.payload.error\r\n        },\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(initializeAppTC.fulfilled, (state, action) => {\r\n            state.isInitialized = true\r\n        })\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\nexport const {setAppStatusAC, setAppErrorAC} = slice.actions\r\n\r\n// types\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\n","import {todolistAPI} from \"../../api/API\";\r\nimport {TodolistType} from \"../../api/API\"\r\nimport {\r\n    RequestStatusType,\r\n    setAppStatusAC,\r\n} from \"../../app/appReducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = createAsyncThunk('todolists/fetchTodolists',\r\n    async (arg, {\r\n        dispatch, rejectWithValue\r\n    }) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        try {\r\n            const res = await todolistAPI.getTodolist()\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return {todos: res.data}\r\n        } catch (err) {\r\n            handleServerNetworkError(err, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    })\r\n\r\nexport const addTodolistsTC = createAsyncThunk('todolists/addTodolist',\r\n    async (title: string, {dispatch, rejectWithValue}) => {\r\n        try {\r\n            dispatch(setAppStatusAC({status: 'loading'}))\r\n            const res = await todolistAPI.createTodolist(title)\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                return {todo: res.data.data.item}\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n                return rejectWithValue(null)\r\n            }\r\n        } catch (err) {\r\n            handleServerNetworkError(err, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    })\r\n\r\nexport const removeTodolistTC = createAsyncThunk('todolists/removeTodolist',\r\n    async (todolistId: string, {dispatch, rejectWithValue}) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        try {\r\n            const res = await todolistAPI.deleteTodolist(todolistId)\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                return {todolistId}\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n                return rejectWithValue(null)\r\n            }\r\n        } catch (err) {\r\n            handleServerNetworkError(err, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    })\r\n\r\n\r\nexport const updateTodolistTitleTC = createAsyncThunk('todolists/updateTodolist',\r\n    async (param:{todolistId: string, title: string}, {dispatch, rejectWithValue}) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        // dispatch(changeTodolistEntityStatusAC({id: todolistId, entityStatus: 'loading'}))\r\n        try {\r\n            const res = await todolistAPI.updateTodolist(param.todolistId, param.title)\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                // dispatch(changeTodolistEntityStatusAC({id: todolistId, entityStatus: 'succeeded'}))\r\n                return {todolistId: param.todolistId,  title: param.title}\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n                return rejectWithValue(null)\r\n            }\r\n        }catch (err) {\r\n            handleServerNetworkError(err, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n})\r\n\r\n\r\nconst initialState: Array<TodolistDomainType> = [\r\n    // {\r\n    //     id: '1',\r\n    //     addedDate: '',\r\n    //     order:0,\r\n    //     title: 'React',\r\n    //     filter: 'all' as FilterValuesType,\r\n    //     entityStatus: \"idle\" as RequestStatusType,\r\n    // },\r\n    // {\r\n    //     id: '2',\r\n    //     addedDate: '',\r\n    //     order:0,\r\n    //     title: 'React',\r\n    //     filter: 'all' as FilterValuesType,\r\n    //     entityStatus: \"idle\" as RequestStatusType,\r\n    // },\r\n]\r\n\r\nconst slice = createSlice({\r\n    name: 'todolist',\r\n    initialState: initialState,\r\n    reducers: {\r\n        changeFilterAC: (state, action: PayloadAction<{ filter: FilterValuesType, id: string }>) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        // changeTitleAC: (state, action: PayloadAction<{ id: string, title: string }>) => {\r\n        //     const index = state.findIndex(tl => tl.id === action.payload.id)\r\n        //     state[index].title = action.payload.title\r\n        // },\r\n        changeTodolistEntityStatusAC: (state, action: PayloadAction<{ id: string, entityStatus: RequestStatusType }>) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.entityStatus\r\n        },\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n            return action.payload.todos.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        });\r\n        builder.addCase(addTodolistsTC.fulfilled, (state, action) => {\r\n            state.push({...action.payload.todo, filter: 'all', entityStatus: 'idle'})\r\n        });\r\n        builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n            if (index !== -1) state.splice(index, 1)\r\n        });\r\n        builder.addCase(updateTodolistTitleTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n            state[index].title = action.payload.title\r\n        });\r\n\r\n    }\r\n})\r\n\r\nexport const todolistReducer = slice.reducer\r\nexport const {\r\n    changeFilterAC,\r\n    changeTodolistEntityStatusAC\r\n} = slice.actions\r\n\r\n// types\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\nexport type PropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(({addItem, disabled = false}: PropsType) => {\r\n    let [error, setError] = useState<string | null>(null)\r\n    let [title, setTitle] = useState(\"\")\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title.trim());\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if(error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.key === 'Enter') {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField value={title}\r\n                   disabled={disabled}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   error={!!error}\r\n                   label={title}\r\n                   helperText={error}\r\n                   variant='outlined'\r\n                   className=''\r\n        />\r\n        <IconButton size='small' color='primary' onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})","import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\n\r\nexport type PropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n    disabled?: boolean\r\n    fontSize?: string\r\n}\r\n\r\nexport const EditableSpan = React.memo(({value, onChange, disabled = false, fontSize}: PropsType) => {\r\n    const [editMode, setEditMode] = React.useState(false)\r\n    const [title, setTitle] = useState(value)\r\n\r\n    const activateEditMode = () => {\r\n        if(!disabled) {\r\n            setEditMode(true)\r\n            setTitle(value)\r\n        }\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        onChange(title)\r\n    }\r\n    const onChangeStatusHandler =(e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler =(e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            setEditMode(false)\r\n            onChange(title)\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode ?\r\n            <TextField variant='outlined' value={title} onChange={onChangeStatusHandler} onKeyPress={onKeyPressHandler} autoFocus onBlur={activateViewMode}/>\r\n            :\r\n            <span style={{fontSize: fontSize}} onDoubleClick={activateEditMode}>{title}</span>\r\n    )\r\n})","import {TaskPriorities, tasksAPI, TaskStatuses, TaskType, TodolistType, UpdateTaskModelType} from \"../../api/API\";\r\nimport {\r\n    addTodolistsTC,\r\n    fetchTodolistsTC,\r\n    removeTodolistTC,\r\n} from \"./todolistReducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {RequestStatusType, setAppStatusAC} from \"../../app/appReducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n\r\nexport const fetchTasksTC = createAsyncThunk('tasks/fetchTasks',\r\n    async (todolistId: string, {dispatch, rejectWithValue}) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        try {\r\n            const res = await tasksAPI.getTasks(todolistId)\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            const tasks = res.data.items\r\n            return {tasks, todolistId}\r\n        } catch (err) {\r\n            handleServerNetworkError(err, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    })\r\n\r\nexport const addTaskTC = createAsyncThunk('tasks/addTask',\r\n    async (param: { title: string, todolistId: string }, {dispatch, rejectWithValue}) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        try {\r\n            const res = await tasksAPI.createTask(param.todolistId, param.title)\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                return {task: res.data.data.item}\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n                return rejectWithValue(null)\r\n            }\r\n        } catch (err) {\r\n            handleServerNetworkError(err, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n\r\n    })\r\n\r\nexport const removeTaskTC = createAsyncThunk('tasks/removeTask',\r\n    async (param: { taskId: string, todolistId: string }, {dispatch, rejectWithValue}) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        // thunkAPI.dispatch(changeTaskEntityStatusAC({param.taskId, param.todolistId, entityStatus: 'loading'}))\r\n        try {\r\n            const res = await tasksAPI.deleteTask(param.taskId, param.todolistId)\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                return {taskId: param.taskId, todolistId: param.todolistId}\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n                return rejectWithValue(null)\r\n            }\r\n        } catch (err) {\r\n            handleServerNetworkError(err, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    })\r\n\r\n//универсальная санка, которая помимо taskId и todolistId принимает необходимое поле для изменения status|title\r\nexport const updateTask = createAsyncThunk('tasks/updateTasks',\r\n    async (param: { taskId: string, todolistId: string, domainModel: UpdateDomainTaskModelType },\r\n           {dispatch, rejectWithValue, getState}) => {\r\n // так как мы обязаны на сервер отправить все св-ва, которые сервер ожидает, а не только\r\n// те, которые мы хотим обновить, соответственно нам нужно в этом месте взять таску целиком\r\n// чтобы у неё отобрать остальные св-ва\r\n        const state = getState() as AppRootStateType\r\n        const tasksForCurrentTodolist = state.tasks[param.todolistId]\r\n        const task = tasksForCurrentTodolist.find(t => t.id === param.taskId)\r\n        if (!task) {\r\n            return rejectWithValue('task not found in the state')\r\n        }\r\n        const apiModel: UpdateTaskModelType = {\r\n            title: task.title,\r\n            description: task.description,\r\n            status: task.status,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            deadline: task.deadline,\r\n            ...param.domainModel// перезатираем только то свойство, которое было передано в domainModel\r\n        }\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        const res = await tasksAPI.updateTask(param.todolistId, param.taskId, apiModel)\r\n        try {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                return param\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n                return rejectWithValue(null)\r\n            }\r\n        } catch (err) {\r\n            handleServerNetworkError(err, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n})\r\n\r\n\r\nconst initialState: TaskStateType = {\r\n    // \"1\": [\r\n    //     {\r\n    //         id: \"1\", title: \"CSS\",\r\n    //         status: TaskStatuses.New, todoListId: 'todolistId1', description: '', startDate: '',\r\n    //         deadline: '', addedDate: '', order: 0,\r\n    //         priority: TaskPriorities.Low,\r\n    //         entityStatus: 'succeeded' as RequestStatusType,\r\n    //     },\r\n    //     {\r\n    //         id: \"2\", title: \"JS\",\r\n    //         status: TaskStatuses.Completed, todoListId: 'todolistId1', description: '', startDate: '',\r\n    //         deadline: '', addedDate: '', order: 0,\r\n    //         priority: TaskPriorities.Low,\r\n    //         entityStatus: 'succeeded' as RequestStatusType,\r\n    //     },\r\n    //     {\r\n    //         id: \"3\", title: \"REACT\",\r\n    //         status: TaskStatuses.New, todoListId: 'todolistId1', description: '', startDate: '',\r\n    //         deadline: '', addedDate: '', order: 0,\r\n    //         priority: TaskPriorities.Low,\r\n    //         entityStatus: 'succeeded' as RequestStatusType,\r\n    //     },\r\n    // ],\r\n    // \"2\": [\r\n    //     {\r\n    //         id: \"1\", title: \"book\",\r\n    //         status: TaskStatuses.New, todoListId: 'todolistId1', description: '', startDate: '',\r\n    //         deadline: '', addedDate: '', order: 0,\r\n    //         priority: TaskPriorities.Low,\r\n    //         entityStatus: 'succeeded' as RequestStatusType,\r\n    //     },\r\n    //     {\r\n    //         id: \"2\", title: \"book2\",\r\n    //         status: TaskStatuses.New, todoListId: 'todolistId1', description: '', startDate: '',\r\n    //         deadline: '', addedDate: '', order: 0,\r\n    //         priority: TaskPriorities.Low,\r\n    //         entityStatus: 'succeeded' as RequestStatusType,\r\n    //     },\r\n    //     {\r\n    //         id: \"3\", title: \"book3\",\r\n    //         status: TaskStatuses.New, todoListId: 'todolistId1', description: '', startDate: '',\r\n    //         deadline: '', addedDate: '', order: 0,\r\n    //         priority: TaskPriorities.Low,\r\n    //         entityStatus: 'succeeded' as RequestStatusType,\r\n    //     },\r\n    //\r\n    // ]\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: initialState,\r\n    reducers: {\r\n        changeTaskEntityStatusAC: (state, action: PayloadAction<ChangeTaskEntityType>) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index].entityStatus = action.payload.entityStatus\r\n            }\r\n        }\r\n    },//\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistsTC.fulfilled, (state, action) => {\r\n            state[action.payload.todo.id] = []\r\n        });\r\n        builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n            delete state[action.payload.todolistId]\r\n        });\r\n        builder.addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n            action.payload.todos.forEach((tl) => {\r\n                state[tl.id] = []\r\n            })\r\n        });\r\n        builder.addCase(fetchTasksTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        });\r\n        builder.addCase(addTaskTC.fulfilled, (state, action) => {\r\n            state[action.payload.task.todoListId].unshift(action.payload.task)\r\n        });\r\n        builder.addCase(removeTaskTC.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        });\r\n        builder.addCase(updateTask.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.domainModel}\r\n            }\r\n        })\r\n    }\r\n})\r\n\r\ntype ChangeTaskEntityType = { taskId: string, todolistId: string, entityStatus: RequestStatusType }\r\n\r\nexport const tasksReducer = slice.reducer\r\nexport const {changeTaskEntityStatusAC} = slice.actions\r\n\r\n// types\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n// создаем тип, для универсальной санки с необязательными полями, для подстановки нужного поля в санку\r\ntype UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n    entityStatus?: RequestStatusType\r\n}","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../../../Components/EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport { removeTaskTC, updateTask} from \"../../tasksReducer\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/API\";\r\nimport style from './Task.module.scss'\r\n\r\nexport type PropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\n\r\nconst Task = React.memo(({todolistId, task}: PropsType) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const removeTask = useCallback(() => {\r\n        dispatch(removeTaskTC({taskId: task.id, todolistId}))\r\n    },[task.id,todolistId])\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let status = e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New\r\n        dispatch(updateTask({taskId: task.id, todolistId, domainModel: {status}}));\r\n    },[task.id,todolistId])\r\n\r\n    const changeTaskTitle = useCallback((title: string) => {\r\n        dispatch(updateTask({taskId: task.id, todolistId, domainModel: {title}}));\r\n    },[task.id,todolistId])\r\n\r\n    const statusLoading = task.entityStatus === 'loading'\r\n    return (\r\n        <div className={task.status === TaskStatuses.Completed ? style.task__wrapper + ' ' + style.is_done: style.task__wrapper}>\r\n            <div className={style.content}>\r\n                <Checkbox color='primary'\r\n                          onChange={onChangeHandler}\r\n                          checked={task.status === TaskStatuses.Completed}\r\n                          disabled={statusLoading}/>\r\n                <EditableSpan value={task.title} onChange={changeTaskTitle} disabled={statusLoading}/>\r\n            </div>\r\n            <IconButton onClick={removeTask} disabled={statusLoading}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Task","import React, {useCallback, useEffect} from 'react';\r\nimport {Button, IconButton} from '@material-ui/core';\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {AddItemForm} from \"../../../Components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../Components/EditableSpan/EditableSpan\";\r\nimport Task from \"./Task/Task\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {addTaskTC, fetchTasksTC} from \"../tasksReducer\";\r\nimport {\r\n    changeFilterAC,\r\n    FilterValuesType, removeTodolistTC,\r\n    TodolistDomainType,\r\n    updateTodolistTitleTC\r\n} from \"../todolistReducer\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/API\";\r\nimport {AppRootStateType} from \"../../../app/store\";\r\nimport style from './TodoList.module.scss'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    todolistId: string\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) =>  {\r\n    const isLogged = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if(!isLogged) {\r\n            return\r\n        }\r\n        dispatch(fetchTasksTC(props.todolistId))\r\n    },[])//no dependencies. runs only once when the component will render\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        dispatch(addTaskTC({title: title.trim(), todolistId: props.todolistId}))\r\n    },[dispatch]);\r\n    const changeTodoListTitle = useCallback((title: string) => {\r\n        dispatch(updateTodolistTitleTC({todolistId: props.todolistId, title}))\r\n    },[dispatch, props.todolistId])\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, taskId: string) => {\r\n        dispatch(changeFilterAC({filter: value,id: taskId}));\r\n    },[dispatch])\r\n\r\n    const removeTodolist = useCallback((id: string) => {\r\n        dispatch(removeTodolistTC(id))\r\n    },[])\r\n\r\n    const onAllClickHandler = useCallback(() => {\r\n        changeFilter(\"all\", props.todolistId)\r\n    },[]);\r\n    const onActiveClickHandler = useCallback(() => {\r\n        changeFilter(\"active\", props.todolistId)\r\n    },[]);\r\n    const onCompletedClickHandler = useCallback(() => {\r\n        changeFilter(\"completed\", props.todolistId)\r\n    },[])\r\n\r\n\r\n    let allTodoLists = props.tasks;\r\n    let tasksForTodolist = allTodoLists\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = allTodoLists.filter(t => t.status === TaskStatuses.New);\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodolist = allTodoLists.filter(t => t.status === TaskStatuses.Completed);\r\n    }\r\n\r\n    const task =  tasksForTodolist.map(t => {\r\n        return <Task key={t.id}\r\n                     task={t}\r\n                     todolistId={props.todolistId}\r\n        />\r\n    })\r\n\r\n    const statusLoading = props.todolist.entityStatus === 'loading'\r\n\r\n    return <div className={style.todo}>\r\n        <div className={style.title__wrapper}>\r\n            <EditableSpan fontSize={'20px'}  value={props.title} onChange={changeTodoListTitle} disabled={statusLoading}/>\r\n            <IconButton onClick={() => removeTodolist(props.todolistId)} disabled={statusLoading}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>\r\n        <AddItemForm addItem={addTask} disabled={statusLoading}/>\r\n        <div>\r\n            {\r\n                task\r\n            }\r\n        </div>\r\n        {task.length ? <div className={style.btn__wrapper}>\r\n            <Button variant='outlined' color={props.filter === 'all' ? \"secondary\" : \"primary\"} size='small'\r\n                    onClick={onAllClickHandler}>All\r\n            </Button>\r\n            <Button variant='outlined' color={props.filter === 'active' ? \"secondary\" : \"primary\"} size='small'\r\n                    onClick={onActiveClickHandler}>Active\r\n            </Button>\r\n            <Button variant='outlined' color={props.filter === 'completed' ? \"secondary\" : \"primary\"} size='small'\r\n                    onClick={onCompletedClickHandler}>Completed\r\n            </Button>\r\n        </div> : <span>No tasks - create your first task</span>}\r\n\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {addTodolistsTC, fetchTodolistsTC, TodolistDomainType} from \"./todolistReducer\";\r\nimport {TaskStateType} from \"./tasksReducer\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"../../Components/AddItemForm/AddItemForm\";\r\nimport {Todolist} from \"./Todolist/TodoList\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks);\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if(!isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        dispatch(addTodolistsTC(title))\r\n    }, [])\r\n\r\n    if(!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n    return <>\r\n        <Grid container  style={{padding: '20px'}}\r\n              justify=\"center\"\r\n              alignItems=\"center\"\r\n              direction=\"column\">\r\n            <div style={{marginRight: '20px'}}>Add new task</div>\r\n            <AddItemForm addItem={addTodoList}/>\r\n        </Grid>\r\n        <Grid container wrap={'nowrap'} style={{overflowY: 'auto', padding: '0  20px 200px'}}>\r\n            {todolists.map(t => {\r\n                let allTodoLists = tasks[t.id];\r\n                return (\r\n                    <Grid key={t.id} item style={{padding: '20px'}}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist key={t.id}\r\n                                      todolist={t}\r\n                                      title={t.title}\r\n                                      tasks={allTodoLists}\r\n                                      filter={t.filter}\r\n                                      todolistId={t.id}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                )\r\n            })}\r\n        </Grid>\r\n    </>\r\n}","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport { setAppErrorAC} from \"../../app/appReducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport default function ErrorSnackBar() {\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC({error: null}));\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={4000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from 'formik';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./authReducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport { Redirect } from 'react-router-dom';\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\n\r\nexport const Login = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: 'nikitinasv12@gmail.com',\r\n            password: '123456',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'password must be more than 3 character';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    });\r\n    if(isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n    return <Grid container\r\n                 justify=\"center\">\r\n            <Grid item xs={10} >\r\n            <form onSubmit={formik.handleSubmit} style={{textAlign: 'center', marginTop: \"50px\"}}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use test account credentials:</p>\r\n                        <p>Email: nikitinasv12@gmail.com</p>\r\n                        <p>Password: 123456</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email ?\r\n                            <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password ?\r\n                            <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport './App.scss';\r\nimport {\r\n    AppBar,\r\n    Button, CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    makeStyles,\r\n    Toolbar,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport {TodolistsList} from \"../features/Todolists/TotolistsList\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {initializeAppTC} from \"./appReducer\";\r\nimport ErrorSnackBar from \"../Components/ErrorSnackBar/ErrorSnackBar\";\r\nimport {HashRouter, Redirect, Route, Switch, useHistory} from 'react-router-dom';\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {logoutTC} from \"../features/Login/authReducer\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\nfunction App() {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const status = useSelector<AppRootStateType, string>(state => state.app.status)\r\n    const classes = useStyles();\r\n    let history = useHistory();\r\n\r\n    const handleLogout = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackBar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        My TODO\r\n                    </Typography>\r\n                    {\r\n                        !isLoggedIn ?\r\n                            <Button color=\"inherit\" onClick={() => history.push('/login')}>Login</Button> :\r\n                            <Button color=\"inherit\" onClick={handleLogout}>Log out</Button>\r\n                    }\r\n                </Toolbar>\r\n            </AppBar>\r\n            {status === 'loading' && <LinearProgress color={\"primary\"}/>}\r\n            <Container fixed>\r\n                <HashRouter>\r\n                    <Switch>\r\n                        <Route exact path={'/'} render={() => <TodolistsList/>}/>\r\n                        <Route path={'/login'} render={() => <Login/>}/>\r\n                        <Route path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n                        <Redirect from={'*'} to={'/404'}/>\r\n                    </Switch>\r\n                </HashRouter>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {tasksReducer} from '../features/Todolists/tasksReducer';\r\nimport {todolistReducer} from '../features/Todolists/todolistReducer';\r\nimport {combineReducers} from 'redux';\r\nimport thunk from 'redux-thunk'\r\nimport {appReducer} from \"./appReducer\";\r\nimport {authReducer} from \"../features/Login/authReducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния (редюсера)\r\nexport const rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\n// export const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// create our store use configureStore\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunk),\r\n})\r\n\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент store.getSstate\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './app/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\n\r\nReactDOM.render(\r\n        <Provider store={store} >\r\n            <App/>\r\n        </Provider>\r\n,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"is_done\":\"Task_is_done__j8oYL\",\"task__wrapper\":\"Task_task__wrapper__3yx0w\",\"content\":\"Task_content__2Dl_X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todo\":\"TodoList_todo__3km2V\",\"btn__wrapper\":\"TodoList_btn__wrapper__3Xdyv\",\"title__wrapper\":\"TodoList_title__wrapper__2EXQV\"};"],"sourceRoot":""}